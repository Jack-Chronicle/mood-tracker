{
  "version": 3,
  "sources": ["../src/main.ts", "../src/types/pluginSettings.ts", "../src/settings/MoodEnergySettingTab.ts", "../src/settings/FilePathSuggester.ts", "../src/commands.ts", "../src/utils/modalUtils.ts", "../src/utils/formatBarIcons.ts", "../src/modals/MoodMenu.ts", "../src/modals/EnergySlider.ts", "../src/modals/MoodEnergyModal.ts"],
  "sourcesContent": ["// main.ts\r\n// Main plugin entry point for the Mood & Energy Obsidian plugin.\r\n\r\nimport { Plugin, Editor, MarkdownView } from \"obsidian\";\r\nimport { MoodEnergyPluginSettings, DEFAULT_SETTINGS } from \"./types\";\r\nimport { MoodEnergySettingTab } from \"./settings\";\r\nimport { registerCommands, insertMood, insertEnergy, insertMoodAndEnergy } from \"./commands\";\r\nimport { showMoodAndEnergyModal } from \"./modals/MoodEnergyModal\";\r\nimport { MoodMenu, EnergySlider } from \"./modals\";\r\nimport { loadMoodsFromFile } from \"./utils\";\r\n\r\n/**\r\n * Main plugin class for Mood & Energy tracking in Obsidian.\r\n */\r\nexport default class MoodEnergyPlugin extends Plugin {\r\n  settings: MoodEnergyPluginSettings;\r\n  settingTab: MoodEnergySettingTab | null = null;\r\n  ribbonIcons: HTMLElement[] = [];\r\n\r\n  constructor(app: any, manifest: any) {\r\n    super(app, manifest);\r\n    this.settings = DEFAULT_SETTINGS;\r\n  }\r\n\r\n  \r\n  reloadRibbonIcons() {\r\n    // Remove old icons\r\n    this.ribbonIcons.forEach(icon => icon.remove());\r\n    this.ribbonIcons = [];\r\n\r\n    if (this.settings.showMoodRibbon) {\r\n      const moodIcon = this.addRibbonIcon(\"smile\", \"Open Mood Menu\", async () => {\r\n        const editor = this.app.workspace.getActiveViewOfType(MarkdownView)?.editor;\r\n        if (editor) editor.focus();\r\n        await insertMood(this);\r\n      });\r\n      this.ribbonIcons.push(moodIcon);\r\n    }\r\n    if (this.settings.showEnergyRibbon) {\r\n      const energyIcon = this.addRibbonIcon(\"activity\", \"Open Energy Slider\", async () => {\r\n        const editor = this.app.workspace.getActiveViewOfType(MarkdownView)?.editor;\r\n        if (editor) editor.focus();\r\n        await insertEnergy(this);\r\n      });\r\n      this.ribbonIcons.push(energyIcon);\r\n    }\r\n    if (this.settings.showCombinedRibbon) {\r\n      const combinedIcon = this.addRibbonIcon(\"bar-chart-2\", \"Open Mood & Energy Modal\", async () => {\r\n        const editor = this.app.workspace.getActiveViewOfType(MarkdownView)?.editor;\r\n        if (editor) editor.focus();\r\n        await insertMoodAndEnergy(this);\r\n      });\r\n      this.ribbonIcons.push(combinedIcon);\r\n    }\r\n  }\r\n\r\n/**\r\n * Loads settings and registers commands on plugin load.\r\n */\r\nasync onload() {\r\n  this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData?.());\r\n  await this.saveSettings();\r\n  this.addSettingTab(new MoodEnergySettingTab(this.app, this));\r\n  registerCommands(this);\r\n\r\n  // --- Ribbon icons ---\r\n  await this.reloadRibbonIcons();\r\n}\r\n\r\n  /**\r\n   * Saves plugin settings to disk.\r\n   */\r\n  async saveSettings() {\r\n    await this.saveData?.(this.settings);\r\n  }\r\n\r\n  /**\r\n   * Cleans up on plugin unload.\r\n   */\r\n  onunload() {\r\n    this.ribbonIcons.forEach(icon => icon.remove());\r\n    this.ribbonIcons = [];\r\n  }\r\n}\r\n", "// ...MoodEnergyPluginSettings and DEFAULT_SETTINGS from src/types/index.ts...\r\nexport interface MoodEnergyPluginSettings {\r\n  moodsFilePath: string;\r\n  energyDisplay: \"text\" | \"percent\" | \"bar\";\r\n  energyFormat: string;\r\n  barIcons: string;\r\n  barIconCount: number;\r\n  energyOnlyFormat: string;\r\n  moodOnlyFormat: string;\r\n  moodAndEnergyFormat: string;\r\n  showMoodRibbon?: boolean;\r\n  showEnergyRibbon?: boolean;\r\n  showCombinedRibbon?: boolean;\r\n}\r\n\r\nexport const DEFAULT_SETTINGS: MoodEnergyPluginSettings = {\r\n  moodsFilePath: \"moods.txt\",\r\n  energyDisplay: \"bar\",\r\n  energyFormat: \"Energy: {value}\",\r\n  barIcons: \"\u28FF\u28F7\u28F6\u28E6\u28E4\u28C4\u28C0\",\r\n  barIconCount: 7,\r\n  energyOnlyFormat: \"Energy: {value}\",\r\n  moodOnlyFormat: \"{value}\",\r\n  moodAndEnergyFormat: \"{mood} | {energy}\",\r\n  showMoodRibbon: true,\r\n  showEnergyRibbon: true,\r\n  showCombinedRibbon: true,\r\n};\r\n", "import { TFile, normalizePath } from \"obsidian\";\r\nimport { PluginSettingTab, Setting, App, TextComponent } from \"obsidian\";\r\nimport { FilePathSuggester } from \"./FilePathSuggester\";\r\nimport { MoodEnergyPluginSettings } from \"../types\";\r\n\r\nexport async function loadMoodsFromFile(vault: any, filePath: string): Promise<string[]> {\r\n  try {\r\n    const file = vault.getAbstractFileByPath(normalizePath(filePath));\r\n    if (file instanceof TFile) {\r\n      const content = await vault.read(file);\r\n      let lines = content.split(/\\r?\\n/);\r\n      if (lines[0].trim() === \"---\") {\r\n        let i = 1;\r\n        while (i < lines.length && lines[i].trim() !== \"---\") i++;\r\n        lines = lines.slice(i + 1);\r\n      }\r\n      return lines\r\n        .map((l: string) => l.replace(/<\\/?[a-zA-Z][^>]*>/g, \"\").trim())\r\n        .filter((l: string) => l.length > 0);\r\n    }\r\n  } catch (e) {\r\n    console.error(\"Failed to load moods file:\", e);\r\n  }\r\n  return [];\r\n}\r\n\r\nexport class MoodEnergySettingTab extends PluginSettingTab {\r\n  plugin: any;\r\n  constructor(app: App, plugin: any) {\r\n    super(app, plugin);\r\n    this.plugin = plugin;\r\n    plugin.settingTab = this;\r\n  }\r\n  display(): void {\r\n    const { containerEl } = this;\r\n    containerEl.empty();\r\n    containerEl.createEl(\"h2\", { text: \"Mood & Energy Plugin Settings\" });\r\n    containerEl.createEl(\"h3\", { text: \"Mood Settings\" });\r\n    new Setting(containerEl)\r\n      .setName(\"Moods File Path\")\r\n      .setDesc(\"Path to the file containing your moods, one per line (excluding frontmatter). Start typing to see suggestions from your vault.\")\r\n      .addText((text: TextComponent) => {\r\n        text.setPlaceholder(\"moods.txt\")\r\n          .setValue(this.plugin.settings.moodsFilePath)\r\n          .onChange(async (value) => {\r\n            this.plugin.settings.moodsFilePath = value;\r\n            await this.plugin.saveSettings();\r\n          });\r\n        setTimeout(() => new FilePathSuggester(text.inputEl, this.app), 0);\r\n      });\r\n    containerEl.createEl(\"h3\", { text: \"Energy Settings\" });\r\n    new Setting(containerEl)\r\n      .setName(\"Energy Display\")\r\n      .setDesc(\"How to display the energy value: as text, percent, or a progress bar.\")\r\n      .addDropdown((dropdown) =>\r\n        dropdown\r\n          .addOption(\"text\", \"Text\")\r\n          .addOption(\"percent\", \"Percent\")\r\n          .addOption(\"bar\", \"Progress Bar\")\r\n          .setValue(this.plugin.settings.energyDisplay)\r\n          .onChange(async (value) => {\r\n            this.plugin.settings.energyDisplay = value;\r\n            await this.plugin.saveSettings();\r\n            this.display();\r\n          })\r\n      );\r\n    if (this.plugin.settings.energyDisplay === \"bar\") {\r\n      new Setting(containerEl)\r\n        .setName(\"Bar Icons\")\r\n        .setDesc(\"Icons for the progress bar, from full to empty (e.g. \u28FF\u28F7\u28F6\u28E6\u28E4\u28C4\u28C0 or \u2588\u2593\u2592\u2591)\")\r\n        .addText((text) =>\r\n          text\r\n            .setPlaceholder(\"\u28FF\u28F7\u28F6\u28E6\u28E4\u28C4\u28C0\")\r\n            .setValue(this.plugin.settings.barIcons)\r\n            .onChange(async (value) => {\r\n              this.plugin.settings.barIcons = value;\r\n              await this.plugin.saveSettings();\r\n            })\r\n        );\r\n      new Setting(containerEl)\r\n        .setName(\"Bar Icon Count\")\r\n        .setDesc(\"Number of icons in the progress bar (e.g. 5, 7, 10, 20)\")\r\n        .addText((text) =>\r\n          text\r\n            .setPlaceholder(\"7\")\r\n            .setValue(this.plugin.settings.barIconCount.toString())\r\n            .onChange(async (value) => {\r\n              const num = parseInt(value);\r\n              if (!isNaN(num) && num > 0) {\r\n                this.plugin.settings.barIconCount = num;\r\n                await this.plugin.saveSettings();\r\n              }\r\n            })\r\n        );\r\n    }\r\n    containerEl.createEl(\"h3\", { text: \"Output Format Settings\" });\r\n    new Setting(containerEl)\r\n      .setName(\"Energy Only Output Format\")\r\n      .setDesc(\"Format for energy only output. Use {value} for the energy bar/number.\")\r\n      .addText((text) =>\r\n        text\r\n          .setPlaceholder(\"Energy: {value}\")\r\n          .setValue(this.plugin.settings.energyOnlyFormat)\r\n          .onChange(async (value) => {\r\n            this.plugin.settings.energyOnlyFormat = value;\r\n            await this.plugin.saveSettings();\r\n          })\r\n      );\r\n    new Setting(containerEl)\r\n      .setName(\"Mood Only Output Format\")\r\n      .setDesc(\"Format for mood only output. Use {value} for the mood.\")\r\n      .addText((text) =>\r\n        text\r\n          .setPlaceholder(\"{value}\")\r\n          .setValue(this.plugin.settings.moodOnlyFormat)\r\n          .onChange(async (value) => {\r\n            this.plugin.settings.moodOnlyFormat = value;\r\n            await this.plugin.saveSettings();\r\n          })\r\n      );\r\n    new Setting(containerEl)\r\n      .setName(\"Mood + Energy Output Format\")\r\n      .setDesc(\"Format for mood + energy output. Use {mood} and {energy}.\")\r\n      .addText((text) =>\r\n        text\r\n          .setPlaceholder(\"{mood} | {energy}\")\r\n          .setValue(this.plugin.settings.moodAndEnergyFormat)\r\n          .onChange(async (value) => {\r\n            this.plugin.settings.moodAndEnergyFormat = value;\r\n            await this.plugin.saveSettings();\r\n          })\r\n      );\r\n    new Setting(containerEl)\r\n      .setName(\"Show Mood Ribbon Icon\")\r\n      .setDesc(\"Show a toolbar button for the Mood menu.\")\r\n      .addToggle(toggle => toggle\r\n        .setValue(this.plugin.settings.showMoodRibbon)\r\n        .onChange(async (value) => {\r\n          this.plugin.settings.showMoodRibbon = value;\r\n          await this.plugin.saveSettings();\r\n          this.plugin.reloadRibbonIcons();\r\n        }));\r\n    new Setting(containerEl)\r\n      .setName(\"Show Energy Ribbon Icon\")\r\n      .setDesc(\"Show a toolbar button for the Energy slider.\")\r\n      .addToggle(toggle => toggle\r\n        .setValue(this.plugin.settings.showEnergyRibbon)\r\n        .onChange(async (value) => {\r\n          this.plugin.settings.showEnergyRibbon = value;\r\n          await this.plugin.saveSettings();\r\n          this.plugin.reloadRibbonIcons();\r\n        }));\r\n    new Setting(containerEl)\r\n      .setName(\"Show Combined Ribbon Icon\")\r\n      .setDesc(\"Show a toolbar button for the combined Mood & Energy modal.\")\r\n      .addToggle(toggle => toggle\r\n        .setValue(this.plugin.settings.showCombinedRibbon)\r\n        .onChange(async (value) => {\r\n          this.plugin.settings.showCombinedRibbon = value;\r\n          await this.plugin.saveSettings();\r\n          this.plugin.reloadRibbonIcons();\r\n        }));\r\n  }\r\n}\r\n", "export class FilePathSuggester {\r\n  constructor(inputEl: HTMLInputElement, app: any) {\r\n    let lastSuggestions: string[] = [];\r\n    let dropdown: HTMLDivElement | null = null;\r\n    let selectedIdx: number = -1;\r\n    let items: HTMLDivElement[] = [];\r\n    const highlightClass = \"file-path-suggester-highlight\";\r\n    if (!document.getElementById(\"file-path-suggester-style\")) {\r\n      const style = document.createElement(\"style\");\r\n      style.id = \"file-path-suggester-style\";\r\n      style.textContent = `\r\n        .file-path-suggester-dropdown {\r\n          background: var(--background-secondary);\r\n          border: 1px solid var(--background-modifier-border);\r\n          color: var(--text-normal);\r\n          box-shadow: 0 2px 8px var(--background-modifier-box-shadow);\r\n          border-radius: var(--radius-m);\r\n          font-size: var(--font-ui-medium);\r\n          padding: 4px 0;\r\n        }\r\n        .file-path-suggester-dropdown div {\r\n          padding: 4px 12px;\r\n          cursor: pointer;\r\n          border-radius: var(--radius-s);\r\n        }\r\n        .file-path-suggester-dropdown div:hover,\r\n        .file-path-suggester-highlight {\r\n          background: var(--background-modifier-hover);\r\n          color: var(--text-accent);\r\n        }\r\n      `;\r\n      document.head.appendChild(style);\r\n    }\r\n    function closeDropdown() {\r\n      if (dropdown) dropdown.remove();\r\n      dropdown = null;\r\n      items = [];\r\n      selectedIdx = -1;\r\n    }\r\n    function openDropdown(suggestions: string[]) {\r\n      closeDropdown();\r\n      if (!suggestions.length) return;\r\n      dropdown = document.createElement(\"div\");\r\n      dropdown.className = \"file-path-suggester-dropdown\";\r\n      dropdown.style.position = \"absolute\";\r\n      dropdown.style.zIndex = \"9999\";\r\n      dropdown.style.maxHeight = \"200px\";\r\n      dropdown.style.overflowY = \"auto\";\r\n      dropdown.style.width = inputEl.offsetWidth + \"px\";\r\n      const rect = inputEl.getBoundingClientRect();\r\n      dropdown.style.left = rect.left + window.scrollX + \"px\";\r\n      dropdown.style.top = (rect.bottom + window.scrollY) + \"px\";\r\n      suggestions.forEach((s, idx) => {\r\n        const item = document.createElement(\"div\");\r\n        item.textContent = s;\r\n        item.tabIndex = -1;\r\n        item.onmouseenter = () => setHighlight(idx);\r\n        item.onmouseleave = () => setHighlight(-1);\r\n        item.onmousedown = (e) => {\r\n          e.preventDefault();\r\n          inputEl.value = s;\r\n          inputEl.dispatchEvent(new Event(\"input\"));\r\n          closeDropdown();\r\n        };\r\n        dropdown!.appendChild(item);\r\n        items.push(item);\r\n      });\r\n      document.body.appendChild(dropdown);\r\n    }\r\n    function setHighlight(idx: number) {\r\n      items.forEach((el, i) => {\r\n        if (i === idx) el.classList.add(highlightClass);\r\n        else el.classList.remove(highlightClass);\r\n      });\r\n      selectedIdx = idx;\r\n    }\r\n    inputEl.addEventListener(\"input\", () => {\r\n      const query = inputEl.value.toLowerCase();\r\n      const files = app.vault.getFiles();\r\n      const suggestions = files\r\n        .map((f: any) => f.path)\r\n        .filter((path: string) => path.toLowerCase().includes(query))\r\n        .slice(0, 20);\r\n      lastSuggestions = suggestions;\r\n      openDropdown(suggestions);\r\n    });\r\n    inputEl.addEventListener(\"keydown\", (e) => {\r\n      if (!dropdown || !items.length) return;\r\n      if (e.key === \"ArrowDown\") {\r\n        e.preventDefault();\r\n        setHighlight((selectedIdx + 1) % items.length);\r\n        items[selectedIdx]?.scrollIntoView({ block: \"nearest\" });\r\n      } else if (e.key === \"ArrowUp\") {\r\n        e.preventDefault();\r\n        setHighlight((selectedIdx - 1 + items.length) % items.length);\r\n        items[selectedIdx]?.scrollIntoView({ block: \"nearest\" });\r\n      } else if (e.key === \"Enter\") {\r\n        if (selectedIdx >= 0 && selectedIdx < items.length) {\r\n          inputEl.value = lastSuggestions[selectedIdx];\r\n          inputEl.dispatchEvent(new Event(\"input\"));\r\n          closeDropdown();\r\n          e.preventDefault();\r\n        }\r\n      } else if (e.key === \"Escape\") {\r\n        closeDropdown();\r\n      }\r\n    });\r\n    inputEl.addEventListener(\"blur\", () => setTimeout(closeDropdown, 100));\r\n  }\r\n}\r\n", "// commands.ts\r\n// Command registration and modal logic for the Mood & Energy Obsidian plugin.\r\n\r\nimport { MarkdownView, Editor } from \"obsidian\";\r\nimport { MoodMenu } from \"./modals\";\r\nimport { EnergySlider } from \"./modals\";\r\nimport { loadMoodsFromFile, formatBarIcons, openModal, closeModal, currentOpenModal } from \"./utils\";\r\nimport { showMoodAndEnergyModal } from \"./modals/MoodEnergyModal\";\r\n\r\nexport async function insertMood(plugin: any) {\r\n  const moods = await loadMoodsFromFile(plugin.app.vault, plugin.settings.moodsFilePath);\r\n  const moodMenu = new MoodMenu(moods);\r\n  const selectedMood = await moodMenu.open();\r\n  if (selectedMood) {\r\n    const editor = plugin.app.workspace.getActiveViewOfType(MarkdownView)?.editor;\r\n    if (editor) {\r\n      const format = plugin.settings.moodOnlyFormat || \"{value}\";\r\n      const output = format.replace(\"{value}\", selectedMood);\r\n      editor.focus();\r\n      editor.replaceSelection(output);\r\n    }\r\n  }\r\n}\r\n\r\nexport async function insertEnergy(plugin: any) {\r\n  const energySlider = new EnergySlider(plugin);\r\n  const selectedEnergyLevel = await energySlider.open();\r\n  if (selectedEnergyLevel !== null) {\r\n    const editor = plugin.app.workspace.getActiveViewOfType(MarkdownView)?.editor;\r\n    if (editor) {\r\n      let output = \"\";\r\n      const settings = plugin.settings;\r\n      if (settings.energyDisplay === \"percent\") {\r\n        output = settings.energyOnlyFormat.replace(\"{value}\", `${selectedEnergyLevel}%`);\r\n      } else if (settings.energyDisplay === \"bar\") {\r\n        output = settings.energyOnlyFormat.replace(\"{value}\", formatBarIcons(settings.barIcons, selectedEnergyLevel, settings.barIconCount));\r\n      } else {\r\n        output = settings.energyOnlyFormat.replace(\"{value}\", `${selectedEnergyLevel}`);\r\n      }\r\n      editor.focus();\r\n      editor.replaceSelection(output);\r\n    }\r\n  }\r\n}\r\n\r\nexport async function insertMoodAndEnergy(plugin: any) {\r\n  await showMoodAndEnergyModal(plugin);\r\n}\r\n\r\n/**\r\n * Registers all plugin commands and their hotkeys with Obsidian.\r\n * @param plugin - The plugin instance.\r\n */\r\nexport function registerCommands(plugin: any) {\r\n  function canRunCommand() {\r\n    // Only require that no modal is open\r\n    return !currentOpenModal;\r\n  }\r\n  plugin.addCommand({\r\n    id: \"insert-mood\",\r\n    name: \"Insert Mood\",\r\n    hotkeys: [{ modifiers: [\"Alt\"], key: \"6\" }],\r\n    callback: async () => {\r\n      if (!canRunCommand()) return;\r\n      const moods = await loadMoodsFromFile(plugin.app.vault, plugin.settings.moodsFilePath);\r\n      const moodMenu = new MoodMenu(moods);\r\n      const selectedMood = await moodMenu.open();\r\n      if (selectedMood) {\r\n        const editor = plugin.app.workspace.getActiveViewOfType(MarkdownView)?.editor;\r\n        if (editor) {\r\n          const format = plugin.settings.moodOnlyFormat || \"{value}\";\r\n          const output = format.replace(\"{value}\", selectedMood);\r\n          editor.replaceSelection(output);\r\n          if (editor.focus) editor.focus();\r\n        }\r\n      }\r\n    }\r\n  });\r\n  plugin.addCommand({\r\n    id: \"insert-energy-level\",\r\n    name: \"Insert Energy Level\",\r\n    hotkeys: [{ modifiers: [\"Alt\"], key: \"5\" }],\r\n    callback: async () => {\r\n      if (!canRunCommand()) return;\r\n      const energySlider = new EnergySlider(plugin);\r\n      const selectedEnergyLevel = await energySlider.open();\r\n      if (selectedEnergyLevel !== null) {\r\n        const editor = plugin.app.workspace.getActiveViewOfType(MarkdownView)?.editor;\r\n        if (editor) {\r\n          let output = \"\";\r\n          const settings = plugin.settings;\r\n          if (settings.energyDisplay === \"percent\") {\r\n            output = settings.energyOnlyFormat.replace(\"{value}\", `${selectedEnergyLevel}%`);\r\n          } else if (settings.energyDisplay === \"bar\") {\r\n            output = settings.energyOnlyFormat.replace(\"{value}\", formatBarIcons(settings.barIcons, selectedEnergyLevel, settings.barIconCount));\r\n          } else {\r\n            output = settings.energyOnlyFormat.replace(\"{value}\", `${selectedEnergyLevel}`);\r\n          }\r\n          editor.replaceSelection(output);\r\n          if (editor.focus) editor.focus();\r\n        }\r\n      }\r\n    }\r\n  });\r\n  plugin.addCommand({\r\n    id: \"insert-mood-and-energy\",\r\n    name: \"Insert Mood and Energy Level\",\r\n    hotkeys: [{ modifiers: [\"Alt\"], key: \"7\" }],\r\n    callback: async () => {\r\n      if (!canRunCommand()) return;\r\n      await insertMoodAndEnergy(plugin);\r\n    }\r\n  });\r\n}\r\n", "/**\r\n * Tracks the currently open modal (if any).\r\n */\r\nexport let currentOpenModal: HTMLElement | null = null;\r\n\r\n/**\r\n * Opens a modal, ensuring only one is open at a time.\r\n * @param modalEl - The modal element to open.\r\n */\r\nexport function openModal(modalEl: HTMLElement) {\r\n  if (currentOpenModal && currentOpenModal !== modalEl) {\r\n    currentOpenModal.remove();\r\n  }\r\n  currentOpenModal = modalEl;\r\n  document.body.appendChild(modalEl);\r\n}\r\n\r\n/**\r\n * Closes a modal and clears the currentOpenModal reference.\r\n * @param modalEl - The modal element to close.\r\n */\r\nexport function closeModal(modalEl: HTMLElement) {\r\n  if (currentOpenModal === modalEl) {\r\n    modalEl.remove();\r\n    currentOpenModal = null;\r\n  } else {\r\n    modalEl.remove();\r\n  }\r\n}\r\n", "/**\r\n * Formats a progress bar using a string of icons and a value.\r\n * @param barIcons - String of icons from full to empty.\r\n * @param value - Value from 0 to 100.\r\n * @param iconCount - Number of icons to display.\r\n * @returns The formatted bar string.\r\n */\r\nexport function formatBarIcons(barIcons: string, value: number, iconCount: number): string {\r\n  if (!barIcons || barIcons.length < 2 || iconCount < 1) return value.toString();\r\n  const levels = barIcons.length;\r\n  const percent = Math.max(0, Math.min(100, value));\r\n  let bar = \"\";\r\n  for (let i = 0; i < iconCount; i++) {\r\n    // For each icon, determine how full it should be\r\n    const iconPercent = 100 * (i + 1) / iconCount;\r\n    const rel = percent - (100 * i / iconCount);\r\n    let iconLevel = Math.round((1 - rel / (100 / iconCount)) * (levels - 1));\r\n    if (percent >= iconPercent) iconLevel = 0; // full\r\n    else if (percent <= 100 * i / iconCount) iconLevel = levels - 1; // empty\r\n    iconLevel = Math.max(0, Math.min(levels - 1, iconLevel));\r\n    bar += barIcons[iconLevel];\r\n  }\r\n  return bar;\r\n}\r\n", "import { openModal, closeModal } from \"../utils\";\r\n\r\nexport class MoodMenu {\r\n  moods: string[];\r\n  selectedMood: string | null = null;\r\n  resolveFn: ((mood: string | null) => void) | null = null;\r\n  modalElement!: HTMLDivElement;\r\n\r\n  private static parseMoodsToTree(moods: string[]) {\r\n    type SectionNode = {\r\n      name: string;\r\n      level: number;\r\n      moods: string[];\r\n      sections: SectionNode[];\r\n      parent?: SectionNode;\r\n    };\r\n    const root: SectionNode = { name: \"\", level: 0, moods: [], sections: [] };\r\n    let currentSection: SectionNode = root;\r\n    const sectionStack: SectionNode[] = [root];\r\n    for (let line of moods) {\r\n      if (/^#+\\s/.test(line)) {\r\n        const match = line.match(/^(#+)\\s*(.*)$/);\r\n        if (!match) continue;\r\n        const level = match[1].length;\r\n        const name = match[2].trim();\r\n        while (sectionStack.length > 0 && sectionStack[sectionStack.length - 1].level >= level) {\r\n          sectionStack.pop();\r\n        }\r\n        const parent = sectionStack[sectionStack.length - 1];\r\n        const newSection: SectionNode = { name, level, moods: [], sections: [], parent };\r\n        parent.sections.push(newSection);\r\n        sectionStack.push(newSection);\r\n        currentSection = newSection;\r\n      } else if (line.trim().length > 0) {\r\n        currentSection.moods.push(line.replace(/^[-*]\\s*/, \"\"));\r\n      }\r\n    }\r\n    return root;\r\n  }\r\n\r\n  constructor(moods: string[]) {\r\n    this.moods = moods;\r\n  }\r\n\r\n  displayMenu(widthOverride?: string) {\r\n    // Remove any existing modal\r\n    if (this.modalElement) {\r\n      closeModal(this.modalElement);\r\n    }\r\n    // Modal container\r\n    this.modalElement = document.createElement(\"div\");\r\n    this.modalElement.className = \"mood-menu\";\r\n    this.modalElement.style.position = \"fixed\";\r\n    this.modalElement.style.top = \"50%\";\r\n    this.modalElement.style.left = \"50%\";\r\n    this.modalElement.style.transform = \"translate(-50%, -50%)\";\r\n    this.modalElement.style.background = \"var(--background-secondary)\";\r\n    this.modalElement.style.padding = \"24px\";\r\n    this.modalElement.style.borderRadius = \"var(--radius-m)\";\r\n    this.modalElement.style.zIndex = \"9999\";\r\n    this.modalElement.style.display = \"flex\";\r\n    this.modalElement.style.flexDirection = \"column\";\r\n    this.modalElement.style.alignItems = \"center\";\r\n    this.modalElement.style.boxShadow = \"0 4px 32px var(--background-modifier-box-shadow)\";\r\n    this.modalElement.style.maxHeight = \"80vh\";\r\n    this.modalElement.style.overflow = \"auto\";\r\n    this.modalElement.style.width = widthOverride || \"min(700px, 90vw)\";\r\n    this.modalElement.style.minWidth = \"340px\";\r\n    this.modalElement.style.maxWidth = \"98vw\";\r\n    this.modalElement.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n\r\n    // --- Tree parsing ---\r\n    const root = MoodMenu.parseMoodsToTree(this.moods);\r\n    let currentSection = root;\r\n    const sectionStack: typeof root[] = [];\r\n\r\n    // --- UI elements ---\r\n    const sectionGrid = document.createElement(\"div\");\r\n    sectionGrid.style.display = \"grid\";\r\n    sectionGrid.style.gridTemplateColumns = \"repeat(auto-fit, minmax(220px, 1fr))\";\r\n    sectionGrid.style.gap = \"18px\";\r\n    sectionGrid.style.width = \"100%\";\r\n    sectionGrid.style.marginBottom = \"18px\";\r\n\r\n    const sectionDetail = document.createElement(\"div\");\r\n    sectionDetail.style.display = \"none\";\r\n    sectionDetail.style.flexDirection = \"column\";\r\n    sectionDetail.style.alignItems = \"stretch\";\r\n    sectionDetail.style.width = \"100%\";\r\n    sectionDetail.style.marginBottom = \"18px\";\r\n\r\n    const backButton = document.createElement(\"button\");\r\n    backButton.innerText = \"\\u2190 Back\";\r\n    backButton.className = \"mod-cta\";\r\n    backButton.style.marginBottom = \"12px\";\r\n    backButton.style.alignSelf = \"flex-start\";\r\n    backButton.style.padding = \"var(--size-4-2) var(--size-4-4)\";\r\n    backButton.style.borderRadius = \"var(--radius-s)\";\r\n    backButton.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n    backButton.style.background = \"var(--background-modifier-hover)\";\r\n    backButton.style.color = \"var(--text-normal)\";\r\n    backButton.style.fontWeight = \"bold\";\r\n    backButton.style.cursor = \"pointer\";\r\n    backButton.onclick = () => {\r\n      if (sectionStack.length > 0) {\r\n        currentSection = sectionStack.pop()!;\r\n        renderSection(currentSection);\r\n      }\r\n    };\r\n    sectionDetail.appendChild(backButton);\r\n\r\n    // --- Render function for a section node ---\r\n    const renderSection = (section: ReturnType<typeof MoodMenu.parseMoodsToTree>) => {\r\n      // Show/hide correct containers\r\n      if (section === root) {\r\n        sectionGrid.style.display = \"grid\";\r\n        sectionDetail.style.display = \"none\";\r\n        backButton.style.display = \"none\";\r\n        sectionGrid.innerHTML = \"\";\r\n\r\n        // --- Sort sections and moods alphabetically ---\r\n        const sortedSections = [...section.sections].sort((a, b) => a.name.localeCompare(b.name));\r\n        const sortedMoods = [...section.moods].sort((a, b) => a.localeCompare(b));\r\n\r\n        // --- Render sections first ---\r\n        sortedSections.forEach((child) => {\r\n          const sectionCell = document.createElement(\"div\");\r\n          sectionCell.style.display = \"flex\";\r\n          sectionCell.style.flexDirection = \"column\";\r\n          sectionCell.style.alignItems = \"center\";\r\n          sectionCell.style.background = \"var(--background-modifier-hover)\";\r\n          sectionCell.style.borderRadius = \"var(--radius-m)\";\r\n          sectionCell.style.padding = \"18px 6px 18px 6px\";\r\n          sectionCell.style.boxSizing = \"border-box\";\r\n          sectionCell.style.minWidth = \"0\";\r\n          sectionCell.style.cursor = \"pointer\";\r\n          sectionCell.style.transition = \"background 0.2s\";\r\n          sectionCell.onmouseenter = () => sectionCell.style.background = \"var(--background-modifier-active-hover)\";\r\n          sectionCell.onmouseleave = () => sectionCell.style.background = \"var(--background-modifier-hover)\";\r\n          const sectionLabel = document.createElement(\"div\");\r\n          sectionLabel.innerText = child.name;\r\n          sectionLabel.style.fontWeight = \"bold\";\r\n          sectionLabel.style.fontSize = \"1.2rem\";\r\n          sectionLabel.style.color = \"var(--text-accent)\";\r\n          sectionCell.appendChild(sectionLabel);\r\n          sectionCell.onclick = () => {\r\n            sectionStack.push(section);\r\n            currentSection = child;\r\n            renderSection(child);\r\n          };\r\n          sectionGrid.appendChild(sectionCell);\r\n        });\r\n\r\n        // --- Add a separator if there are both sections and moods ---\r\n        if (sortedSections.length > 0 && sortedMoods.length > 0) {\r\n          const divider = document.createElement(\"div\");\r\n          divider.style.gridColumn = \"1 / -1\";\r\n          divider.style.height = \"1px\";\r\n          divider.style.background = \"var(--background-modifier-border)\";\r\n          divider.style.margin = \"12px 0\";\r\n          sectionGrid.appendChild(divider);\r\n        }\r\n\r\n        // --- Render moods below sections ---\r\n        sortedMoods.forEach((mood) => {\r\n          const moodButton = document.createElement(\"button\");\r\n          moodButton.innerText = mood;\r\n          moodButton.className = \"mod-cta\";\r\n          moodButton.style.padding = \"var(--size-4-2) var(--size-4-4)\";\r\n          moodButton.style.borderRadius = \"var(--radius-s)\";\r\n          moodButton.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n          moodButton.style.background = \"var(--background-modifier-hover)\";\r\n          moodButton.style.color = \"var(--text-normal)\";\r\n          moodButton.style.fontSize = \"1rem\";\r\n          moodButton.style.cursor = \"pointer\";\r\n          moodButton.style.whiteSpace = \"normal\";\r\n          moodButton.style.overflow = \"hidden\";\r\n          moodButton.style.wordBreak = \"normal\";\r\n          moodButton.style.textOverflow = \"ellipsis\";\r\n          moodButton.style.height = \"auto\";\r\n          moodButton.style.minHeight = \"48px\";\r\n          moodButton.style.display = \"block\";\r\n          moodButton.style.width = \"100%\";\r\n          moodButton.onmouseenter = () => moodButton.style.background = \"var(--background-modifier-active-hover)\";\r\n          moodButton.onmouseleave = () => moodButton.style.background = \"var(--background-modifier-hover)\";\r\n          moodButton.onclick = () => {\r\n            this.selectMood(mood);\r\n            Array.from(sectionGrid.querySelectorAll(\"button\")).forEach((btn) => btn.classList.remove(\"selected-mood\"));\r\n            moodButton.classList.add(\"selected-mood\");\r\n            this.confirmSelection();\r\n          };\r\n          sectionGrid.appendChild(moodButton);\r\n        });\r\n      } else {\r\n        sectionGrid.style.display = \"none\";\r\n        sectionDetail.style.display = \"flex\";\r\n        backButton.style.display = \"block\";\r\n        // Remove all except backButton\r\n        while (sectionDetail.childNodes.length > 1)\r\n          sectionDetail.removeChild(sectionDetail.lastChild!);\r\n\r\n        // --- Sort sections and moods alphabetically ---\r\n        const sortedSections = [...section.sections].sort((a, b) => a.name.localeCompare(b.name));\r\n        const sortedMoods = [...section.moods].sort((a, b) => a.localeCompare(b));\r\n\r\n        // Child sections grid\r\n        if (sortedSections.length > 0) {\r\n          const childGrid = document.createElement(\"div\");\r\n          childGrid.style.display = \"grid\";\r\n          childGrid.style.gridTemplateColumns = \"repeat(auto-fit, minmax(180px, 1fr))\";\r\n          childGrid.style.gap = \"12px\";\r\n          childGrid.style.width = \"100%\";\r\n          sortedSections.forEach((child) => {\r\n            const sectionCell = document.createElement(\"div\");\r\n            sectionCell.style.display = \"flex\";\r\n            sectionCell.style.flexDirection = \"column\";\r\n            sectionCell.style.alignItems = \"center\";\r\n            sectionCell.style.background = \"var(--background-modifier-hover)\";\r\n            sectionCell.style.borderRadius = \"var(--radius-m)\";\r\n            sectionCell.style.padding = \"14px 4px 14px 4px\";\r\n            sectionCell.style.boxSizing = \"border-box\";\r\n            sectionCell.style.minWidth = \"0\";\r\n            sectionCell.style.cursor = \"pointer\";\r\n            sectionCell.style.transition = \"background 0.2s\";\r\n            sectionCell.onmouseenter = () => sectionCell.style.background = \"var(--background-modifier-active-hover)\";\r\n            sectionCell.onmouseleave = () => sectionCell.style.background = \"var(--background-modifier-hover)\";\r\n            const sectionLabel = document.createElement(\"div\");\r\n            sectionLabel.innerText = child.name;\r\n            sectionLabel.style.fontWeight = \"bold\";\r\n            sectionLabel.style.fontSize = \"1.1rem\";\r\n            sectionLabel.style.color = \"var(--text-accent)\";\r\n            sectionCell.appendChild(sectionLabel);\r\n            sectionCell.onclick = () => {\r\n              sectionStack.push(section);\r\n              currentSection = child;\r\n              renderSection(child);\r\n            };\r\n            childGrid.appendChild(sectionCell);\r\n          });\r\n          sectionDetail.appendChild(childGrid);\r\n        }\r\n\r\n        // --- Add a separator if there are both sections and moods ---\r\n        if (sortedSections.length > 0 && sortedMoods.length > 0) {\r\n          const divider = document.createElement(\"div\");\r\n          divider.style.width = \"100%\";\r\n          divider.style.height = \"1px\";\r\n          divider.style.background = \"var(--background-modifier-border)\";\r\n          divider.style.margin = \"12px 0\";\r\n          sectionDetail.appendChild(divider);\r\n        }\r\n\r\n        // Moods grid\r\n        if (sortedMoods.length > 0) {\r\n          const moodsGrid = document.createElement(\"div\");\r\n          moodsGrid.style.display = \"grid\";\r\n          moodsGrid.style.gridTemplateColumns = \"repeat(auto-fit, minmax(100px, 1fr))\";\r\n          moodsGrid.style.gap = \"12px\";\r\n          moodsGrid.style.width = \"100%\";\r\n          sortedMoods.forEach((mood) => {\r\n            const moodButton = document.createElement(\"button\");\r\n            moodButton.innerText = mood;\r\n            moodButton.className = \"mod-cta\";\r\n            moodButton.style.padding = \"var(--size-4-2) var(--size-4-4)\";\r\n            moodButton.style.borderRadius = \"var(--radius-s)\";\r\n            moodButton.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n            moodButton.style.background = \"var(--background-modifier-hover)\";\r\n            moodButton.style.color = \"var(--text-normal)\";\r\n            moodButton.style.fontSize = \"1rem\";\r\n            moodButton.style.cursor = \"pointer\";\r\n            moodButton.style.whiteSpace = \"normal\";\r\n            moodButton.style.overflow = \"hidden\";\r\n            moodButton.style.wordBreak = \"normal\";\r\n            moodButton.style.textOverflow = \"ellipsis\";\r\n            moodButton.style.height = \"auto\";\r\n            moodButton.style.minHeight = \"48px\";\r\n            moodButton.style.display = \"block\";\r\n            moodButton.style.width = \"100%\";\r\n            moodButton.onmouseenter = () => moodButton.style.background = \"var(--background-modifier-active-hover)\";\r\n            moodButton.onmouseleave = () => moodButton.style.background = \"var(--background-modifier-hover)\";\r\n            moodButton.onclick = () => {\r\n              this.selectMood(mood);\r\n              Array.from(moodsGrid.querySelectorAll(\"button\")).forEach((btn) => btn.classList.remove(\"selected-mood\"));\r\n              moodButton.classList.add(\"selected-mood\");\r\n              this.confirmSelection();\r\n            };\r\n            moodsGrid.appendChild(moodButton);\r\n          });\r\n          sectionDetail.appendChild(moodsGrid);\r\n        }\r\n      }\r\n    };\r\n\r\n    // Initial render\r\n    renderSection(root);\r\n\r\n    this.modalElement.appendChild(sectionGrid);\r\n    this.modalElement.appendChild(sectionDetail);\r\n\r\n    const buttonRow = document.createElement(\"div\");\r\n    buttonRow.style.display = \"flex\";\r\n    buttonRow.style.gap = \"12px\";\r\n    buttonRow.style.marginTop = \"10px\";\r\n    const okayButton = document.createElement(\"button\");\r\n    okayButton.innerText = \"Okay\";\r\n    okayButton.className = \"mod-cta\";\r\n    okayButton.style.padding = \"var(--size-4-2) var(--size-4-4)\";\r\n    okayButton.style.borderRadius = \"var(--radius-s)\";\r\n    okayButton.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n    okayButton.style.background = \"var(--interactive-accent)\";\r\n    okayButton.style.color = \"var(--text-on-accent)\";\r\n    okayButton.style.fontWeight = \"bold\";\r\n    okayButton.style.cursor = \"pointer\";\r\n    okayButton.onclick = () => this.confirmSelection();\r\n    buttonRow.appendChild(okayButton);\r\n    const cancelButton = document.createElement(\"button\");\r\n    cancelButton.innerText = \"Cancel\";\r\n    cancelButton.className = \"mod-cta\";\r\n    cancelButton.style.padding = \"var(--size-4-2) var(--size-4-4)\";\r\n    cancelButton.style.borderRadius = \"var(--radius-s)\";\r\n    cancelButton.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n    cancelButton.style.background = \"var(--background-modifier-hover)\";\r\n    cancelButton.style.color = \"var(--color-red)\";\r\n    cancelButton.style.fontWeight = \"bold\";\r\n    cancelButton.style.cursor = \"pointer\";\r\n    cancelButton.onclick = () => this.cancelSelection();\r\n    buttonRow.appendChild(cancelButton);\r\n    this.modalElement.appendChild(buttonRow);\r\n\r\n    const style = document.createElement(\"style\");\r\n    style.innerText = `.selected-mood { background: var(--interactive-accent) !important; color: var(--text-on-accent) !important; border: var(--input-border-width) solid var(--background-primary) !important; }`;\r\n    this.modalElement.appendChild(style);\r\n\r\n    // Escape key and navigation\r\n    const escListener = (e: KeyboardEvent) => {\r\n      if (e.key === \"Escape\") {\r\n        if (sectionDetail.style.display === \"flex\" && sectionStack.length > 0) {\r\n          currentSection = sectionStack.pop()!;\r\n          renderSection(currentSection);\r\n        } else {\r\n          this.closeModal(false);\r\n          window.removeEventListener(\"keydown\", escListener);\r\n        }\r\n      }\r\n    };\r\n    window.addEventListener(\"keydown\", escListener);\r\n\r\n    openModal(this.modalElement);\r\n  }\r\n\r\n  open(): Promise<string | null> {\r\n    this.displayMenu();\r\n    return new Promise((resolve) => {\r\n      this.resolveFn = resolve;\r\n    });\r\n  }\r\n\r\n  selectMood(mood: string) {\r\n    this.selectedMood = mood;\r\n  }\r\n\r\n  confirmSelection() {\r\n    if (this.resolveFn)\r\n      this.resolveFn(this.selectedMood);\r\n    this.closeModal(true);\r\n  }\r\n\r\n  cancelSelection() {\r\n    if (this.resolveFn)\r\n      this.resolveFn(null);\r\n    this.closeModal(false);\r\n  }\r\n\r\n  closeModal(confirmed = false) {\r\n    closeModal(this.modalElement);\r\n  }\r\n\r\n  /**\r\n   * Render the mood menu inline into a container. Calls onSelect when a mood is chosen.\r\n   * This version does NOT wrap in an extra flexbox, so the grid layout is preserved.\r\n   */\r\n  renderInline(container: HTMLElement, onSelect: (mood: string) => void) {\r\n    container.innerHTML = \"\";\r\n    // --- Tree parsing ---\r\n    const root = MoodMenu.parseMoodsToTree(this.moods);\r\n    let currentSection = root;\r\n    const sectionStack: typeof root[] = [];\r\n    // --- UI elements ---\r\n    const sectionGrid = document.createElement(\"div\");\r\n    sectionGrid.style.display = \"grid\";\r\n    sectionGrid.style.gridTemplateColumns = \"repeat(auto-fit, minmax(220px, 1fr))\";\r\n    sectionGrid.style.gap = \"18px\";\r\n    sectionGrid.style.width = \"100%\";\r\n    sectionGrid.style.marginBottom = \"18px\";\r\n    const sectionDetail = document.createElement(\"div\");\r\n    sectionDetail.style.display = \"none\";\r\n    sectionDetail.style.flexDirection = \"column\";\r\n    sectionDetail.style.alignItems = \"stretch\";\r\n    sectionDetail.style.width = \"100%\";\r\n    sectionDetail.style.marginBottom = \"18px\";\r\n    const backButton = document.createElement(\"button\");\r\n    backButton.innerText = \"\\u2190 Back\";\r\n    backButton.className = \"mod-cta\";\r\n    backButton.style.marginBottom = \"12px\";\r\n    backButton.style.alignSelf = \"flex-start\";\r\n    backButton.style.padding = \"var(--size-4-2) var(--size-4-4)\";\r\n    backButton.style.borderRadius = \"var(--radius-s)\";\r\n    backButton.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n    backButton.style.background = \"var(--background-modifier-hover)\";\r\n    backButton.style.color = \"var(--text-normal)\";\r\n    backButton.style.fontWeight = \"bold\";\r\n    backButton.style.cursor = \"pointer\";\r\n    backButton.onclick = () => {\r\n      if (sectionStack.length > 0) {\r\n        currentSection = sectionStack.pop()!;\r\n        renderSection(currentSection);\r\n      }\r\n    };\r\n    sectionDetail.appendChild(backButton);\r\n    // --- Render function for a section node ---\r\n    const renderSection = (section: ReturnType<typeof MoodMenu.parseMoodsToTree>) => {\r\n      if (section === root) {\r\n        sectionGrid.style.display = \"grid\";\r\n        sectionDetail.style.display = \"none\";\r\n        backButton.style.display = \"none\";\r\n        sectionGrid.innerHTML = \"\";\r\n        const sortedSections = [...section.sections].sort((a, b) => a.name.localeCompare(b.name));\r\n        const sortedMoods = [...section.moods].sort((a, b) => a.localeCompare(b));\r\n        sortedSections.forEach((child) => {\r\n          const sectionCell = document.createElement(\"div\");\r\n          sectionCell.style.display = \"flex\";\r\n          sectionCell.style.flexDirection = \"column\";\r\n          sectionCell.style.alignItems = \"center\";\r\n          sectionCell.style.background = \"var(--background-modifier-hover)\";\r\n          sectionCell.style.borderRadius = \"var(--radius-m)\";\r\n          sectionCell.style.padding = \"18px 6px 18px 6px\";\r\n          sectionCell.style.boxSizing = \"border-box\";\r\n          sectionCell.style.minWidth = \"0\";\r\n          sectionCell.style.cursor = \"pointer\";\r\n          sectionCell.style.transition = \"background 0.2s\";\r\n          sectionCell.onmouseenter = () => sectionCell.style.background = \"var(--background-modifier-active-hover)\";\r\n          sectionCell.onmouseleave = () => sectionCell.style.background = \"var(--background-modifier-hover)\";\r\n          const sectionLabel = document.createElement(\"div\");\r\n          sectionLabel.innerText = child.name;\r\n          sectionLabel.style.fontWeight = \"bold\";\r\n          sectionLabel.style.fontSize = \"1.2rem\";\r\n          sectionLabel.style.color = \"var(--text-accent)\";\r\n          sectionCell.appendChild(sectionLabel);\r\n          sectionCell.onclick = () => {\r\n            sectionStack.push(section);\r\n            currentSection = child;\r\n            renderSection(child);\r\n          };\r\n          sectionGrid.appendChild(sectionCell);\r\n        });\r\n        if (sortedSections.length > 0 && sortedMoods.length > 0) {\r\n          const divider = document.createElement(\"div\");\r\n          divider.style.gridColumn = \"1 / -1\";\r\n          divider.style.height = \"1px\";\r\n          divider.style.background = \"var(--background-modifier-border)\";\r\n          divider.style.margin = \"12px 0\";\r\n          sectionGrid.appendChild(divider);\r\n        }\r\n        sortedMoods.forEach((mood) => {\r\n          const moodButton = document.createElement(\"button\");\r\n          moodButton.innerText = mood;\r\n          moodButton.className = \"mod-cta\";\r\n          moodButton.style.padding = \"var(--size-4-2) var(--size-4-4)\";\r\n          moodButton.style.borderRadius = \"var(--radius-s)\";\r\n          moodButton.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n          moodButton.style.background = \"var(--background-modifier-hover)\";\r\n          moodButton.style.color = \"var(--text-normal)\";\r\n          moodButton.style.fontSize = \"1rem\";\r\n          moodButton.style.cursor = \"pointer\";\r\n          moodButton.style.whiteSpace = \"normal\";\r\n          moodButton.style.overflow = \"hidden\";\r\n          moodButton.style.wordBreak = \"normal\";\r\n          moodButton.style.textOverflow = \"ellipsis\";\r\n          moodButton.style.height = \"auto\";\r\n          moodButton.style.minHeight = \"48px\";\r\n          moodButton.style.display = \"block\";\r\n          moodButton.style.width = \"100%\";\r\n          moodButton.onmouseenter = () => moodButton.style.background = \"var(--background-modifier-active-hover)\";\r\n          moodButton.onmouseleave = () => moodButton.style.background = \"var(--background-modifier-hover)\";\r\n          moodButton.onclick = () => {\r\n            this.selectedMood = mood;\r\n            Array.from(sectionGrid.querySelectorAll(\"button\")).forEach((btn) => btn.classList.remove(\"selected-mood\"));\r\n            moodButton.classList.add(\"selected-mood\");\r\n            onSelect(mood);\r\n          };\r\n          sectionGrid.appendChild(moodButton);\r\n        });\r\n      } else {\r\n        sectionGrid.style.display = \"none\";\r\n        sectionDetail.style.display = \"flex\";\r\n        backButton.style.display = \"block\";\r\n        while (sectionDetail.childNodes.length > 1)\r\n          sectionDetail.removeChild(sectionDetail.lastChild!);\r\n        const sortedSections = [...section.sections].sort((a, b) => a.name.localeCompare(b.name));\r\n        const sortedMoods = [...section.moods].sort((a, b) => a.localeCompare(b));\r\n        if (sortedSections.length > 0) {\r\n          const childGrid = document.createElement(\"div\");\r\n          childGrid.style.display = \"grid\";\r\n          childGrid.style.gridTemplateColumns = \"repeat(auto-fit, minmax(180px, 1fr))\";\r\n          childGrid.style.gap = \"12px\";\r\n          childGrid.style.width = \"100%\";\r\n          sortedSections.forEach((child) => {\r\n            const sectionCell = document.createElement(\"div\");\r\n            sectionCell.style.display = \"flex\";\r\n            sectionCell.style.flexDirection = \"column\";\r\n            sectionCell.style.alignItems = \"center\";\r\n            sectionCell.style.background = \"var(--background-modifier-hover)\";\r\n            sectionCell.style.borderRadius = \"var(--radius-m)\";\r\n            sectionCell.style.padding = \"14px 4px 14px 4px\";\r\n            sectionCell.style.boxSizing = \"border-box\";\r\n            sectionCell.style.minWidth = \"0\";\r\n            sectionCell.style.cursor = \"pointer\";\r\n            sectionCell.style.transition = \"background 0.2s\";\r\n            sectionCell.onmouseenter = () => sectionCell.style.background = \"var(--background-modifier-active-hover)\";\r\n            sectionCell.onmouseleave = () => sectionCell.style.background = \"var(--background-modifier-hover)\";\r\n            const sectionLabel = document.createElement(\"div\");\r\n            sectionLabel.innerText = child.name;\r\n            sectionLabel.style.fontWeight = \"bold\";\r\n            sectionLabel.style.fontSize = \"1.1rem\";\r\n            sectionLabel.style.color = \"var(--text-accent)\";\r\n            sectionCell.appendChild(sectionLabel);\r\n            sectionCell.onclick = () => {\r\n              sectionStack.push(section);\r\n              currentSection = child;\r\n              renderSection(child);\r\n            };\r\n            childGrid.appendChild(sectionCell);\r\n          });\r\n          sectionDetail.appendChild(childGrid);\r\n        }\r\n        if (sortedSections.length > 0 && sortedMoods.length > 0) {\r\n          const divider = document.createElement(\"div\");\r\n          divider.style.width = \"100%\";\r\n          divider.style.height = \"1px\";\r\n          divider.style.background = \"var(--background-modifier-border)\";\r\n          divider.style.margin = \"12px 0\";\r\n          sectionDetail.appendChild(divider);\r\n        }\r\n        if (sortedMoods.length > 0) {\r\n          const moodsGrid = document.createElement(\"div\");\r\n          moodsGrid.style.display = \"grid\";\r\n          moodsGrid.style.gridTemplateColumns = \"repeat(auto-fit, minmax(100px, 1fr))\";\r\n          moodsGrid.style.gap = \"12px\";\r\n          moodsGrid.style.width = \"100%\";\r\n          sortedMoods.forEach((mood) => {\r\n            const moodButton = document.createElement(\"button\");\r\n            moodButton.innerText = mood;\r\n            moodButton.className = \"mod-cta\";\r\n            moodButton.style.padding = \"var(--size-4-2) var(--size-4-4)\";\r\n            moodButton.style.borderRadius = \"var(--radius-s)\";\r\n            moodButton.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n            moodButton.style.background = \"var(--background-modifier-hover)\";\r\n            moodButton.style.color = \"var(--text-normal)\";\r\n            moodButton.style.fontSize = \"1rem\";\r\n            moodButton.style.cursor = \"pointer\";\r\n            moodButton.style.whiteSpace = \"normal\";\r\n            moodButton.style.overflow = \"hidden\";\r\n            moodButton.style.wordBreak = \"normal\";\r\n            moodButton.style.textOverflow = \"ellipsis\";\r\n            moodButton.style.height = \"auto\";\r\n            moodButton.style.minHeight = \"48px\";\r\n            moodButton.style.display = \"block\";\r\n            moodButton.style.width = \"100%\";\r\n            moodButton.onmouseenter = () => moodButton.style.background = \"var(--background-modifier-active-hover)\";\r\n            moodButton.onmouseleave = () => moodButton.style.background = \"var(--background-modifier-hover)\";\r\n            moodButton.onclick = () => {\r\n              this.selectedMood = mood;\r\n              Array.from(moodsGrid.querySelectorAll(\"button\")).forEach((btn) => btn.classList.remove(\"selected-mood\"));\r\n              moodButton.classList.add(\"selected-mood\");\r\n              onSelect(mood);\r\n            };\r\n            moodsGrid.appendChild(moodButton);\r\n          });\r\n          sectionDetail.appendChild(moodsGrid);\r\n        }\r\n      }\r\n    };\r\n    renderSection(root);\r\n    container.appendChild(sectionGrid);\r\n    container.appendChild(sectionDetail);\r\n    // Add style for selected mood\r\n    const style = document.createElement(\"style\");\r\n    style.innerText = `.selected-mood { background: var(--interactive-accent) !important; color: var(--text-on-accent) !important; border: var(--input-border-width) solid var(--background-primary) !important; }`;\r\n    container.appendChild(style);\r\n  }\r\n}\r\n", "import { formatBarIcons, openModal, closeModal } from \"../utils\";\r\n\r\nexport class EnergySlider {\r\n  plugin: any;\r\n  resolveFn: ((value: number | null) => void) | null = null;\r\n  selectedValue: number = 50;\r\n  modalElement!: HTMLDivElement;\r\n  sliderElement!: HTMLInputElement;\r\n\r\n  constructor(plugin: any) {\r\n    this.plugin = plugin;\r\n    this.createModal();\r\n  }\r\n\r\n  createModal() {\r\n    this.modalElement = document.createElement(\"div\");\r\n    this.modalElement.className = \"energy-slider-modal\";\r\n    this.modalElement.style.position = \"fixed\";\r\n    this.modalElement.style.top = \"50%\";\r\n    this.modalElement.style.left = \"50%\";\r\n    this.modalElement.style.transform = \"translate(-50%, -50%)\";\r\n    this.modalElement.style.background = \"var(--background-secondary)\";\r\n    this.modalElement.style.padding = \"24px\";\r\n    this.modalElement.style.borderRadius = \"var(--radius-m)\";\r\n    this.modalElement.style.zIndex = \"9999\";\r\n    this.modalElement.style.display = \"flex\";\r\n    this.modalElement.style.flexDirection = \"column\";\r\n    this.modalElement.style.alignItems = \"center\";\r\n    this.modalElement.style.boxShadow = \"0 4px 32px var(--background-modifier-box-shadow)\";\r\n    this.modalElement.style.maxHeight = \"80vh\";\r\n    this.modalElement.style.overflow = \"auto\";\r\n    this.modalElement.style.minWidth = \"340px\";\r\n    this.modalElement.style.width = \"min(420px, 98vw)\";\r\n    this.modalElement.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n    this.modalElement.innerHTML = `\r\n      <div class=\"slider-container\" style=\"display:flex;flex-direction:column;align-items:center;\">\r\n        <input type=\"range\" min=\"0\" max=\"100\" value=\"50\" class=\"slider\" id=\"energySlider\" style=\"width:200px;\">\r\n        <div class=\"slider-value\" id=\"sliderValue\" style=\"margin-top:8px;color:var(--text-normal);\">50</div>\r\n        <div class=\"energy-preview\" id=\"energyPreview\" style=\"margin-top:8px;color:var(--text-normal);font-family:monospace;font-size:1.2em;\"></div>\r\n      </div>\r\n      <div style=\"display:flex;gap:12px;margin-top:18px;justify-content:center;width:100%;\">\r\n        <button id=\"okayButton\" class=\"mod-cta\" style=\"padding:var(--size-4-2) var(--size-4-4);border-radius:var(--radius-s);border:var(--input-border-width) solid var(--background-modifier-border);background:var(--interactive-accent);color:var(--text-on-accent);font-weight:bold;cursor:pointer;\">Okay</button>\r\n        <button id=\"cancelButton\" class=\"mod-cta\" style=\"padding:var(--size-4-2) var(--size-4-4);border-radius:var(--radius-s);border:var(--input-border-width) solid var(--background-modifier-border);background:var(--background-modifier-hover);color:var(--color-red);font-weight:bold;cursor:pointer;\">Cancel</button>\r\n      </div>\r\n    `;\r\n    this.sliderElement = this.modalElement.querySelector(\"#energySlider\")!;\r\n    const sliderValueDisplay = this.modalElement.querySelector(\"#sliderValue\")!;\r\n    const preview = this.modalElement.querySelector(\"#energyPreview\") as HTMLElement;\r\n    const okayButton = this.modalElement.querySelector(\"#okayButton\")!;\r\n    const cancelButton = this.modalElement.querySelector(\"#cancelButton\")!;\r\n    const updatePreview = () => {\r\n      const settings = this.plugin?.settings || {\r\n        energyDisplay: \"bar\",\r\n        energyFormat: \"Energy: {value}\",\r\n        barIcons: \"\u28FF\u28F7\u28F6\u28E6\u28E4\u28C4\u28C0\",\r\n        barIconCount: 7,\r\n        energyOnlyFormat: \"Energy: {value}\",\r\n        moodOnlyFormat: \"{value}\",\r\n        moodAndEnergyFormat: \"{mood} | {energy}\"\r\n      };\r\n      const value = parseInt(this.sliderElement.value);\r\n      let output = \"\";\r\n      if (settings.energyDisplay === \"percent\") {\r\n        output = settings.energyOnlyFormat.replace(\"{value}\", `${value}%`);\r\n      } else if (settings.energyDisplay === \"bar\") {\r\n        output = settings.energyOnlyFormat.replace(\"{value}\", formatBarIcons(settings.barIcons, value, settings.barIconCount));\r\n      } else {\r\n        output = settings.energyOnlyFormat.replace(\"{value}\", `${value}`);\r\n      }\r\n      preview.innerText = output;\r\n    };\r\n    this.sliderElement.addEventListener(\"input\", () => {\r\n      this.selectedValue = parseInt(this.sliderElement.value);\r\n      sliderValueDisplay.textContent = this.selectedValue.toString();\r\n      updatePreview();\r\n    });\r\n    updatePreview();\r\n    okayButton.addEventListener(\"click\", () => {\r\n      this.closeModal();\r\n      if (this.resolveFn)\r\n        this.resolveFn(this.selectedValue);\r\n    });\r\n    cancelButton.addEventListener(\"click\", () => {\r\n      this.closeModal();\r\n      if (this.resolveFn)\r\n        this.resolveFn(null);\r\n    });\r\n    const escListener = (e: KeyboardEvent) => {\r\n      if (e.key === \"Escape\") {\r\n        this.closeModal();\r\n        window.removeEventListener(\"keydown\", escListener);\r\n      }\r\n    };\r\n    window.addEventListener(\"keydown\", escListener);\r\n  }\r\n\r\n  open(): Promise<number | null> {\r\n    openModal(this.modalElement);\r\n    return new Promise((resolve) => {\r\n      this.resolveFn = resolve;\r\n    });\r\n  }\r\n\r\n  closeModal() {\r\n    closeModal(this.modalElement);\r\n  }\r\n\r\n  /**\r\n   * Render the energy slider inline into a container. Calls onChange when the value changes.\r\n   */\r\n  renderInline(container: HTMLElement, onChange: (value: number) => void) {\r\n    container.innerHTML = \"\";\r\n    // Create a styled wrapper to match modal appearance\r\n    const wrapper = document.createElement(\"div\");\r\n    wrapper.className = \"energy-slider-inline\";\r\n    wrapper.style.background = \"var(--background-secondary)\";\r\n    wrapper.style.padding = \"24px\";\r\n    wrapper.style.borderRadius = \"var(--radius-m)\";\r\n    wrapper.style.boxShadow = \"0 4px 32px var(--background-modifier-box-shadow)\";\r\n    wrapper.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n    wrapper.style.display = \"flex\";\r\n    wrapper.style.flexDirection = \"column\";\r\n    wrapper.style.alignItems = \"center\";\r\n    wrapper.style.width = \"100%\";\r\n    const sliderLabel = document.createElement(\"div\");\r\n    sliderLabel.innerText = \"Energy Level:\";\r\n    sliderLabel.style.color = \"var(--text-normal, #fff)\";\r\n    sliderLabel.style.marginBottom = \"8px\";\r\n    const slider = document.createElement(\"input\");\r\n    slider.type = \"range\";\r\n    slider.min = \"0\";\r\n    slider.max = \"100\";\r\n    slider.value = this.selectedValue.toString();\r\n    slider.className = \"slider\";\r\n    slider.style.width = \"220px\";\r\n    slider.style.margin = \"0 0 0 0\";\r\n    const sliderValue = document.createElement(\"div\");\r\n    sliderValue.innerText = this.selectedValue.toString();\r\n    sliderValue.style.color = \"var(--text-normal, #fff)\";\r\n    sliderValue.style.marginTop = \"8px\";\r\n    const preview = document.createElement(\"div\");\r\n    preview.style.marginTop = \"8px\";\r\n    preview.style.color = \"var(--text-normal, #fff)\";\r\n    preview.style.fontFamily = \"monospace\";\r\n    preview.style.fontSize = \"1.2em\";\r\n    const updatePreview = () => {\r\n      const settings = this.plugin?.settings || {\r\n        energyDisplay: \"bar\",\r\n        energyFormat: \"Energy: {value}\",\r\n        barIcons: \"\u28FF\u28F7\u28F6\u28E6\u28E4\u28C4\u28C0\",\r\n        barIconCount: 7,\r\n        energyOnlyFormat: \"Energy: {value}\",\r\n        moodOnlyFormat: \"{value}\",\r\n        moodAndEnergyFormat: \"{mood} | {energy}\"\r\n      };\r\n      const value = parseInt(slider.value);\r\n      let output = \"\";\r\n      if (settings.energyDisplay === \"percent\") {\r\n        output = settings.energyOnlyFormat.replace(\"{value}\", `${value}%`);\r\n      } else if (settings.energyDisplay === \"bar\") {\r\n        output = settings.energyOnlyFormat.replace(\"{value}\", formatBarIcons(settings.barIcons, value, settings.barIconCount));\r\n      } else {\r\n        output = settings.energyOnlyFormat.replace(\"{value}\", `${value}`);\r\n      }\r\n      preview.innerText = output;\r\n    };\r\n    slider.oninput = () => {\r\n      this.selectedValue = parseInt(slider.value);\r\n      sliderValue.innerText = slider.value;\r\n      updatePreview();\r\n      onChange(this.selectedValue);\r\n    };\r\n    updatePreview();\r\n    // Style the slider to match the modal\r\n    slider.style.appearance = \"none\";\r\n    slider.style.height = \"6px\";\r\n    slider.style.background = \"var(--background-modifier-border)\";\r\n    slider.style.borderRadius = \"4px\";\r\n    slider.style.outline = \"none\";\r\n    slider.style.marginBottom = \"0\";\r\n    slider.style.marginTop = \"0\";\r\n    slider.style.marginLeft = \"0\";\r\n    slider.style.marginRight = \"0\";\r\n    slider.style.boxShadow = \"0 1px 2px rgba(0,0,0,0.04)\";\r\n    // Add thumb styling for webkit browsers\r\n    slider.style.setProperty(\"::-webkit-slider-thumb\", \"background: var(--interactive-accent); border-radius: 50%; width: 18px; height: 18px; cursor: pointer; border: 2px solid var(--background-primary);\");\r\n    wrapper.appendChild(sliderLabel);\r\n    wrapper.appendChild(slider);\r\n    wrapper.appendChild(sliderValue);\r\n    wrapper.appendChild(preview);\r\n    container.appendChild(wrapper);\r\n  }\r\n}\r\n", "// src/modals/MoodEnergyModal.ts\r\n// Combined Mood & Energy modal logic, using MoodMenu and EnergySlider modular components\r\n\r\nimport { loadMoodsFromFile, formatBarIcons, openModal, closeModal } from \"../utils\";\r\nimport { MoodMenu } from \"./MoodMenu\";\r\nimport { EnergySlider } from \"./EnergySlider\";\r\nimport { MarkdownView } from \"obsidian\";\r\n\r\n/**\r\n * Shows a combined modal for selecting both mood and energy, then inserts the formatted result into the editor.\r\n * @param plugin - The plugin instance.\r\n */\r\nexport async function showMoodAndEnergyModal(plugin: any) {\r\n  const moods = await loadMoodsFromFile(plugin.app.vault, plugin.settings.moodsFilePath);\r\n  const moodMenu = new MoodMenu(moods);\r\n  let selectedMood: string | null = null;\r\n  let selectedEnergy: number = 50;\r\n\r\n  // Create modal container\r\n  const modal = document.createElement(\"div\");\r\n  modal.className = \"mood-energy-modal\";\r\n  modal.style.position = \"fixed\";\r\n  modal.style.top = \"50%\";\r\n  modal.style.left = \"50%\";\r\n  modal.style.transform = \"translate(-50%, -50%)\";\r\n  modal.style.background = \"var(--background-secondary)\";\r\n  modal.style.padding = \"24px\";\r\n  modal.style.borderRadius = \"var(--radius-m)\";\r\n  modal.style.zIndex = \"9999\";\r\n  modal.style.display = \"flex\";\r\n  modal.style.flexDirection = window.innerWidth < 600 ? \"column\" : \"row\";\r\n  modal.style.alignItems = \"stretch\";\r\n  modal.style.boxShadow = \"0 4px 32px var(--background-modifier-box-shadow)\";\r\n  modal.style.maxHeight = window.innerWidth < 600 ? \"98vh\" : \"80vh\";\r\n  modal.style.overflow = \"visible\";\r\n  modal.style.width = window.innerWidth < 600 ? \"98vw\" : \"min(900px, 98vw)\";\r\n  modal.style.minWidth = window.innerWidth < 600 ? \"0\" : \"340px\";\r\n  modal.style.maxWidth = \"98vw\";\r\n  modal.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n\r\n  // Mood section\r\n  const moodSection = document.createElement(\"div\");\r\n  moodSection.style.flex = \"1 1 0\";\r\n  moodSection.style.overflowY = \"auto\";\r\n  moodSection.style.marginRight = window.innerWidth < 600 ? \"0\" : \"32px\";\r\n  moodSection.style.background = \"var(--background-modifier-hover, rgba(255,255,255,0.01))\";\r\n  moodSection.style.borderRadius = \"8px\";\r\n  moodSection.style.display = \"flex\";\r\n  moodSection.style.flexDirection = \"column\";\r\n  moodSection.style.minWidth = window.innerWidth < 600 ? \"0\" : \"260px\";\r\n  moodSection.style.width = window.innerWidth < 600 ? \"100%\" : \"\";\r\n\r\n  // Energy section\r\n  const energySection = document.createElement(\"div\");\r\n  energySection.style.display = \"flex\";\r\n  energySection.style.flexDirection = \"column\";\r\n  energySection.style.alignItems = \"center\";\r\n  energySection.style.justifyContent = \"flex-start\";\r\n  energySection.style.width = window.innerWidth < 600 ? \"100%\" : \"320px\";\r\n  energySection.style.minWidth = window.innerWidth < 600 ? \"0\" : \"220px\";\r\n  energySection.style.maxWidth = window.innerWidth < 600 ? \"100vw\" : \"340px\";\r\n  energySection.style.background = \"var(--background-modifier-hover)\";\r\n  energySection.style.borderRadius = \"var(--radius-m)\";\r\n  energySection.style.padding = window.innerWidth < 600 ? \"12px\" : \"18px 18px 18px 18px\";\r\n  energySection.style.boxSizing = \"border-box\";\r\n  energySection.style.height = \"100%\";\r\n\r\n  // Inline MoodMenu\r\n  moodMenu.renderInline(moodSection, (mood) => {\r\n    selectedMood = mood;\r\n  });\r\n\r\n  // Inline EnergySlider\r\n  const energySlider = new EnergySlider(plugin);\r\n  energySlider.renderInline(energySection, (value) => {\r\n    selectedEnergy = value;\r\n  });\r\n\r\n  // Action buttons\r\n  const buttonRow = document.createElement(\"div\");\r\n  buttonRow.style.display = \"flex\";\r\n  buttonRow.style.gap = \"12px\";\r\n  buttonRow.style.marginTop = \"18px\";\r\n  buttonRow.style.justifyContent = \"center\";\r\n  buttonRow.style.width = \"100%\";\r\n\r\n  const okayButton = document.createElement(\"button\");\r\n  okayButton.innerText = \"Okay\";\r\n  okayButton.className = \"mod-cta\";\r\n  okayButton.onclick = () => {\r\n    const activeEditor = plugin.app.workspace.getActiveViewOfType(MarkdownView)?.editor;\r\n    if (activeEditor && selectedMood && selectedEnergy !== null) {\r\n      const settings = plugin.settings;\r\n      let energyStr = \"\";\r\n      if (settings.energyDisplay === \"percent\") {\r\n        energyStr = settings.energyOnlyFormat.replace(\"{value}\", `${selectedEnergy}%`);\r\n      } else if (settings.energyDisplay === \"bar\") {\r\n        energyStr = settings.energyOnlyFormat.replace(\"{value}\", formatBarIcons(settings.barIcons, selectedEnergy, settings.barIconCount));\r\n      } else {\r\n        energyStr = settings.energyOnlyFormat.replace(\"{value}\", `${selectedEnergy}`);\r\n      }\r\n      const format = settings.moodAndEnergyFormat || \"{mood} | {energy}\";\r\n      const output = format.replace(\"{mood}\", selectedMood).replace(\"{energy}\", energyStr);\r\n      if (typeof activeEditor.focus === \"function\") activeEditor.focus();\r\n      activeEditor.replaceSelection(output);\r\n    }\r\n    closeModal(modal);\r\n  };\r\n  const cancelButton = document.createElement(\"button\");\r\n  cancelButton.innerText = \"Cancel\";\r\n  cancelButton.className = \"mod-cta\";\r\n  cancelButton.style.padding = \"var(--size-4-2) var(--size-4-4)\";\r\n  cancelButton.style.borderRadius = \"var(--radius-s)\";\r\n  cancelButton.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n  cancelButton.style.background = \"var(--background-modifier-hover)\";\r\n  cancelButton.style.color = \"var(--color-red)\";\r\n  cancelButton.style.fontWeight = \"bold\";\r\n  cancelButton.style.cursor = \"pointer\";\r\n  cancelButton.onclick = () => closeModal(modal);\r\n  buttonRow.appendChild(okayButton);\r\n  buttonRow.appendChild(cancelButton);\r\n  energySection.appendChild(buttonRow);\r\n\r\n  // Keyboard ESC support\r\n  const escListener = (e: KeyboardEvent) => {\r\n    if (e.key === \"Escape\") {\r\n      closeModal(modal);\r\n      window.removeEventListener(\"keydown\", escListener);\r\n    }\r\n  };\r\n  window.addEventListener(\"keydown\", escListener);\r\n\r\n  // Compose modal\r\n  modal.appendChild(moodSection);\r\n  modal.appendChild(energySection);\r\n  openModal(modal);\r\n}\r\n"],
  "mappings": "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",
  "names": ["main_exports", "__export", "MoodEnergyPlugin", "__toCommonJS", "import_obsidian", "DEFAULT_SETTINGS", "import_obsidian", "FilePathSuggester", "inputEl", "app", "lastSuggestions", "dropdown", "selectedIdx", "items", "highlightClass", "style", "closeDropdown", "openDropdown", "suggestions", "rect", "s", "idx", "item", "setHighlight", "e", "el", "i", "query", "f", "path", "loadMoodsFromFile", "vault", "filePath", "file", "lines", "i", "l", "e", "MoodEnergySettingTab", "app", "plugin", "containerEl", "text", "value", "FilePathSuggester", "dropdown", "num", "toggle", "import_obsidian", "currentOpenModal", "openModal", "modalEl", "closeModal", "formatBarIcons", "barIcons", "value", "iconCount", "levels", "percent", "bar", "i", "iconPercent", "rel", "iconLevel", "MoodMenu", "_MoodMenu", "moods", "root", "currentSection", "sectionStack", "line", "match", "level", "name", "parent", "newSection", "widthOverride", "closeModal", "sectionGrid", "sectionDetail", "backButton", "renderSection", "section", "sortedSections", "a", "b", "sortedMoods", "child", "sectionCell", "sectionLabel", "divider", "mood", "moodButton", "btn", "childGrid", "moodsGrid", "buttonRow", "okayButton", "cancelButton", "style", "escListener", "e", "openModal", "resolve", "confirmed", "container", "onSelect", "EnergySlider", "plugin", "sliderValueDisplay", "preview", "okayButton", "cancelButton", "updatePreview", "settings", "value", "output", "formatBarIcons", "escListener", "e", "openModal", "resolve", "closeModal", "container", "onChange", "wrapper", "sliderLabel", "slider", "sliderValue", "import_obsidian", "showMoodAndEnergyModal", "plugin", "moods", "loadMoodsFromFile", "moodMenu", "MoodMenu", "selectedMood", "selectedEnergy", "modal", "moodSection", "energySection", "mood", "EnergySlider", "value", "buttonRow", "okayButton", "activeEditor", "settings", "energyStr", "formatBarIcons", "output", "closeModal", "cancelButton", "escListener", "e", "openModal", "insertMood", "plugin", "moods", "loadMoodsFromFile", "selectedMood", "MoodMenu", "editor", "output", "insertEnergy", "selectedEnergyLevel", "EnergySlider", "settings", "formatBarIcons", "insertMoodAndEnergy", "showMoodAndEnergyModal", "registerCommands", "canRunCommand", "currentOpenModal", "MoodEnergyPlugin", "app", "manifest", "DEFAULT_SETTINGS", "icon", "moodIcon", "editor", "insertMood", "energyIcon", "insertEnergy", "combinedIcon", "insertMoodAndEnergy", "MoodEnergySettingTab", "registerCommands"]
}
