{
  "version": 3,
  "sources": ["../src/main.ts", "../src/types/pluginSettings.ts", "../src/settings/MoodEnergySettingTab.ts", "../src/settings/FilePathSuggester.ts", "../src/commands.ts", "../src/modals/MoodMenu.ts", "../src/utils/modalUtils.ts", "../src/utils/formatBarIcons.ts", "../src/modals/EnergySlider.ts", "../src/modals/MoodEnergyModal.ts"],
  "sourcesContent": ["// main.ts\r\n// Main plugin entry point for the Mood & Energy Obsidian plugin.\r\n\r\nimport { Plugin, Editor, MarkdownView } from \"obsidian\";\r\nimport { MoodEnergyPluginSettings, DEFAULT_SETTINGS } from \"./types\";\r\nimport { MoodEnergySettingTab } from \"./settings\";\r\nimport { registerCommands, insertMood, insertEnergy, insertMoodAndEnergy } from \"./commands\";\r\nimport { showMoodAndEnergyModal } from \"./modals/MoodEnergyModal\";\r\nimport { MoodMenu, EnergySlider } from \"./modals\";\r\nimport { loadMoodsFromFile } from \"./utils\";\r\n\r\n/**\r\n * MoodEnergyPlugin: Main plugin class for Mood & Energy tracking in Obsidian.\r\n * Handles settings, ribbon icons, and command registration.\r\n */\r\nexport default class MoodEnergyPlugin extends Plugin {\r\n  settings: MoodEnergyPluginSettings;\r\n  settingTab: MoodEnergySettingTab | null = null;\r\n  ribbonIcons: HTMLElement[] = [];\r\n\r\n  constructor(app: any, manifest: any) {\r\n    super(app, manifest);\r\n    this.settings = DEFAULT_SETTINGS;\r\n  }\r\n\r\n  /**\r\n   * Reloads ribbon icons based on current settings.\r\n   */\r\n  reloadRibbonIcons() {\r\n    this.ribbonIcons.forEach(icon => icon.remove());\r\n    this.ribbonIcons = [];\r\n    const closeOpenModal = () => {\r\n      const modals = document.querySelectorAll('.modal-container');\r\n      modals.forEach((modal: Element) => {\r\n        const closeBtn = modal.querySelector('.modal-close-button');\r\n        if (closeBtn instanceof HTMLElement) closeBtn.click();\r\n      });\r\n    };\r\n    if (this.settings.showMoodRibbon) {\r\n      const moodIcon = this.addRibbonIcon(\"smile\", \"Open Mood Menu\", async () => {\r\n        closeOpenModal();\r\n        const editor = this.app.workspace.getActiveViewOfType(MarkdownView)?.editor;\r\n        if (editor) editor.focus();\r\n        await insertMood(this);\r\n      });\r\n      this.ribbonIcons.push(moodIcon);\r\n    }\r\n    if (this.settings.showEnergyRibbon) {\r\n      const energyIcon = this.addRibbonIcon(\"activity\", \"Open Energy Slider\", async () => {\r\n        closeOpenModal();\r\n        const editor = this.app.workspace.getActiveViewOfType(MarkdownView)?.editor;\r\n        if (editor) editor.focus();\r\n        await insertEnergy(this);\r\n      });\r\n      this.ribbonIcons.push(energyIcon);\r\n    }\r\n    if (this.settings.showCombinedRibbon) {\r\n      const combinedIcon = this.addRibbonIcon(\"bar-chart-2\", \"Open Mood & Energy Modal\", async () => {\r\n        closeOpenModal();\r\n        const editor = this.app.workspace.getActiveViewOfType(MarkdownView)?.editor;\r\n        if (editor) editor.focus();\r\n        await insertMoodAndEnergy(this);\r\n      });\r\n      this.ribbonIcons.push(combinedIcon);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Loads settings and registers commands on plugin load.\r\n   */\r\n  async onload() {\r\n    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData?.());\r\n    await this.saveSettings();\r\n    this.addSettingTab(new MoodEnergySettingTab(this.app, this));\r\n    registerCommands(this);\r\n    await this.reloadRibbonIcons();\r\n  }\r\n\r\n  /**\r\n   * Saves plugin settings to disk.\r\n   */\r\n  async saveSettings() {\r\n    await this.saveData?.(this.settings);\r\n  }\r\n\r\n  /**\r\n   * Cleans up on plugin unload.\r\n   */\r\n  onunload() {\r\n    this.ribbonIcons.forEach(icon => icon.remove());\r\n    this.ribbonIcons = [];\r\n  }\r\n}\r\n", "// ...MoodEnergyPluginSettings and DEFAULT_SETTINGS from src/types/index.ts...\r\nexport interface MoodEnergyPluginSettings {\r\n  moodsFilePath: string;\r\n  energyDisplay: \"text\" | \"percent\" | \"bar\";\r\n  energyFormat: string;\r\n  barIcons: string;\r\n  barIconCount: number;\r\n  energyOnlyFormat: string;\r\n  moodOnlyFormat: string;\r\n  moodAndEnergyFormat: string;\r\n  showMoodRibbon?: boolean;\r\n  showEnergyRibbon?: boolean;\r\n  showCombinedRibbon?: boolean;\r\n}\r\n\r\nexport const DEFAULT_SETTINGS: MoodEnergyPluginSettings = {\r\n  moodsFilePath: \"moods.txt\",\r\n  energyDisplay: \"bar\",\r\n  energyFormat: \"Energy: {value}\",\r\n  barIcons: \"\u28FF\u28F7\u28F6\u28E6\u28E4\u28C4\u28C0\",\r\n  barIconCount: 7,\r\n  energyOnlyFormat: \"Energy: {value}\",\r\n  moodOnlyFormat: \"{value}\",\r\n  moodAndEnergyFormat: \"{mood} | {energy}\",\r\n  showMoodRibbon: true,\r\n  showEnergyRibbon: true,\r\n  showCombinedRibbon: true,\r\n};\r\n", "import { TFile, normalizePath } from \"obsidian\";\r\nimport { PluginSettingTab, Setting, App, TextComponent } from \"obsidian\";\r\nimport { FilePathSuggester } from \"./FilePathSuggester\";\r\nimport { MoodEnergyPluginSettings } from \"../types\";\r\n\r\nexport async function loadMoodsFromFile(vault: any, filePath: string): Promise<string[]> {\r\n  const DEFAULT_MOODS = [\r\n    \"Happy\",\r\n    \"Sad\",\r\n    \"Angry\",\r\n    \"Excited\",\r\n    \"Calm\",\r\n    \"Anxious\",\r\n    \"Tired\",\r\n    \"Motivated\",\r\n    \"Bored\",\r\n    \"Grateful\",\r\n    \"Stressed\",\r\n    \"Content\",\r\n    \"Confident\",\r\n    \"Lonely\",\r\n    \"Hopeful\"\r\n  ];\r\n  try {\r\n    const file = vault.getAbstractFileByPath(normalizePath(filePath));\r\n    if (file instanceof TFile) {\r\n      const content = await vault.read(file);\r\n      let lines = content.split(/\\r?\\n/);\r\n      if (lines[0].trim() === \"---\") {\r\n        let i = 1;\r\n        while (i < lines.length && lines[i].trim() !== \"---\") i++;\r\n        lines = lines.slice(i + 1);\r\n      }\r\n      return lines\r\n        .map((l: string) => l.replace(/<\\/?[a-zA-Z][^>]*>/g, \"\").trim())\r\n        .filter((l: string) => l.length > 0);\r\n    }\r\n  } catch (e) {\r\n    console.error(\"Failed to load moods file:\", e);\r\n  }\r\n  return DEFAULT_MOODS;\r\n}\r\n\r\nexport class MoodEnergySettingTab extends PluginSettingTab {\r\n  plugin: any;\r\n  constructor(app: App, plugin: any) {\r\n    super(app, plugin);\r\n    this.plugin = plugin;\r\n    plugin.settingTab = this;\r\n  }\r\n  display(): void {\r\n    const { containerEl } = this;\r\n    containerEl.empty();\r\n    containerEl.createEl(\"h2\", { text: \"Mood & Energy Plugin Settings\" });\r\n    containerEl.createEl(\"h3\", { text: \"Mood Settings\" });\r\n    new Setting(containerEl)\r\n      .setName(\"Moods File Path\")\r\n      .setDesc(\"Path to the file containing your moods, one per line (excluding frontmatter). Start typing to see suggestions from your vault.\")\r\n      .addText((text: TextComponent) => {\r\n        text.setPlaceholder(\"moods.txt\")\r\n          .setValue(this.plugin.settings.moodsFilePath || \"\")\r\n          .onChange(async (value) => {\r\n            this.plugin.settings.moodsFilePath = value;\r\n            await this.plugin.saveSettings();\r\n          });\r\n        setTimeout(() => new FilePathSuggester(text.inputEl, this.app), 0);\r\n      });\r\n    containerEl.createEl(\"h3\", { text: \"Energy Settings\" });\r\n    new Setting(containerEl)\r\n      .setName(\"Energy Display\")\r\n      .setDesc(\"How to display the energy value: as text, percent, or a progress bar.\")\r\n      .addDropdown((dropdown) =>\r\n        dropdown\r\n          .addOption(\"text\", \"Text\")\r\n          .addOption(\"percent\", \"Percent\")\r\n          .addOption(\"bar\", \"Progress Bar\")\r\n          .setValue(this.plugin.settings.energyDisplay)\r\n          .onChange(async (value) => {\r\n            this.plugin.settings.energyDisplay = value;\r\n            await this.plugin.saveSettings();\r\n            this.display();\r\n          })\r\n      );\r\n    if (this.plugin.settings.energyDisplay === \"bar\") {\r\n      new Setting(containerEl)\r\n        .setName(\"Bar Icons\")\r\n        .setDesc(\"Icons for the progress bar, from full to empty (e.g. \u28FF\u28F7\u28F6\u28E6\u28E4\u28C4\u28C0 or \u2588\u2593\u2592\u2591)\")\r\n        .addText((text) =>\r\n          text\r\n            .setPlaceholder(\"\u28FF\u28F7\u28F6\u28E6\u28E4\u28C4\u28C0\")\r\n            .setValue(this.plugin.settings.barIcons)\r\n            .onChange(async (value) => {\r\n              this.plugin.settings.barIcons = value;\r\n              await this.plugin.saveSettings();\r\n            })\r\n        );\r\n      new Setting(containerEl)\r\n        .setName(\"Bar Icon Count\")\r\n        .setDesc(\"Number of icons in the progress bar (e.g. 5, 7, 10, 20)\")\r\n        .addText((text) =>\r\n          text\r\n            .setPlaceholder(\"7\")\r\n            .setValue(this.plugin.settings.barIconCount.toString())\r\n            .onChange(async (value) => {\r\n              const num = parseInt(value);\r\n              if (!isNaN(num) && num > 0) {\r\n                this.plugin.settings.barIconCount = num;\r\n                await this.plugin.saveSettings();\r\n              }\r\n            })\r\n        );\r\n    }\r\n    containerEl.createEl(\"h3\", { text: \"Output Format Settings\" });\r\n    new Setting(containerEl)\r\n      .setName(\"Energy Only Output Format\")\r\n      .setDesc(\"Format for energy only output. Use {value} for the energy bar/number.\")\r\n      .addText((text) =>\r\n        text\r\n          .setPlaceholder(\"Energy: {value}\")\r\n          .setValue(this.plugin.settings.energyOnlyFormat)\r\n          .onChange(async (value) => {\r\n            this.plugin.settings.energyOnlyFormat = value;\r\n            await this.plugin.saveSettings();\r\n          })\r\n      );\r\n    new Setting(containerEl)\r\n      .setName(\"Mood Only Output Format\")\r\n      .setDesc(\"Format for mood only output. Use {value} for the mood.\")\r\n      .addText((text) =>\r\n        text\r\n          .setPlaceholder(\"{value}\")\r\n          .setValue(this.plugin.settings.moodOnlyFormat)\r\n          .onChange(async (value) => {\r\n            this.plugin.settings.moodOnlyFormat = value;\r\n            await this.plugin.saveSettings();\r\n          })\r\n      );\r\n    new Setting(containerEl)\r\n      .setName(\"Mood + Energy Output Format\")\r\n      .setDesc(\"Format for mood + energy output. Use {mood} and {energy}.\")\r\n      .addText((text) =>\r\n        text\r\n          .setPlaceholder(\"{mood} | {energy}\")\r\n          .setValue(this.plugin.settings.moodAndEnergyFormat)\r\n          .onChange(async (value) => {\r\n            this.plugin.settings.moodAndEnergyFormat = value;\r\n            await this.plugin.saveSettings();\r\n          })\r\n      );\r\n    new Setting(containerEl)\r\n      .setName(\"Show Mood Ribbon Icon\")\r\n      .setDesc(\"Show a toolbar button for the Mood menu.\")\r\n      .addToggle(toggle => toggle\r\n        .setValue(this.plugin.settings.showMoodRibbon)\r\n        .onChange(async (value) => {\r\n          this.plugin.settings.showMoodRibbon = value;\r\n          await this.plugin.saveSettings();\r\n          this.plugin.reloadRibbonIcons();\r\n        }));\r\n    new Setting(containerEl)\r\n      .setName(\"Show Energy Ribbon Icon\")\r\n      .setDesc(\"Show a toolbar button for the Energy slider.\")\r\n      .addToggle(toggle => toggle\r\n        .setValue(this.plugin.settings.showEnergyRibbon)\r\n        .onChange(async (value) => {\r\n          this.plugin.settings.showEnergyRibbon = value;\r\n          await this.plugin.saveSettings();\r\n          this.plugin.reloadRibbonIcons();\r\n        }));\r\n    new Setting(containerEl)\r\n      .setName(\"Show Combined Ribbon Icon\")\r\n      .setDesc(\"Show a toolbar button for the combined Mood & Energy modal.\")\r\n      .addToggle(toggle => toggle\r\n        .setValue(this.plugin.settings.showCombinedRibbon)\r\n        .onChange(async (value) => {\r\n          this.plugin.settings.showCombinedRibbon = value;\r\n          await this.plugin.saveSettings();\r\n          this.plugin.reloadRibbonIcons();\r\n        }));\r\n  }\r\n}\r\n", "export class FilePathSuggester {\r\n  constructor(inputEl: HTMLInputElement, app: any) {\r\n    let lastSuggestions: string[] = [];\r\n    let dropdown: HTMLDivElement | null = null;\r\n    let selectedIdx: number = -1;\r\n    let items: HTMLDivElement[] = [];\r\n    const highlightClass = \"file-path-suggester-highlight\";\r\n    if (!document.getElementById(\"file-path-suggester-style\")) {\r\n      const style = document.createElement(\"style\");\r\n      style.id = \"file-path-suggester-style\";\r\n      style.textContent = `\r\n        .file-path-suggester-dropdown {\r\n          background: var(--background-secondary);\r\n          border: 1px solid var(--background-modifier-border);\r\n          color: var(--text-normal);\r\n          box-shadow: 0 2px 8px var(--background-modifier-box-shadow);\r\n          border-radius: var(--radius-m);\r\n          font-size: var(--font-ui-medium);\r\n          padding: 4px 0;\r\n        }\r\n        .file-path-suggester-dropdown div {\r\n          padding: 4px 12px;\r\n          cursor: pointer;\r\n          border-radius: var(--radius-s);\r\n        }\r\n        .file-path-suggester-dropdown div:hover,\r\n        .file-path-suggester-highlight {\r\n          background: var(--background-modifier-hover);\r\n          color: var(--text-accent);\r\n        }\r\n      `;\r\n      document.head.appendChild(style);\r\n    }\r\n    function closeDropdown() {\r\n      if (dropdown) dropdown.remove();\r\n      dropdown = null;\r\n      items = [];\r\n      selectedIdx = -1;\r\n    }\r\n    function openDropdown(suggestions: string[]) {\r\n      closeDropdown();\r\n      if (!suggestions.length) return;\r\n      dropdown = document.createElement(\"div\");\r\n      dropdown.className = \"file-path-suggester-dropdown\";\r\n      dropdown.style.position = \"absolute\";\r\n      dropdown.style.zIndex = \"9999\";\r\n      dropdown.style.maxHeight = \"200px\";\r\n      dropdown.style.overflowY = \"auto\";\r\n      dropdown.style.width = inputEl.offsetWidth + \"px\";\r\n      const rect = inputEl.getBoundingClientRect();\r\n      dropdown.style.left = rect.left + window.scrollX + \"px\";\r\n      dropdown.style.top = (rect.bottom + window.scrollY) + \"px\";\r\n      suggestions.forEach((s, idx) => {\r\n        const item = document.createElement(\"div\");\r\n        item.textContent = s;\r\n        item.tabIndex = -1;\r\n        item.onmouseenter = () => setHighlight(idx);\r\n        item.onmouseleave = () => setHighlight(-1);\r\n        item.onmousedown = (e) => {\r\n          e.preventDefault();\r\n          inputEl.value = s;\r\n          inputEl.dispatchEvent(new Event(\"input\"));\r\n          closeDropdown();\r\n        };\r\n        dropdown!.appendChild(item);\r\n        items.push(item);\r\n      });\r\n      document.body.appendChild(dropdown);\r\n    }\r\n    function setHighlight(idx: number) {\r\n      items.forEach((el, i) => {\r\n        if (i === idx) el.classList.add(highlightClass);\r\n        else el.classList.remove(highlightClass);\r\n      });\r\n      selectedIdx = idx;\r\n    }\r\n    inputEl.addEventListener(\"input\", () => {\r\n      const query = inputEl.value.toLowerCase();\r\n      const files = app.vault.getFiles();\r\n      const suggestions = files\r\n        .map((f: any) => f.path)\r\n        .filter((path: string) => path.toLowerCase().includes(query))\r\n        .slice(0, 20);\r\n      lastSuggestions = suggestions;\r\n      openDropdown(suggestions);\r\n    });\r\n    inputEl.addEventListener(\"keydown\", (e) => {\r\n      if (!dropdown || !items.length) return;\r\n      if (e.key === \"ArrowDown\") {\r\n        e.preventDefault();\r\n        setHighlight((selectedIdx + 1) % items.length);\r\n        items[selectedIdx]?.scrollIntoView({ block: \"nearest\" });\r\n      } else if (e.key === \"ArrowUp\") {\r\n        e.preventDefault();\r\n        setHighlight((selectedIdx - 1 + items.length) % items.length);\r\n        items[selectedIdx]?.scrollIntoView({ block: \"nearest\" });\r\n      } else if (e.key === \"Enter\") {\r\n        if (selectedIdx >= 0 && selectedIdx < items.length) {\r\n          inputEl.value = lastSuggestions[selectedIdx];\r\n          inputEl.dispatchEvent(new Event(\"input\"));\r\n          closeDropdown();\r\n          e.preventDefault();\r\n        }\r\n      } else if (e.key === \"Escape\") {\r\n        closeDropdown();\r\n      }\r\n    });\r\n    inputEl.addEventListener(\"blur\", () => setTimeout(closeDropdown, 100));\r\n  }\r\n}\r\n", "// commands.ts\r\n// Command registration and modal logic for the Mood & Energy Obsidian plugin.\r\n\r\nimport { MarkdownView } from \"obsidian\";\r\nimport { MoodMenu, EnergySlider } from \"./modals\";\r\nimport { loadMoodsFromFile, formatBarIcons, currentOpenModal } from \"./utils\";\r\nimport { showMoodAndEnergyModal } from \"./modals/MoodEnergyModal\";\r\n\r\n/**\r\n * Opens the Mood selection modal and inserts the selected mood into the editor.\r\n */\r\nexport async function insertMood(plugin: any) {\r\n  const moods = await loadMoodsFromFile(plugin.app.vault, plugin.settings.moodsFilePath);\r\n  return new Promise<void>((resolve) => {\r\n    const modal = new MoodMenu(plugin.app, moods, (selectedMood: string | null) => {\r\n      if (selectedMood !== null && selectedMood !== undefined) {\r\n        const editor = plugin.app.workspace.getActiveViewOfType(MarkdownView)?.editor;\r\n        if (editor) {\r\n          const format = plugin.settings.moodOnlyFormat || \"{value}\";\r\n          const output = format.replace(\"{value}\", selectedMood);\r\n          editor.focus();\r\n          editor.replaceSelection(output);\r\n        }\r\n      }\r\n      resolve();\r\n    });\r\n    modal.open();\r\n  });\r\n}\r\n\r\n/**\r\n * Opens the Energy slider modal and inserts the selected energy value into the editor.\r\n */\r\nexport async function insertEnergy(plugin: any) {\r\n  return new Promise<void>((resolve) => {\r\n    const modal = new EnergySlider(plugin.app, plugin, (selectedEnergyLevel: number) => {\r\n      if (selectedEnergyLevel !== null && selectedEnergyLevel !== undefined) {\r\n        const editor = plugin.app.workspace.getActiveViewOfType(MarkdownView)?.editor;\r\n        if (editor) {\r\n          let output = \"\";\r\n          const settings = plugin.settings;\r\n          if (settings.energyDisplay === \"percent\") {\r\n            output = settings.energyOnlyFormat.replace(\"{value}\", `${selectedEnergyLevel}%`);\r\n          } else if (settings.energyDisplay === \"bar\") {\r\n            output = settings.energyOnlyFormat.replace(\"{value}\", formatBarIcons(settings.barIcons, selectedEnergyLevel, settings.barIconCount));\r\n          } else {\r\n            output = settings.energyOnlyFormat.replace(\"{value}\", `${selectedEnergyLevel}`);\r\n          }\r\n          editor.focus();\r\n          editor.replaceSelection(output);\r\n        }\r\n      }\r\n      resolve();\r\n    });\r\n    modal.open();\r\n  });\r\n}\r\n\r\n/**\r\n * Opens the combined Mood & Energy modal and inserts the formatted result into the editor.\r\n */\r\nexport async function insertMoodAndEnergy(plugin: any) {\r\n  await showMoodAndEnergyModal(plugin, (selectedMood: string, selectedEnergy: number) => {\r\n    const editor = plugin.app.workspace.getActiveViewOfType(MarkdownView)?.editor;\r\n    if (editor) {\r\n      const settings = plugin.settings;\r\n      // Format energy part\r\n      let energyStr = `${selectedEnergy}`;\r\n      if (settings.energyDisplay === \"percent\") {\r\n        energyStr = `${selectedEnergy}%`;\r\n      } else if (settings.energyDisplay === \"bar\") {\r\n        energyStr = settings.energyOnlyFormat.replace(\"{value}\", formatBarIcons(settings.barIcons, selectedEnergy, settings.barIconCount));\r\n      } else {\r\n        energyStr = settings.energyOnlyFormat.replace(\"{value}\", `${selectedEnergy}`);\r\n      }\r\n      // Format mood part\r\n      const moodStr = (settings.moodOnlyFormat || \"{value}\").replace(\"{value}\", selectedMood || \"\").trim();\r\n      // Format combined output, trimming each part before insertion\r\n      let output = (settings.moodAndEnergyFormat || \"{mood} | {energy}\")\r\n        .replace(\"{mood}\", moodStr)\r\n        .replace(\"{energy}\", energyStr.trim());\r\n      editor.focus();\r\n      editor.replaceSelection(output);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Registers all plugin commands and their hotkeys with Obsidian.\r\n */\r\nexport function registerCommands(plugin: any) {\r\n  function canRunCommand() {\r\n    // Only require that no modal is open\r\n    return !currentOpenModal;\r\n  }\r\n  plugin.addCommand({\r\n    id: \"insert-mood\",\r\n    name: \"Insert Mood\",\r\n    callback: async () => {\r\n      if (!canRunCommand()) return;\r\n      await insertMood(plugin);\r\n    }\r\n  });\r\n  plugin.addCommand({\r\n    id: \"insert-energy-level\",\r\n    name: \"Insert Energy Level\",\r\n    callback: async () => {\r\n      if (!canRunCommand()) return;\r\n      await insertEnergy(plugin);\r\n    }\r\n  });\r\n  plugin.addCommand({\r\n    id: \"insert-mood-and-energy\",\r\n    name: \"Insert Mood and Energy Level\",\r\n    callback: async () => {\r\n      if (!canRunCommand()) return;\r\n      await insertMoodAndEnergy(plugin);\r\n    }\r\n  });\r\n}\r\n", "import { App, Modal } from \"obsidian\";\r\n\r\n/**\r\n * MoodMenu modal for selecting a mood from a list or tree.\r\n */\r\nexport class MoodMenu extends Modal {\r\n  moods: string[];\r\n  selectedMood: string | null = null;\r\n  onSelect: ((mood: string | null) => void) | null = null;\r\n\r\n  constructor(app: App, moods: string[], onSelect?: (mood: string | null) => void) {\r\n    super(app);\r\n    this.moods = moods;\r\n    this.onSelect = onSelect || null;\r\n  }\r\n\r\n  onOpen() {\r\n    if (!document.getElementById('mood-energy-bundle-css')) {\r\n      const style = document.createElement('link');\r\n      style.id = 'mood-energy-bundle-css';\r\n      style.rel = 'stylesheet';\r\n      style.type = 'text/css';\r\n      style.href = 'styles.css';\r\n      document.head.appendChild(style);\r\n    }\r\n    const { contentEl } = this;\r\n    contentEl.empty();\r\n    contentEl.classList.add(\"mood-menu-modal\");\r\n    const { modalEl } = this;\r\n    let header = modalEl.querySelector('.modal-header');\r\n    if (!header) {\r\n      header = document.createElement(\"div\");\r\n      header.className = \"modal-header\";\r\n      const title = document.createElement(\"div\");\r\n      title.className = \"modal-title\";\r\n      title.textContent = \"Select Mood\";\r\n      header.appendChild(title);\r\n      modalEl.insertBefore(header, contentEl);\r\n    } else {\r\n      let title = header.querySelector('.modal-title');\r\n      if (!title) {\r\n        title = document.createElement('div');\r\n        title.className = 'modal-title';\r\n        title.textContent = \"Select Mood\";\r\n        header.appendChild(title);\r\n      } else {\r\n        title.textContent = \"Select Mood\";\r\n      }\r\n    }\r\n    this.modalEl.classList.add(\"mood-menu-modal\");\r\n    this.modalEl.style.width = \"fit-content\";\r\n    this.modalEl.style.margin = \"0\";\r\n    this.modalEl.classList.add(\"mood-menu-padding\"); // Add padding via CSS class\r\n    // Create grid and detail containers for modal\r\n    const sectionGrid = document.createElement(\"div\");\r\n    sectionGrid.className = \"mood-menu-grid\";\r\n    const sectionDetail = document.createElement(\"div\");\r\n    sectionDetail.className = \"mood-menu-section-detail\";\r\n    // Render mood menu into a separate container so header is not cleared\r\n    const menuContainer = document.createElement(\"div\");\r\n    menuContainer.className = \"mood-menu-inline\";\r\n    menuContainer.style.margin = \"0\";\r\n    menuContainer.style.padding = \"0\";\r\n    // For modal, pass sectionGrid/sectionDetail to renderInline and append them directly\r\n    this.renderInline(\r\n      menuContainer, // still used for inline, not for modal\r\n      (mood) => {\r\n        this.selectedMood = mood;\r\n        if (this.onSelect) this.onSelect(mood);\r\n        this.close();\r\n      },\r\n      true,\r\n      sectionGrid,\r\n      sectionDetail\r\n    );\r\n    contentEl.appendChild(sectionGrid);\r\n    contentEl.appendChild(sectionDetail);\r\n    // Cancel button row\r\n    const buttonRow = document.createElement(\"div\");\r\n    buttonRow.className = \"mood-menu-actions\";\r\n    buttonRow.style.display = \"flex\";\r\n    buttonRow.style.gap = \"12px\";\r\n    buttonRow.style.marginTop = \"10px\";\r\n    const cancelButton = document.createElement(\"button\");\r\n    cancelButton.innerText = \"Cancel\";\r\n    cancelButton.className = \"mod-cta cancel-btn\";\r\n    cancelButton.setAttribute(\"type\", \"button\");\r\n    cancelButton.onclick = () => {\r\n      if (this.onSelect) this.onSelect(null);\r\n      this.close();\r\n    };\r\n    buttonRow.appendChild(cancelButton);\r\n    contentEl.appendChild(buttonRow);\r\n  }\r\n\r\n  onClose() {\r\n    this.contentEl.empty();\r\n  }\r\n\r\n  private static parseMoodsToTree(moods: string[]) {\r\n    type SectionNode = {\r\n      name: string;\r\n      level: number;\r\n      moods: string[];\r\n      sections: SectionNode[];\r\n      parent?: SectionNode;\r\n    };\r\n    const root: SectionNode = { name: \"\", level: 0, moods: [], sections: [] };\r\n    let currentSection: SectionNode = root;\r\n    const sectionStack: SectionNode[] = [root];\r\n    for (let line of moods) {\r\n      if (/^#+\\s/.test(line)) {\r\n        const match = line.match(/^(#+)\\s*(.*)$/);\r\n        if (!match) continue;\r\n        const level = match[1].length;\r\n        const name = match[2].trim();\r\n        while (sectionStack.length > 0 && sectionStack[sectionStack.length - 1].level >= level) {\r\n          sectionStack.pop();\r\n        }\r\n        const parent = sectionStack[sectionStack.length - 1];\r\n        const newSection: SectionNode = { name, level, moods: [], sections: [], parent };\r\n        parent.sections.push(newSection);\r\n        sectionStack.push(newSection);\r\n        currentSection = newSection;\r\n      } else if (line.trim().length > 0) {\r\n        currentSection.moods.push(line.replace(/^[-*]\\s*/, \"\"));\r\n      }\r\n    }\r\n    return root;\r\n  }\r\n\r\n  /**\r\n   * Render the mood menu inline into a container. Calls onSelect when a mood is chosen.\r\n   * @param container HTMLElement to render into\r\n   * @param onSelect Callback when a mood is selected\r\n   * @param showBackButton Whether to show the back button (default: true)\r\n   * @param sectionGrid Optional grid container for modal usage\r\n   * @param sectionDetail Optional detail container for modal usage\r\n   */\r\n  renderInline(container: HTMLElement, onSelect: (mood: string) => void, showBackButton: boolean = true, sectionGrid?: HTMLElement, sectionDetail?: HTMLElement) {\r\n    container.innerHTML = \"\";\r\n    // --- Tree parsing --- \r\n    const root = MoodMenu.parseMoodsToTree(this.moods);\r\n    let currentSection = root;\r\n    const sectionStack: typeof root[] = [];\r\n    // --- UI elements ---\r\n    // Use provided sectionGrid/sectionDetail if present (modal), else create new (inline)\r\n    sectionGrid = sectionGrid || document.createElement(\"div\");\r\n    sectionGrid.className = \"mood-menu-grid\";\r\n    sectionGrid.style.display = \"grid\";\r\n    // Custom column logic\r\n    const getCustomColumns = (itemCount: number) => {\r\n      if (itemCount <= 4) return 1;\r\n      if (itemCount <= 8) return 2;\r\n      if (itemCount <= 18) return 3;\r\n      if (itemCount <= 24) return 4;\r\n      return 4 + Math.floor((itemCount - 19) / 6) + 1;\r\n    };\r\n    sectionGrid.style.gap = \"12px\"; // Reduce gap between grid items\r\n    sectionGrid.style.width = \"100%\";\r\n    sectionGrid.style.marginBottom = \"0\"; // Remove bottom margin\r\n    sectionDetail = sectionDetail || document.createElement(\"div\");\r\n    sectionDetail.className = \"mood-menu-section-detail\";\r\n    sectionDetail.style.display = \"none\";\r\n    sectionDetail.style.flexDirection = \"column\";\r\n    sectionDetail.style.alignItems = \"stretch\";\r\n    sectionDetail.style.width = \"100%\";\r\n    sectionDetail.style.marginBottom = \"18px\";\r\n    // Only add back button if showBackButton is true\r\n    let backButton: HTMLButtonElement | null = null;\r\n    if (showBackButton) {\r\n      backButton = document.createElement(\"button\");\r\n      backButton.innerText = \"Back\";\r\n      backButton.className = \"mod-cta back-btn\";\r\n      backButton.type = \"button\";\r\n      backButton.tabIndex = 0;\r\n      backButton.style.outline = \"none\";\r\n      backButton.removeAttribute(\"title\");\r\n      backButton.onclick = () => {\r\n        if (sectionStack.length > 0) {\r\n          currentSection = sectionStack.pop()!;\r\n          renderSection(currentSection);\r\n        }\r\n      };\r\n      sectionDetail.appendChild(backButton);\r\n    }\r\n    // --- Render function for a section node ---\r\n    const renderSection = (section: ReturnType<typeof MoodMenu.parseMoodsToTree>) => {\r\n      if (section === root) {\r\n        sectionGrid.style.display = \"grid\";\r\n        sectionDetail.style.display = \"none\";\r\n        if (backButton) backButton.style.display = \"none\";\r\n        sectionGrid.innerHTML = \"\";\r\n        const sortedSections = [...section.sections].sort((a, b) => a.name.localeCompare(b.name));\r\n        const sortedMoods = [...section.moods].sort((a, b) => a.localeCompare(b));\r\n        const items = [...sortedSections, ...sortedMoods];\r\n        const itemCount = items.length;\r\n        const columns = getCustomColumns(itemCount);\r\n        sectionGrid.style.gridTemplateColumns = `repeat(${columns}, 1fr)`;\r\n        // Distribute items vertically (column-wise)\r\n        const rows = Math.ceil(itemCount / columns);\r\n        const columnsArr: any[][] = Array.from({ length: columns }, () => []);\r\n        for (let i = 0; i < itemCount; i++) {\r\n          columnsArr[i % columns].push(items[i]);\r\n        }\r\n        // Now render by columns, row by row\r\n        for (let row = 0; row < rows; row++) {\r\n          for (let col = 0; col < columns; col++) {\r\n            const item = columnsArr[col][row];\r\n            if (!item) continue;\r\n            if (typeof item === \"object\" && item.name) {\r\n              // Section\r\n              const sectionCell = document.createElement(\"div\");\r\n              sectionCell.style.display = \"flex\";\r\n              sectionCell.style.flexDirection = \"column\";\r\n              sectionCell.style.alignItems = \"center\";\r\n              sectionCell.style.background = \"var(--background-modifier-hover)\";\r\n              sectionCell.style.borderRadius = \"var(--radius-m)\";\r\n              sectionCell.style.padding = \"18px 6px 18px 6px\";\r\n              sectionCell.style.boxSizing = \"border-box\";\r\n              sectionCell.style.minWidth = \"0\";\r\n              sectionCell.style.cursor = \"pointer\";\r\n              sectionCell.style.transition = \"background 0.2s\";\r\n              sectionCell.onmouseenter = () => sectionCell.style.background = \"var(--background-modifier-active-hover)\";\r\n              sectionCell.onmouseleave = () => sectionCell.style.background = \"var(--background-modifier-hover)\";\r\n              const sectionLabel = document.createElement(\"div\");\r\n              sectionLabel.innerText = item.name;\r\n              sectionLabel.style.fontWeight = \"bold\";\r\n              sectionLabel.style.fontSize = \"1.2rem\";\r\n              sectionLabel.style.color = \"var(--text-accent)\";\r\n              sectionCell.appendChild(sectionLabel);\r\n              sectionCell.onclick = () => {\r\n                sectionStack.push(section);\r\n                currentSection = item;\r\n                renderSection(item);\r\n              };\r\n              sectionGrid.appendChild(sectionCell);\r\n            } else if (typeof item === \"string\") {\r\n              // Mood\r\n              const moodButton = document.createElement(\"button\");\r\n              moodButton.innerText = item;\r\n              moodButton.className = \"mod-cta\";\r\n              moodButton.setAttribute(\"type\", \"button\");\r\n              moodButton.tabIndex = 0;\r\n              moodButton.style.outline = \"none\";\r\n              moodButton.removeAttribute(\"title\");\r\n              moodButton.style.padding = \"var(--size-4-2) var(--size-4-4)\";\r\n              moodButton.style.borderRadius = \"var(--radius-s)\";\r\n              moodButton.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n              moodButton.style.background = \"var(--background-modifier-hover)\";\r\n              moodButton.style.color = \"var(--text-normal)\";\r\n              moodButton.style.fontSize = \"1rem\";\r\n              moodButton.style.cursor = \"pointer\";\r\n              moodButton.style.whiteSpace = \"normal\";\r\n              moodButton.style.overflow = \"hidden\";\r\n              moodButton.style.wordBreak = \"normal\";\r\n              moodButton.style.textOverflow = \"ellipsis\";\r\n              moodButton.style.height = \"auto\";\r\n              moodButton.style.minHeight = \"48px\";\r\n              moodButton.style.display = \"block\";\r\n              moodButton.style.width = \"100%\";\r\n              moodButton.onmouseenter = () => moodButton.style.background = \"var(--background-modifier-active-hover)\";\r\n              moodButton.onmouseleave = () => moodButton.style.background = \"var(--background-modifier-hover)\";\r\n              moodButton.onclick = () => {\r\n                this.selectedMood = item;\r\n                Array.from(sectionGrid.querySelectorAll(\"button\")).forEach((btn) => btn.classList.remove(\"selected-mood\"));\r\n                moodButton.classList.add(\"selected-mood\");\r\n                onSelect(item);\r\n              };\r\n              sectionGrid.appendChild(moodButton);\r\n            }\r\n          }\r\n        }\r\n        // ...existing code for divider if needed...\r\n      } else {\r\n        sectionGrid.style.display = \"none\";\r\n        sectionDetail.style.display = \"flex\";\r\n        if (backButton) backButton.style.display = \"block\";\r\n        while (sectionDetail.childNodes.length > (backButton ? 1 : 0))\r\n          sectionDetail.removeChild(sectionDetail.lastChild!);\r\n        const sortedSections = [...section.sections].sort((a, b) => a.name.localeCompare(b.name));\r\n        const sortedMoods = [...section.moods].sort((a, b) => a.localeCompare(b));\r\n        if (sortedSections.length > 0) {\r\n          const childGrid = document.createElement(\"div\");\r\n          childGrid.style.display = \"grid\";\r\n          childGrid.style.gridTemplateColumns = \"repeat(auto-fit, minmax(180px, 1fr))\";\r\n          childGrid.style.gap = \"12px\";\r\n          childGrid.style.width = \"100%\";\r\n          sortedSections.forEach((child) => {\r\n            const sectionCell = document.createElement(\"div\");\r\n            sectionCell.style.display = \"flex\";\r\n            sectionCell.style.flexDirection = \"column\";\r\n            sectionCell.style.alignItems = \"center\";\r\n            sectionCell.style.background = \"var(--background-modifier-hover)\";\r\n            sectionCell.style.borderRadius = \"var(--radius-m)\";\r\n            sectionCell.style.padding = \"14px 4px 14px 4px\";\r\n            sectionCell.style.boxSizing = \"border-box\";\r\n            sectionCell.style.minWidth = \"0\";\r\n            sectionCell.style.cursor = \"pointer\";\r\n            sectionCell.style.transition = \"background 0.2s\";\r\n            sectionCell.onmouseenter = () => sectionCell.style.background = \"var(--background-modifier-active-hover)\";\r\n            sectionCell.onmouseleave = () => sectionCell.style.background = \"var(--background-modifier-hover)\";\r\n            const sectionLabel = document.createElement(\"div\");\r\n            sectionLabel.innerText = child.name;\r\n            sectionLabel.style.fontWeight = \"bold\";\r\n            sectionLabel.style.fontSize = \"1.1rem\";\r\n            sectionLabel.style.color = \"var(--text-accent)\";\r\n            sectionCell.appendChild(sectionLabel);\r\n            sectionCell.onclick = () => {\r\n              sectionStack.push(section);\r\n              currentSection = child;\r\n              renderSection(child);\r\n            };\r\n            childGrid.appendChild(sectionCell);\r\n          });\r\n          sectionDetail.appendChild(childGrid);\r\n        }\r\n        if (sortedSections.length > 0 && sortedMoods.length > 0) {\r\n          const divider = document.createElement(\"div\");\r\n          divider.style.width = \"100%\";\r\n          divider.style.height = \"1px\";\r\n          divider.style.background = \"var(--background-modifier-border)\";\r\n          divider.style.margin = \"12px 0\";\r\n          sectionDetail.appendChild(divider);\r\n        }\r\n        if (sortedMoods.length > 0) {\r\n          const moodsGrid = document.createElement(\"div\");\r\n          moodsGrid.style.display = \"grid\";\r\n          // Use the same column logic as the root grid for consistency\r\n          const moodCount = sortedMoods.length;\r\n          const columns = getCustomColumns(moodCount);\r\n          moodsGrid.style.gridTemplateColumns = `repeat(${columns}, 1fr)`;\r\n          moodsGrid.style.gap = \"12px\";\r\n          moodsGrid.style.width = \"100%\";\r\n          sortedMoods.forEach((mood) => {\r\n            const moodButton = document.createElement(\"button\");\r\n            moodButton.innerText = mood;\r\n            moodButton.className = \"mod-cta\";\r\n            moodButton.setAttribute(\"type\", \"button\");\r\n            moodButton.tabIndex = 0;\r\n            moodButton.style.outline = \"none\";\r\n            moodButton.removeAttribute(\"title\");\r\n            moodButton.style.padding = \"var(--size-4-2) var(--size-4-4)\";\r\n            moodButton.style.borderRadius = \"var(--radius-s)\";\r\n            moodButton.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n            moodButton.style.background = \"var(--background-modifier-hover)\";\r\n            moodButton.style.color = \"var(--text-normal)\";\r\n            moodButton.style.fontSize = \"1rem\";\r\n            moodButton.style.cursor = \"pointer\";\r\n            moodButton.style.whiteSpace = \"normal\";\r\n            moodButton.style.overflow = \"hidden\";\r\n            moodButton.style.wordBreak = \"normal\";\r\n            moodButton.style.textOverflow = \"ellipsis\";\r\n            moodButton.style.height = \"auto\";\r\n            moodButton.style.minHeight = \"48px\";\r\n            moodButton.style.display = \"block\";\r\n            moodButton.style.width = \"100%\";\r\n            moodButton.onmouseenter = () => moodButton.style.background = \"var(--background-modifier-active-hover)\";\r\n            moodButton.onmouseleave = () => moodButton.style.background = \"var(--background-modifier-hover)\";\r\n            moodButton.onclick = () => {\r\n              this.selectedMood = mood;\r\n              Array.from(moodsGrid.querySelectorAll(\"button\")).forEach((btn) => btn.classList.remove(\"selected-mood\"));\r\n              moodButton.classList.add(\"selected-mood\");\r\n              onSelect(mood);\r\n            };\r\n            moodsGrid.appendChild(moodButton);\r\n          });\r\n          sectionDetail.appendChild(moodsGrid);\r\n        }\r\n      }\r\n    };\r\n    renderSection(root);\r\n    // In renderInline, do not append sectionGrid/sectionDetail to container for modal usage\r\n    // Instead, only append them for inline usage\r\n    if (container.classList.contains(\"mood-menu-inline\")) {\r\n      container.appendChild(sectionGrid);\r\n      container.appendChild(sectionDetail);\r\n    }\r\n    // After appending sectionGrid and sectionDetail to container, remove margin/padding from container\r\n    container.style.margin = \"0\";\r\n    container.style.padding = \"0\";\r\n    // Add style for selected mood\r\n    const style = document.createElement(\"style\");\r\n    style.innerText = `.selected-mood { background: var(--interactive-accent) !important; color: var(--text-on-accent) !important; border: var(--input-border-width) solid var(--background-primary) !important; }`;\r\n    container.appendChild(style);\r\n  }\r\n}\r\n", "/**\r\n * Tracks the currently open modal (if any).\r\n */\r\nexport let currentOpenModal: HTMLElement | null = null;\r\n\r\n/**\r\n * Opens a modal, ensuring only one is open at a time.\r\n * @param modalEl - The modal element to open.\r\n */\r\nexport function openModal(modalEl: HTMLElement) {\r\n  if (currentOpenModal && currentOpenModal !== modalEl) {\r\n    currentOpenModal.remove();\r\n  }\r\n  currentOpenModal = modalEl;\r\n  document.body.appendChild(modalEl);\r\n}\r\n\r\n/**\r\n * Closes a modal and clears the currentOpenModal reference.\r\n * @param modalEl - The modal element to close.\r\n */\r\nexport function closeModal(modalEl: HTMLElement) {\r\n  if (currentOpenModal === modalEl) {\r\n    modalEl.remove();\r\n    currentOpenModal = null;\r\n  } else {\r\n    modalEl.remove();\r\n  }\r\n}\r\n", "/**\r\n * Formats a progress bar using a string of icons and a value.\r\n * @param barIcons - String of icons from full to empty.\r\n * @param value - Value from 0 to 100.\r\n * @param iconCount - Number of icons to display.\r\n * @returns The formatted bar string.\r\n */\r\nexport function formatBarIcons(barIcons: string, value: number, iconCount: number): string {\r\n  if (!barIcons || barIcons.length < 2 || iconCount < 1) return value.toString();\r\n  const levels = barIcons.length;\r\n  const percent = Math.max(0, Math.min(100, value));\r\n  let bar = \"\";\r\n  for (let i = 0; i < iconCount; i++) {\r\n    // For each icon, determine how full it should be\r\n    const iconPercent = 100 * (i + 1) / iconCount;\r\n    const rel = percent - (100 * i / iconCount);\r\n    let iconLevel = Math.round((1 - rel / (100 / iconCount)) * (levels - 1));\r\n    if (percent >= iconPercent) iconLevel = 0; // full\r\n    else if (percent <= 100 * i / iconCount) iconLevel = levels - 1; // empty\r\n    iconLevel = Math.max(0, Math.min(levels - 1, iconLevel));\r\n    bar += barIcons[iconLevel];\r\n  }\r\n  return bar;\r\n}\r\n", "import { formatBarIcons } from \"../utils\";\r\nimport { Modal, App } from \"obsidian\";\r\n\r\n/**\r\n * EnergySlider modal for selecting and previewing an energy value.\r\n */\r\nexport class EnergySlider extends Modal {\r\n  plugin: any;\r\n  selectedValue: number;\r\n  onSubmit: (value: number) => void;\r\n\r\n  constructor(app: App, plugin: any, onSubmit: (value: number) => void, initialValue = 50) {\r\n    super(app);\r\n    this.plugin = plugin;\r\n    this.selectedValue = initialValue;\r\n    this.onSubmit = onSubmit;\r\n  }\r\n\r\n  onOpen() {\r\n    if (!document.getElementById('mood-energy-bundle-css')) {\r\n      const style = document.createElement('link');\r\n      style.id = 'mood-energy-bundle-css';\r\n      style.rel = 'stylesheet';\r\n      style.type = 'text/css';\r\n      style.href = 'styles.css';\r\n      document.head.appendChild(style);\r\n    }\r\n    const { contentEl } = this;\r\n    contentEl.empty();\r\n    contentEl.classList.add(\"energy-slider-modal\");\r\n    const { modalEl } = this;\r\n    let header = modalEl.querySelector('.modal-header');\r\n    if (!header) {\r\n      header = document.createElement('div');\r\n      header.className = 'modal-header';\r\n      const title = document.createElement('div');\r\n      title.className = 'modal-title';\r\n      title.textContent = \"Select Energy Level\";\r\n      header.appendChild(title);\r\n      modalEl.insertBefore(header, contentEl);\r\n    } else {\r\n      let title = header.querySelector('.modal-title');\r\n      if (!title) {\r\n        title = document.createElement('div');\r\n        title.className = 'modal-title';\r\n        title.textContent = \"Select Energy Level\";\r\n        header.appendChild(title);\r\n      } else {\r\n        title.textContent = \"Select Energy Level\";\r\n      }\r\n    }\r\n    // Set modal width directly via JS for guaranteed effect\r\n    this.modalEl.classList.add(\"energy-slider-modal\");\r\n    this.modalEl.style.width = \"340px\";\r\n    this.modalEl.style.minWidth = \"0\";\r\n    this.modalEl.style.maxWidth = \"100vw\";\r\n    this.modalEl.style.boxSizing = \"border-box\";\r\n    // Slider\r\n    const slider = document.createElement(\"input\");\r\n    slider.type = \"range\";\r\n    slider.min = \"0\";\r\n    slider.max = \"100\";\r\n    slider.value = this.selectedValue.toString();\r\n    slider.className = \"slider energy-slider\";\r\n    slider.id = \"energy-slider\";\r\n    slider.style.width = \"220px\";\r\n    slider.removeAttribute(\"title\");\r\n    contentEl.appendChild(slider);\r\n    // Preview\r\n    const preview = document.createElement(\"div\");\r\n    preview.className = \"energy-preview\";\r\n    preview.setAttribute(\"aria-live\", \"polite\");\r\n    preview.style.marginTop = \"8px\";\r\n    preview.style.fontFamily = \"monospace\";\r\n    preview.style.fontSize = \"1.2em\";\r\n    contentEl.appendChild(preview);\r\n    // Update preview\r\n    const updatePreview = () => {\r\n      const settings = this.plugin?.settings || {};\r\n      let output = `${this.selectedValue}`;\r\n      if (settings.energyDisplay === \"percent\") {\r\n        output = `${this.selectedValue}%`;\r\n      } else if (settings.energyDisplay === \"bar\") {\r\n        output = settings.energyOnlyFormat?.replace(\r\n          \"{value}\",\r\n          formatBarIcons(settings.barIcons, this.selectedValue, settings.barIconCount)\r\n        ) || `${this.selectedValue}`;\r\n      }\r\n      preview.innerText = output;\r\n    };\r\n    slider.oninput = () => {\r\n      this.selectedValue = parseInt(slider.value);\r\n      updatePreview();\r\n    };\r\n    updatePreview();\r\n    // Buttons\r\n    const buttonRow = document.createElement(\"div\");\r\n    buttonRow.className = \"mod-cta btn-row\";\r\n    buttonRow.style.display = \"flex\";\r\n    buttonRow.style.gap = \"12px\";\r\n    buttonRow.style.marginTop = \"18px\";\r\n    buttonRow.style.justifyContent = \"center\";\r\n    buttonRow.style.width = \"100%\";\r\n    // OK\r\n    const okBtn = document.createElement(\"button\");\r\n    okBtn.innerText = \"Okay\";\r\n    okBtn.className = \"mod-cta okay-btn\";\r\n    okBtn.type = \"button\";\r\n    okBtn.tabIndex = 0;\r\n    okBtn.style.outline = \"none\";\r\n    okBtn.onclick = () => {\r\n      this.onSubmit(this.selectedValue);\r\n      this.close();\r\n    };\r\n    okBtn.removeAttribute(\"title\");\r\n    buttonRow.appendChild(okBtn);\r\n    // Cancel\r\n    const cancelBtn = document.createElement(\"button\");\r\n    cancelBtn.innerText = \"Cancel\";\r\n    cancelBtn.className = \"mod-cta cancel-btn\";\r\n    cancelBtn.type = \"button\";\r\n    cancelBtn.tabIndex = 0;\r\n    cancelBtn.style.outline = \"none\";\r\n    cancelBtn.onclick = () => this.close();\r\n    cancelBtn.removeAttribute(\"title\");\r\n    buttonRow.appendChild(cancelBtn);\r\n    contentEl.appendChild(buttonRow);\r\n  }\r\n\r\n  onClose() {\r\n    this.contentEl.empty();\r\n  }\r\n}\r\n", "// src/modals/MoodEnergyModal.ts\r\n// Combined Mood & Energy modal logic, using MoodMenu and EnergySlider modular components\r\n\r\nimport { Modal, App, MarkdownView } from \"obsidian\";\r\nimport { loadMoodsFromFile, formatBarIcons } from \"../utils\";\r\nimport { MoodMenu } from \"./MoodMenu\";\r\nimport { EnergySlider } from \"./EnergySlider\";\r\n\r\n/**\r\n * MoodEnergy modal for selecting both mood and energy in a single dialog.\r\n */\r\nexport class MoodEnergy extends Modal {\r\n  plugin: any;\r\n  moods: string[];\r\n  onSubmit: (mood: string, energy: number) => void;\r\n  selectedMood: string | null = null;\r\n  selectedEnergy: number = 50;\r\n\r\n  constructor(app: App, plugin: any, moods: string[], onSubmit: (mood: string, energy: number) => void) {\r\n    super(app);\r\n    this.plugin = plugin;\r\n    this.moods = moods;\r\n    this.onSubmit = onSubmit;\r\n  }\r\n\r\n  onOpen() {\r\n    if (!document.getElementById('mood-energy-bundle-css')) {\r\n      const style = document.createElement('link');\r\n      style.id = 'mood-energy-bundle-css';\r\n      style.rel = 'stylesheet';\r\n      style.type = 'text/css';\r\n      style.href = 'styles.css';\r\n      document.head.appendChild(style);\r\n    }\r\n    const { contentEl, modalEl } = this;\r\n    contentEl.empty();\r\n    // Modal header and title (always at top)\r\n    let header = modalEl.querySelector('.modal-header');\r\n    if (!header) {\r\n      header = document.createElement('div');\r\n      header.className = 'modal-header';\r\n      const title = document.createElement('div');\r\n      title.className = 'modal-title';\r\n      title.textContent = \"Mood & Energy\";\r\n      header.appendChild(title);\r\n      modalEl.insertBefore(header, contentEl);\r\n    } else {\r\n      let title = header.querySelector('.modal-title');\r\n      if (!title) {\r\n        title = document.createElement('div');\r\n        title.className = 'modal-title';\r\n        title.textContent = \"Mood & Energy\";\r\n        header.appendChild(title);\r\n      } else {\r\n        title.textContent = \"Mood & Energy\";\r\n      }\r\n    }\r\n    // Add modal class to modalEl for appearance\r\n    this.modalEl.classList.add(\"mood-energy-modal\");\r\n    // Remove any appearance class from contentEl\r\n    contentEl.classList.remove(\"mood-energy-modal\");\r\n    // Container for the rest of the modal content (flex row/column)\r\n    contentEl.style.display = \"flex\";\r\n    contentEl.style.flexDirection = window.innerWidth < 600 ? \"column\" : \"row\";\r\n    contentEl.style.alignItems = \"stretch\";\r\n    contentEl.style.borderRadius = \"var(--radius-m)\";\r\n    contentEl.style.overflow = \"visible\";\r\n    contentEl.style.maxWidth = \"98vw\";\r\n    // Modal content container\r\n    const modalContent = document.createElement(\"div\");\r\n    modalContent.style.display = \"flex\";\r\n    modalContent.style.flexDirection = window.innerWidth < 600 ? \"column\" : \"row\";\r\n    modalContent.style.alignItems = \"stretch\";\r\n    modalContent.style.width = \"100%\";\r\n    modalContent.style.gap = window.innerWidth < 600 ? \"12px\" : \"0\";\r\n    contentEl.appendChild(modalContent);\r\n    // Mood section\r\n    const moodSection = document.createElement(\"div\");\r\n    moodSection.className = \"mood-section\";\r\n    moodSection.style.flex = \"1 1 0\";\r\n    moodSection.style.overflowY = \"auto\";\r\n    moodSection.style.marginRight = window.innerWidth < 600 ? \"0\" : \"32px\";\r\n    moodSection.style.borderRadius = \"8px\";\r\n    moodSection.style.display = \"flex\";\r\n    moodSection.style.flexDirection = \"column\";\r\n    moodSection.style.minWidth = window.innerWidth < 600 ? \"0\" : \"260px\";\r\n    moodSection.style.width = window.innerWidth < 600 ? \"100%\" : \"\";\r\n    moodSection.style.padding = \"12px\";\r\n    modalContent.appendChild(moodSection);\r\n    // Create grid and detail containers for modal\r\n    const sectionGrid = document.createElement(\"div\");\r\n    sectionGrid.className = \"mood-menu-grid\";\r\n    sectionGrid.style.padding = \"12px\";\r\n    const sectionDetail = document.createElement(\"div\");\r\n    sectionDetail.className = \"mood-menu-section-detail\";\r\n    sectionDetail.style.padding = \"12px\";\r\n    // Render mood menu directly into sectionGrid/sectionDetail (not nested in mood-menu-inline)\r\n    const moodMenu = new MoodMenu(this.app, this.moods, (mood) => {\r\n      this.selectedMood = mood;\r\n    });\r\n    moodMenu.renderInline(\r\n      moodSection, // container (not used for modal, just for inline)\r\n      (mood) => {\r\n        this.selectedMood = mood;\r\n      },\r\n      true, // showBackButton: ensure back button is present in modal\r\n      sectionGrid,\r\n      sectionDetail\r\n    );\r\n    moodSection.appendChild(sectionGrid);\r\n    moodSection.appendChild(sectionDetail);\r\n    // Energy section\r\n    const energySection = document.createElement(\"div\");\r\n    energySection.className = \"energy-section\";\r\n    energySection.style.display = \"flex\";\r\n    energySection.style.flexDirection = \"column\";\r\n    energySection.style.alignItems = \"center\";\r\n    energySection.style.justifyContent = \"flex-start\";\r\n    energySection.style.width = window.innerWidth < 600 ? \"100%\" : \"320px\";\r\n    // Slider label\r\n    const sliderLabel = document.createElement(\"label\");\r\n    sliderLabel.innerText = \"Energy Level\";\r\n    sliderLabel.style.marginBottom = \"8px\";\r\n    sliderLabel.style.fontWeight = \"bold\";\r\n    sliderLabel.style.color = \"var(--text-normal)\";\r\n    sliderLabel.setAttribute(\"for\", \"energy-slider\");\r\n    sliderLabel.className = \"energy-slider-label\";\r\n    energySection.appendChild(sliderLabel);\r\n    // Slider\r\n    const slider = document.createElement(\"input\");\r\n    slider.type = \"range\";\r\n    slider.min = \"0\";\r\n    slider.max = \"100\";\r\n    slider.value = this.selectedEnergy.toString();\r\n    slider.className = \"slider energy-slider\";\r\n    slider.id = \"energy-slider\";\r\n    slider.setAttribute(\"aria-label\", \"Energy Level\");\r\n    slider.style.width = \"220px\";\r\n    energySection.appendChild(slider);\r\n    // Preview\r\n    const preview = document.createElement(\"div\");\r\n    preview.className = \"energy-preview\";\r\n    preview.style.marginTop = \"8px\";\r\n    preview.style.fontFamily = \"monospace\";\r\n    preview.style.fontSize = \"1.2em\";\r\n    preview.setAttribute(\"aria-live\", \"polite\");\r\n    energySection.appendChild(preview);\r\n    // Update preview\r\n    const updatePreview = () => {\r\n      const settings = this.plugin?.settings || {};\r\n      let output = `${this.selectedEnergy}`;\r\n      if (settings.energyDisplay === \"percent\") {\r\n        output = `${this.selectedEnergy}%`;\r\n      } else if (settings.energyDisplay === \"bar\") {\r\n        output = settings.energyOnlyFormat?.replace(\r\n          \"{value}\",\r\n          formatBarIcons(settings.barIcons, this.selectedEnergy, settings.barIconCount)\r\n        ) || `${this.selectedEnergy}`;\r\n      }\r\n      preview.innerText = output;\r\n    };\r\n    slider.oninput = () => {\r\n      this.selectedEnergy = parseInt(slider.value);\r\n      updatePreview();\r\n    };\r\n    updatePreview();\r\n    // Action buttons\r\n    const buttonRow = document.createElement(\"div\");\r\n    buttonRow.style.display = \"flex\";\r\n    buttonRow.style.gap = \"12px\";\r\n    buttonRow.style.marginTop = \"18px\";\r\n    buttonRow.style.justifyContent = \"center\";\r\n    buttonRow.style.width = \"100%\";\r\n    // Okay\r\n    const okBtn = document.createElement(\"button\");\r\n    okBtn.innerText = \"Okay\";\r\n    okBtn.className = \"mod-cta okay-btn\";\r\n    okBtn.type = \"button\";\r\n    okBtn.tabIndex = 0;\r\n    okBtn.style.outline = \"none\";\r\n    okBtn.removeAttribute(\"title\");\r\n    okBtn.onclick = () => {\r\n      const moodToSubmit = this.selectedMood ?? \"\";\r\n      if (this.selectedEnergy !== null) {\r\n        this.onSubmit(moodToSubmit, this.selectedEnergy);\r\n      }\r\n      this.close();\r\n    };\r\n    buttonRow.appendChild(okBtn);\r\n    // Cancel\r\n    const cancelBtn = document.createElement(\"button\");\r\n    cancelBtn.innerText = \"Cancel\";\r\n    cancelBtn.className = \"mod-cta cancel-btn\";\r\n    cancelBtn.type = \"button\";\r\n    cancelBtn.tabIndex = 0;\r\n    cancelBtn.style.outline = \"none\";\r\n    cancelBtn.removeAttribute(\"title\");\r\n    cancelBtn.onclick = () => this.close();\r\n    buttonRow.appendChild(cancelBtn);\r\n    energySection.appendChild(buttonRow);\r\n    modalContent.appendChild(energySection);\r\n  }\r\n\r\n  onClose() {\r\n    this.contentEl.empty();\r\n  }\r\n}\r\n\r\n/**\r\n * Opens the Mood & Energy modal. If onSubmit is provided, it will be called with (mood, energy) when Okay is pressed.\r\n * Otherwise, returns a promise that resolves when the modal closes (legacy usage).\r\n */\r\nexport async function showMoodAndEnergyModal(plugin: any, onSubmit?: (mood: string, energy: number) => void) {\r\n  const moods = await loadMoodsFromFile(plugin.app.vault, plugin.settings.moodsFilePath);\r\n  if (onSubmit) {\r\n    const modal = new MoodEnergy(plugin.app, plugin, moods, onSubmit);\r\n    modal.open();\r\n    return;\r\n  }\r\n  return new Promise<void>((resolve) => {\r\n    const modal = new MoodEnergy(plugin.app, plugin, moods, () => resolve());\r\n    modal.open();\r\n  });\r\n}\r\n"],
  "mappings": "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",
  "names": ["main_exports", "__export", "MoodEnergyPlugin", "__toCommonJS", "import_obsidian", "DEFAULT_SETTINGS", "import_obsidian", "FilePathSuggester", "inputEl", "app", "lastSuggestions", "dropdown", "selectedIdx", "items", "highlightClass", "style", "closeDropdown", "openDropdown", "suggestions", "rect", "s", "idx", "item", "setHighlight", "e", "el", "i", "query", "path", "loadMoodsFromFile", "vault", "filePath", "DEFAULT_MOODS", "file", "lines", "i", "l", "e", "MoodEnergySettingTab", "app", "plugin", "containerEl", "text", "value", "FilePathSuggester", "dropdown", "num", "toggle", "import_obsidian", "import_obsidian", "MoodMenu", "_MoodMenu", "app", "moods", "onSelect", "style", "contentEl", "modalEl", "header", "title", "sectionGrid", "sectionDetail", "menuContainer", "mood", "buttonRow", "cancelButton", "root", "currentSection", "sectionStack", "line", "match", "level", "name", "parent", "newSection", "container", "showBackButton", "getCustomColumns", "itemCount", "backButton", "renderSection", "section", "sortedSections", "a", "b", "sortedMoods", "items", "columns", "rows", "columnsArr", "i", "row", "col", "item", "sectionCell", "sectionLabel", "moodButton", "btn", "childGrid", "child", "divider", "moodsGrid", "moodCount", "currentOpenModal", "formatBarIcons", "barIcons", "value", "iconCount", "levels", "percent", "bar", "i", "iconPercent", "rel", "iconLevel", "import_obsidian", "EnergySlider", "app", "plugin", "onSubmit", "initialValue", "style", "contentEl", "modalEl", "header", "title", "slider", "preview", "updatePreview", "settings", "output", "formatBarIcons", "buttonRow", "okBtn", "cancelBtn", "import_obsidian", "MoodEnergy", "app", "plugin", "moods", "onSubmit", "style", "contentEl", "modalEl", "header", "title", "modalContent", "moodSection", "sectionGrid", "sectionDetail", "MoodMenu", "mood", "energySection", "sliderLabel", "slider", "preview", "updatePreview", "settings", "output", "formatBarIcons", "buttonRow", "okBtn", "moodToSubmit", "cancelBtn", "showMoodAndEnergyModal", "loadMoodsFromFile", "resolve", "insertMood", "plugin", "moods", "loadMoodsFromFile", "resolve", "MoodMenu", "selectedMood", "editor", "output", "insertEnergy", "EnergySlider", "selectedEnergyLevel", "settings", "formatBarIcons", "insertMoodAndEnergy", "showMoodAndEnergyModal", "selectedEnergy", "energyStr", "moodStr", "registerCommands", "canRunCommand", "currentOpenModal", "MoodEnergyPlugin", "app", "manifest", "DEFAULT_SETTINGS", "icon", "closeOpenModal", "modal", "closeBtn", "moodIcon", "editor", "insertMood", "energyIcon", "insertEnergy", "combinedIcon", "insertMoodAndEnergy", "MoodEnergySettingTab", "registerCommands"]
}
