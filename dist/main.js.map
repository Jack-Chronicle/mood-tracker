{
  "version": 3,
  "sources": ["../src/main.ts", "../src/types/index.ts", "../src/commands.ts", "../src/moodMenu.ts", "../src/energySlider.ts"],
  "sourcesContent": ["// main.ts\r\n// Main plugin entry point for the Mood & Energy Obsidian plugin.\r\n\r\nimport { Plugin } from \"obsidian\";\r\nimport { MoodEnergyPluginSettings, DEFAULT_SETTINGS, MoodEnergySettingTab } from \"./types\";\r\nimport { registerCommands } from \"./commands\";\r\n\r\n/**\r\n * Main plugin class for Mood & Energy tracking in Obsidian.\r\n */\r\nexport default class MoodEnergyPlugin extends Plugin {\r\n  settings: MoodEnergyPluginSettings;\r\n  settingTab: MoodEnergySettingTab | null = null;\r\n\r\n  constructor(app: any, manifest: any) {\r\n    super(app, manifest);\r\n    this.settings = DEFAULT_SETTINGS;\r\n  }\r\n\r\n  /**\r\n   * Loads settings and registers commands on plugin load.\r\n   */\r\n  async onload() {\r\n    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData?.());\r\n    this.addSettingTab(new MoodEnergySettingTab(this.app, this));\r\n    registerCommands(this);\r\n  }\r\n\r\n  /**\r\n   * Saves plugin settings to disk.\r\n   */\r\n  async saveSettings() {\r\n    await this.saveData?.(this.settings);\r\n  }\r\n\r\n  /**\r\n   * Cleans up on plugin unload.\r\n   */\r\n  onunload() {\r\n    // No special cleanup\r\n  }\r\n}\r\n", "// types/index.ts\r\n// Type definitions, settings, utilities, and modal management for the Mood & Energy Obsidian plugin.\r\n\r\nimport { PluginSettingTab, Setting, TFile, normalizePath, App, SuggestModal, TextComponent } from \"obsidian\";\r\n\r\n/**\r\n * Interface for plugin settings.\r\n */\r\nexport interface MoodEnergyPluginSettings {\r\n  moodsFilePath: string;\r\n  energyDisplay: \"text\" | \"percent\" | \"bar\";\r\n  energyFormat: string;\r\n  barIcons: string; // e.g. '\u28FF\u28F7\u28F6\u28E6\u28E4\u28C4\u28C0' or '\u2588\u2593\u2592\u2591'\r\n  barIconCount: number; // number of icons in the bar\r\n  energyOnlyFormat: string;\r\n  moodOnlyFormat: string;\r\n  moodAndEnergyFormat: string;\r\n}\r\n\r\n/**\r\n * Default settings for the plugin.\r\n */\r\nexport const DEFAULT_SETTINGS: MoodEnergyPluginSettings = {\r\n  moodsFilePath: \"moods.txt\",\r\n  energyDisplay: \"bar\",\r\n  energyFormat: \"Energy: {value}\",\r\n  barIcons: \"\u28FF\u28F7\u28F6\u28E6\u28E4\u28C4\u28C0\", // Default: 7 levels\r\n  barIconCount: 7,\r\n  energyOnlyFormat: \"Energy: {value}\",\r\n  moodOnlyFormat: \"{value}\",\r\n  moodAndEnergyFormat: \"{mood} | {energy}\"\r\n};\r\n\r\n/**\r\n * Formats a progress bar using a string of icons and a value.\r\n * @param barIcons - String of icons from full to empty.\r\n * @param value - Value from 0 to 100.\r\n * @param iconCount - Number of icons to display.\r\n * @returns The formatted bar string.\r\n */\r\nexport function formatBarIcons(barIcons: string, value: number, iconCount: number): string {\r\n  if (!barIcons || barIcons.length < 2 || iconCount < 1) return value.toString();\r\n  const levels = barIcons.length;\r\n  const percent = Math.max(0, Math.min(100, value));\r\n  let bar = \"\";\r\n  for (let i = 0; i < iconCount; i++) {\r\n    // For each icon, determine how full it should be\r\n    const iconPercent = 100 * (i + 1) / iconCount;\r\n    const rel = percent - (100 * i / iconCount);\r\n    let iconLevel = Math.round((1 - rel / (100 / iconCount)) * (levels - 1));\r\n    if (percent >= iconPercent) iconLevel = 0; // full\r\n    else if (percent <= 100 * i / iconCount) iconLevel = levels - 1; // empty\r\n    iconLevel = Math.max(0, Math.min(levels - 1, iconLevel));\r\n    bar += barIcons[iconLevel];\r\n  }\r\n  return bar;\r\n}\r\n\r\n// --- Modal Management Utility ---\r\n/**\r\n * Tracks the currently open modal (if any).\r\n */\r\nexport let currentOpenModal: HTMLElement | null = null;\r\n\r\n/**\r\n * Opens a modal, ensuring only one is open at a time.\r\n * @param modalEl - The modal element to open.\r\n */\r\nexport function openModal(modalEl: HTMLElement) {\r\n  if (currentOpenModal && currentOpenModal !== modalEl) {\r\n    currentOpenModal.remove();\r\n  }\r\n  currentOpenModal = modalEl;\r\n  document.body.appendChild(modalEl);\r\n}\r\n\r\n/**\r\n * Closes a modal and clears the currentOpenModal reference.\r\n * @param modalEl - The modal element to close.\r\n */\r\nexport function closeModal(modalEl: HTMLElement) {\r\n  if (currentOpenModal === modalEl) {\r\n    modalEl.remove();\r\n    currentOpenModal = null;\r\n  } else {\r\n    modalEl.remove();\r\n  }\r\n}\r\n\r\n/**\r\n * Modal for suggesting file paths for moods file setting.\r\n */\r\nexport class MoodFileSuggestModal extends SuggestModal<string> {\r\n  plugin: any;\r\n  constructor(app: App, plugin: any) {\r\n    super(app);\r\n    this.plugin = plugin;\r\n  }\r\n  getSuggestions(query: string): string[] {\r\n    const files = this.app.vault.getFiles();\r\n    return files\r\n      .map(f => f.path)\r\n      .filter(path => path.toLowerCase().includes(query.toLowerCase()));\r\n  }\r\n  renderSuggestion(value: string, el: HTMLElement) {\r\n    el.setText(value);\r\n  }\r\n  onChooseSuggestion(value: string) {\r\n    this.plugin.settings.moodsFilePath = value;\r\n    this.plugin.saveSettings();\r\n    if (this.plugin.settingTab?.display) this.plugin.settingTab.display();\r\n  }\r\n}\r\n\r\n/**\r\n * Inline file path suggester for settings tab.\r\n */\r\nexport class FilePathSuggester {\r\n  constructor(inputEl: HTMLInputElement, app: App) {\r\n    let lastSuggestions: string[] = [];\r\n    let dropdown: HTMLDivElement | null = null;\r\n    let selectedIdx: number = -1;\r\n    let items: HTMLDivElement[] = [];\r\n    const highlightClass = \"file-path-suggester-highlight\";\r\n    // Add style for highlight and dropdown\r\n    if (!document.getElementById(\"file-path-suggester-style\")) {\r\n      const style = document.createElement(\"style\");\r\n      style.id = \"file-path-suggester-style\";\r\n      style.textContent = `\r\n        .file-path-suggester-dropdown {\r\n          background: var(--background-secondary);\r\n          border: 1px solid var(--background-modifier-border);\r\n          color: var(--text-normal);\r\n          box-shadow: 0 2px 8px var(--background-modifier-box-shadow);\r\n          border-radius: var(--radius-m);\r\n          font-size: var(--font-ui-medium);\r\n          padding: 4px 0;\r\n        }\r\n        .file-path-suggester-dropdown div {\r\n          padding: 4px 12px;\r\n          cursor: pointer;\r\n          border-radius: var(--radius-s);\r\n        }\r\n        .file-path-suggester-dropdown div:hover,\r\n        .file-path-suggester-highlight {\r\n          background: var(--background-modifier-hover);\r\n          color: var(--text-accent);\r\n        }\r\n      `;\r\n      document.head.appendChild(style);\r\n    }\r\n    function closeDropdown() {\r\n      if (dropdown) closeModal(dropdown);\r\n      dropdown = null;\r\n      items = [];\r\n      selectedIdx = -1;\r\n    }\r\n    function openDropdown(suggestions: string[]) {\r\n      closeDropdown();\r\n      if (!suggestions.length) return;\r\n      dropdown = document.createElement(\"div\");\r\n      dropdown.className = \"file-path-suggester-dropdown\";\r\n      dropdown.style.position = \"absolute\";\r\n      dropdown.style.zIndex = \"9999\";\r\n      dropdown.style.maxHeight = \"200px\";\r\n      dropdown.style.overflowY = \"auto\";\r\n      dropdown.style.width = inputEl.offsetWidth + \"px\";\r\n      const rect = inputEl.getBoundingClientRect();\r\n      dropdown.style.left = rect.left + window.scrollX + \"px\";\r\n      dropdown.style.top = (rect.bottom + window.scrollY) + \"px\";\r\n      suggestions.forEach((s, idx) => {\r\n        const item = document.createElement(\"div\");\r\n        item.textContent = s;\r\n        item.tabIndex = -1;\r\n        item.onmouseenter = () => {\r\n          setHighlight(idx);\r\n        };\r\n        item.onmouseleave = () => {\r\n          setHighlight(-1);\r\n        };\r\n        item.onmousedown = (e) => {\r\n          e.preventDefault();\r\n          inputEl.value = s;\r\n          inputEl.dispatchEvent(new Event(\"input\"));\r\n          closeDropdown();\r\n        };\r\n        dropdown!.appendChild(item);\r\n        items.push(item);\r\n      });\r\n      openModal(dropdown);\r\n    }\r\n    function setHighlight(idx: number) {\r\n      items.forEach((el, i) => {\r\n        if (i === idx) el.classList.add(highlightClass);\r\n        else el.classList.remove(highlightClass);\r\n      });\r\n      selectedIdx = idx;\r\n    }\r\n    inputEl.addEventListener(\"input\", () => {\r\n      const query = inputEl.value.toLowerCase();\r\n      const files = app.vault.getFiles();\r\n      const suggestions = files\r\n        .map(f => f.path)\r\n        .filter(path => path.toLowerCase().includes(query))\r\n        .slice(0, 20);\r\n      lastSuggestions = suggestions;\r\n      openDropdown(suggestions);\r\n    });\r\n    inputEl.addEventListener(\"keydown\", (e) => {\r\n      if (!dropdown || !items.length) return;\r\n      if (e.key === \"ArrowDown\") {\r\n        e.preventDefault();\r\n        setHighlight((selectedIdx + 1) % items.length);\r\n        items[selectedIdx]?.scrollIntoView({ block: \"nearest\" });\r\n      } else if (e.key === \"ArrowUp\") {\r\n        e.preventDefault();\r\n        setHighlight((selectedIdx - 1 + items.length) % items.length);\r\n        items[selectedIdx]?.scrollIntoView({ block: \"nearest\" });\r\n      } else if (e.key === \"Enter\") {\r\n        if (selectedIdx >= 0 && selectedIdx < items.length) {\r\n          inputEl.value = lastSuggestions[selectedIdx];\r\n          inputEl.dispatchEvent(new Event(\"input\"));\r\n          closeDropdown();\r\n          e.preventDefault();\r\n        }\r\n      } else if (e.key === \"Escape\") {\r\n        closeDropdown();\r\n      }\r\n    });\r\n    inputEl.addEventListener(\"blur\", () => setTimeout(closeDropdown, 100));\r\n  }\r\n}\r\n\r\n/**\r\n * Settings tab for the plugin.\r\n */\r\nexport class MoodEnergySettingTab extends PluginSettingTab {\r\n  plugin: any;\r\n  constructor(app: any, plugin: any) {\r\n    super(app, plugin);\r\n    this.plugin = plugin;\r\n    plugin.settingTab = this;\r\n  }\r\n  display(): void {\r\n    const { containerEl } = this;\r\n    containerEl.empty();\r\n    containerEl.createEl(\"h2\", { text: \"Mood & Energy Plugin Settings\" });\r\n    containerEl.createEl(\"h3\", { text: \"Mood Settings\" });\r\n    new Setting(containerEl)\r\n      .setName(\"Moods File Path\")\r\n      .setDesc(\"Path to the file containing your moods, one per line (excluding frontmatter). Start typing to see suggestions from your vault.\")\r\n      .addText((text: TextComponent) => {\r\n        text.setPlaceholder(\"moods.txt\")\r\n          .setValue(this.plugin.settings.moodsFilePath)\r\n          .onChange(async (value) => {\r\n            this.plugin.settings.moodsFilePath = value;\r\n            await this.plugin.saveSettings();\r\n          });\r\n        // Attach inline file path suggester\r\n        setTimeout(() => new FilePathSuggester(text.inputEl, this.app), 0);\r\n      });\r\n    containerEl.createEl(\"h3\", { text: \"Energy Settings\" });\r\n    new Setting(containerEl)\r\n      .setName(\"Energy Display\")\r\n      .setDesc(\"How to display the energy value: as text, percent, or a progress bar.\")\r\n      .addDropdown((dropdown) =>\r\n        dropdown\r\n          .addOption(\"text\", \"Text\")\r\n          .addOption(\"percent\", \"Percent\")\r\n          .addOption(\"bar\", \"Progress Bar\")\r\n          .setValue(this.plugin.settings.energyDisplay)\r\n          .onChange(async (value) => {\r\n            this.plugin.settings.energyDisplay = value;\r\n            await this.plugin.saveSettings();\r\n            this.display();\r\n          })\r\n      );\r\n    if (this.plugin.settings.energyDisplay === \"bar\") {\r\n      new Setting(containerEl)\r\n        .setName(\"Bar Icons\")\r\n        .setDesc(\"Icons for the progress bar, from full to empty (e.g. \u28FF\u28F7\u28F6\u28E6\u28E4\u28C4\u28C0 or \u2588\u2593\u2592\u2591)\")\r\n        .addText((text) =>\r\n          text\r\n            .setPlaceholder(\"\u28FF\u28F7\u28F6\u28E6\u28E4\u28C4\u28C0\")\r\n            .setValue(this.plugin.settings.barIcons)\r\n            .onChange(async (value) => {\r\n              this.plugin.settings.barIcons = value;\r\n              await this.plugin.saveSettings();\r\n            })\r\n        );\r\n      new Setting(containerEl)\r\n        .setName(\"Bar Icon Count\")\r\n        .setDesc(\"Number of icons in the progress bar (e.g. 5, 7, 10, 20)\")\r\n        .addText((text) =>\r\n          text\r\n            .setPlaceholder(\"7\")\r\n            .setValue(this.plugin.settings.barIconCount.toString())\r\n            .onChange(async (value) => {\r\n              const num = parseInt(value);\r\n              if (!isNaN(num) && num > 0) {\r\n                this.plugin.settings.barIconCount = num;\r\n                await this.plugin.saveSettings();\r\n              }\r\n            })\r\n        );\r\n    }\r\n    containerEl.createEl(\"h3\", { text: \"Output Format Settings\" });\r\n    new Setting(containerEl)\r\n      .setName(\"Energy Only Output Format\")\r\n      .setDesc(\"Format for energy only output. Use {value} for the energy bar/number.\")\r\n      .addText((text) =>\r\n        text\r\n          .setPlaceholder(\"Energy: {value}\")\r\n          .setValue(this.plugin.settings.energyOnlyFormat)\r\n          .onChange(async (value) => {\r\n            this.plugin.settings.energyOnlyFormat = value;\r\n            await this.plugin.saveSettings();\r\n          })\r\n      );\r\n    new Setting(containerEl)\r\n      .setName(\"Mood Only Output Format\")\r\n      .setDesc(\"Format for mood only output. Use {value} for the mood.\")\r\n      .addText((text) =>\r\n        text\r\n          .setPlaceholder(\"{value}\")\r\n          .setValue(this.plugin.settings.moodOnlyFormat)\r\n          .onChange(async (value) => {\r\n            this.plugin.settings.moodOnlyFormat = value;\r\n            await this.plugin.saveSettings();\r\n          })\r\n      );\r\n    new Setting(containerEl)\r\n      .setName(\"Mood + Energy Output Format\")\r\n      .setDesc(\"Format for mood + energy output. Use {mood} and {energy}.\")\r\n      .addText((text) =>\r\n        text\r\n          .setPlaceholder(\"{mood} | {energy}\")\r\n          .setValue(this.plugin.settings.moodAndEnergyFormat)\r\n          .onChange(async (value) => {\r\n            this.plugin.settings.moodAndEnergyFormat = value;\r\n            await this.plugin.saveSettings();\r\n          })\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Loads moods from a file in the vault, skipping frontmatter if present.\r\n * @param vault - The Obsidian vault instance.\r\n * @param filePath - Path to the moods file.\r\n * @returns Array of mood strings.\r\n */\r\nexport async function loadMoodsFromFile(vault: any, filePath: string): Promise<string[]> {\r\n  try {\r\n    const file = vault.getAbstractFileByPath(normalizePath(filePath));\r\n    if (file instanceof TFile) {\r\n      const content = await vault.read(file);\r\n      let lines = content.split(/\\r?\\n/);\r\n      if (lines[0].trim() === \"---\") {\r\n        let i = 1;\r\n        while (i < lines.length && lines[i].trim() !== \"---\") i++;\r\n        lines = lines.slice(i + 1);\r\n      }\r\n      return lines\r\n        .map((l: string) => l.replace(/<\\/?[a-zA-Z][^>]*>/g, \"\").trim())\r\n        .filter((l: string) => l.length > 0);\r\n    }\r\n  } catch (e) {\r\n    console.error(\"Failed to load moods file:\", e);\r\n  }\r\n  return [];\r\n}\r\n", "// commands.ts\r\n// Command registration and modal logic for the Mood & Energy Obsidian plugin.\r\n\r\nimport { MarkdownView } from \"obsidian\";\r\nimport { MoodMenu } from \"./moodMenu\";\r\nimport { EnergySlider } from \"./energySlider\";\r\nimport { loadMoodsFromFile, formatBarIcons, openModal, closeModal, currentOpenModal } from \"./types\";\r\n\r\n/**\r\n * Shows a combined modal for selecting both mood and energy, then inserts the formatted result into the editor.\r\n * @param plugin - The plugin instance.\r\n */\r\nexport function showMoodAndEnergyModal(plugin: any) {\r\n  const modal = document.createElement(\"div\");\r\n  modal.className = \"mood-energy-modal\";\r\n  modal.style.position = \"fixed\";\r\n  modal.style.top = \"50%\";\r\n  modal.style.left = \"50%\";\r\n  modal.style.transform = \"translate(-50%, -50%)\";\r\n  modal.style.background = \"var(--background-secondary)\";\r\n  modal.style.padding = \"24px\";\r\n  modal.style.borderRadius = \"var(--radius-m)\";\r\n  modal.style.zIndex = \"9999\";\r\n  modal.style.display = \"flex\";\r\n  modal.style.flexDirection = window.innerWidth < 600 ? \"column\" : \"row\";\r\n  modal.style.alignItems = \"stretch\";\r\n  modal.style.boxShadow = \"0 4px 32px var(--background-modifier-box-shadow)\";\r\n  modal.style.maxHeight = window.innerWidth < 600 ? \"98vh\" : \"80vh\";\r\n  modal.style.overflow = \"visible\";\r\n  modal.style.width = window.innerWidth < 600 ? \"98vw\" : \"min(900px, 98vw)\";\r\n  modal.style.minWidth = window.innerWidth < 600 ? \"0\" : \"340px\";\r\n  modal.style.maxWidth = \"98vw\";\r\n  modal.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n    if (window.innerWidth < 600) {\r\n    modal.style.width = \"98vw\";\r\n    modal.style.minWidth = \"0\";\r\n    modal.style.maxHeight = \"98vh\";\r\n    modal.style.padding = \"8px\";\r\n    modal.style.margin = \"0\";\r\n  }\r\n  const moodContainer = document.createElement(\"div\");\r\n  moodContainer.style.flex = \"1 1 0\";\r\n  moodContainer.style.overflowY = \"auto\";\r\n  moodContainer.style.maxHeight = \"calc(80vh - 24px)\";\r\n  moodContainer.style.marginRight = \"32px\";\r\n  moodContainer.style.background = \"var(--background-modifier-hover, rgba(255,255,255,0.01))\";\r\n  moodContainer.style.borderRadius = \"8px\";\r\n  moodContainer.style.padding = \"0 0 0 0\";\r\n  moodContainer.style.display = \"flex\";\r\n  moodContainer.style.flexDirection = \"column\";\r\n  moodContainer.style.minWidth = window.innerWidth < 600 ? \"0\" : \"260px\";\r\n    if (window.innerWidth < 600) {\r\n      moodContainer.style.marginRight = \"0\";\r\n      moodContainer.style.maxHeight = \"none\";\r\n      moodContainer.style.padding = \"0\";\r\n      moodContainer.style.width = \"100%\"; // <-- Use 100% so it fits inside modal padding\r\n      moodContainer.style.flex = \"1 1 auto\";\r\n    }\r\n  const controlsContainer = document.createElement(\"div\");\r\n  controlsContainer.style.display = \"flex\";\r\n  controlsContainer.style.flexDirection = \"column\";\r\n  controlsContainer.style.alignItems = \"center\";\r\n  controlsContainer.style.justifyContent = \"flex-start\";\r\n  controlsContainer.style.width = window.innerWidth < 600 ? \"100%\" : \"320px\";\r\n  controlsContainer.style.minWidth = window.innerWidth < 600 ? \"0\" : \"220px\";\r\n  controlsContainer.style.maxWidth = window.innerWidth < 600 ? \"100vw\" : \"340px\";\r\n  controlsContainer.style.background = \"var(--background-modifier-hover)\";\r\n  controlsContainer.style.borderRadius = \"var(--radius-m)\";\r\n  controlsContainer.style.padding = window.innerWidth < 600 ? \"12px\" : \"18px 18px 18px 18px\";\r\n  controlsContainer.style.boxSizing = \"border-box\";\r\n  controlsContainer.style.height = \"100%\";\r\n    if (window.innerWidth < 600) {\r\n    controlsContainer.style.padding = \"12px 6px\";\r\n    controlsContainer.style.minWidth = \"0\";\r\n    controlsContainer.style.maxWidth = \"100vw\";\r\n  }\r\n  const sliderLabel = document.createElement(\"div\");\r\n  sliderLabel.innerText = \"Energy Level:\";\r\n  sliderLabel.style.color = \"var(--text-normal, #fff)\";\r\n  sliderLabel.style.marginBottom = \"8px\";\r\n  const slider = document.createElement(\"input\");\r\n  slider.type = \"range\";\r\n  slider.min = \"0\";\r\n  slider.max = \"100\";\r\n  slider.value = \"50\";\r\n  slider.style.width = \"220px\";\r\n    if (window.innerWidth < 600) {\r\n    slider.style.width = \"90vw\";\r\n  }\r\n  const sliderValue = document.createElement(\"div\");\r\n  sliderValue.innerText = \"50\";\r\n  sliderValue.style.color = \"var(--text-normal, #fff)\";\r\n  sliderValue.style.marginTop = \"8px\";\r\n  const preview = document.createElement(\"div\");\r\n  preview.style.marginTop = \"8px\";\r\n  preview.style.color = \"var(--text-normal, #fff)\";\r\n  preview.style.fontFamily = \"monospace\";\r\n  preview.style.fontSize = \"1.2em\";\r\n  const updatePreview = () => {\r\n    const settings = plugin.settings;\r\n    let output = \"\";\r\n    const value = parseInt(slider.value);\r\n    if (settings.energyDisplay === \"percent\") {\r\n      output = settings.energyOnlyFormat.replace(\"{value}\", `${value}%`);\r\n    } else if (settings.energyDisplay === \"bar\") {\r\n      output = settings.energyOnlyFormat.replace(\"{value}\", formatBarIcons(settings.barIcons, value, settings.barIconCount));\r\n    } else {\r\n      output = settings.energyOnlyFormat.replace(\"{value}\", `${value}`);\r\n    }\r\n    preview.innerText = output;\r\n  };\r\n  slider.oninput = () => {\r\n    sliderValue.innerText = slider.value;\r\n    updatePreview();\r\n  };\r\n  controlsContainer.appendChild(sliderLabel);\r\n  controlsContainer.appendChild(slider);\r\n  controlsContainer.appendChild(sliderValue);\r\n  controlsContainer.appendChild(preview);\r\n  updatePreview();\r\n  const buttonRow = document.createElement(\"div\");\r\n  buttonRow.style.display = \"flex\";\r\n  buttonRow.style.gap = \"12px\";\r\n  buttonRow.style.marginTop = \"18px\";\r\n  buttonRow.style.justifyContent = \"center\";\r\n  buttonRow.style.width = \"100%\";\r\n  const okayButton = document.createElement(\"button\");\r\n  okayButton.innerText = \"Okay\";\r\n  okayButton.className = \"mod-cta\";\r\n  okayButton.style.padding = \"var(--size-4-2) var(--size-4-4)\";\r\n  okayButton.style.borderRadius = \"var(--radius-s)\";\r\n  okayButton.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n  okayButton.style.background = \"var(--interactive-accent)\";\r\n  okayButton.style.color = \"var(--text-on-accent)\";\r\n  okayButton.style.fontWeight = \"bold\";\r\n  okayButton.style.cursor = \"pointer\";\r\n    if (window.innerWidth < 600) {\r\n    okayButton.style.fontSize = \"1.2em\";\r\n    okayButton.style.padding = \"18px\";\r\n  }\r\n  const cancelButton = document.createElement(\"button\");\r\n  cancelButton.innerText = \"Cancel\";\r\n  cancelButton.className = \"mod-cta\";\r\n  cancelButton.style.padding = \"var(--size-4-2) var(--size-4-4)\";\r\n  cancelButton.style.borderRadius = \"var(--radius-s)\";\r\n  cancelButton.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n  cancelButton.style.background = \"var(--background-modifier-hover)\";\r\n  cancelButton.style.color = \"var(--color-red)\";\r\n  cancelButton.style.fontWeight = \"bold\";\r\n  cancelButton.style.cursor = \"pointer\";\r\n  buttonRow.appendChild(okayButton);\r\n  buttonRow.appendChild(cancelButton);\r\n  controlsContainer.appendChild(buttonRow);\r\n  let selectedMood: string | null = null;\r\n  let selectedMoodButton: HTMLButtonElement | null = null;\r\n  let moods: string[] = [];\r\n    if (window.innerWidth < 600) {\r\n    cancelButton.style.fontSize = \"1.2em\";\r\n    cancelButton.style.padding = \"18px\";\r\n  }\r\n  const moodSectionGrid = document.createElement(\"div\");\r\n  moodSectionGrid.style.display = \"grid\";\r\n  moodSectionGrid.style.gridTemplateColumns = \"repeat(auto-fit, minmax(180px, 1fr))\";\r\n  moodSectionGrid.style.gap = \"18px\";\r\n  moodSectionGrid.style.width = \"100%\";\r\n  moodSectionGrid.style.minHeight = \"120px\"; // Prevents collapse if empty\r\n  moodSectionGrid.style.boxSizing = \"border-box\";\r\n  moodSectionGrid.style.marginBottom = \"18px\";\r\n  const moodSectionDetail = document.createElement(\"div\");\r\n  moodSectionDetail.style.display = \"none\";\r\n  moodSectionDetail.style.flexDirection = \"column\";\r\n  moodSectionDetail.style.alignItems = \"stretch\";\r\n  moodSectionDetail.style.width = \"100%\";\r\n  moodSectionDetail.style.marginBottom = \"18px\";\r\n  const backButton = document.createElement(\"button\");\r\n  backButton.innerText = \"\\u2190 Back\";\r\n  backButton.style.margin = \"12px 0\";\r\n  backButton.style.padding = window.innerWidth < 600 ? \"10px 18px\" : \"6px 16px\";\r\n  backButton.style.borderRadius = \"8px\";\r\n  backButton.style.border = \"none\";\r\n  backButton.style.background = \"var(--background-modifier-hover, #444)\";\r\n  backButton.style.color = \"var(--text-normal, #fff)\";\r\n  backButton.style.fontWeight = \"bold\";\r\n  backButton.style.fontSize = window.innerWidth < 600 ? \"1.1em\" : \"1em\";\r\n  backButton.style.lineHeight = \"1.2\";\r\n  backButton.style.height = \"auto\";\r\n  backButton.style.display = \"block\";\r\n  backButton.style.verticalAlign = \"middle\";\r\n  backButton.style.alignSelf = \"stretch\";\r\n  backButton.style.textAlign = \"left\";\r\n  backButton.onclick = () => {\r\n    moodSectionDetail.style.display = \"none\";\r\n    moodSectionGrid.style.display = \"grid\";\r\n    backButton.style.display = \"none\";\r\n  };\r\n  moodSectionDetail.appendChild(backButton);\r\n  backButton.style.display = \"none\";\r\n\r\n  // --- Nested Section/Mood Parsing and Rendering ---\r\n  loadMoodsFromFile(plugin.app.vault, plugin.settings.moodsFilePath).then((moodList: string[]) => {\r\n    moods = moodList;\r\n    // Build a tree structure for nested sections and moods\r\n    type SectionNode = {\r\n      name: string;\r\n      level: number;\r\n      moods: string[];\r\n      sections: SectionNode[];\r\n      parent?: SectionNode;\r\n    };\r\n    const root: SectionNode = { name: \"__root__\", level: 0, moods: [], sections: [] };\r\n    let currentSection: SectionNode = root;\r\n    const sectionStack: SectionNode[] = [root];\r\n    for (let line of moods) {\r\n      if (/^#+\\s/.test(line)) {\r\n        const match = line.match(/^(#+)\\s*(.*)$/);\r\n        if (!match) continue;\r\n        const level = match[1].length;\r\n        const name = match[2].trim();\r\n        // Find parent section for this level\r\n        while (sectionStack.length > 0 && sectionStack[sectionStack.length - 1].level >= level) {\r\n          sectionStack.pop();\r\n        }\r\n        const parent = sectionStack[sectionStack.length - 1];\r\n        const newSection: SectionNode = { name, level, moods: [], sections: [], parent };\r\n        parent.sections.push(newSection);\r\n        sectionStack.push(newSection);\r\n        currentSection = newSection;\r\n      } else if (line.trim().length > 0) {\r\n        currentSection.moods.push(line.replace(/^[-*]\\s*/, \"\"));\r\n      }\r\n    }\r\n    // Helper to render a section's contents in the modal\r\n    function renderSection(section: SectionNode, container: HTMLElement, detailContainer: HTMLElement, parentPath: string[] = []) {\r\n      // Clear container\r\n      container.innerHTML = \"\";\r\n    \r\n      // --- Sort sections and moods alphabetically ---\r\n      const sortedSections = [...section.sections].sort((a, b) => a.name.localeCompare(b.name));\r\n      const sortedMoods = [...section.moods].sort((a, b) => a.localeCompare(b));\r\n    \r\n      // --- Render sections first ---\r\n      sortedSections.forEach(childSection => {\r\n        const sectionCell = document.createElement(\"div\");\r\n        sectionCell.style.display = \"flex\";\r\n        sectionCell.style.flexDirection = \"column\";\r\n        sectionCell.style.alignItems = \"center\";\r\n        sectionCell.style.background = \"var(--background-modifier-hover, rgba(255,255,255,0.02))\";\r\n        sectionCell.style.borderRadius = \"8px\";\r\n        sectionCell.style.padding = \"18px 6px 18px 6px\";\r\n        sectionCell.style.boxSizing = \"border-box\";\r\n        sectionCell.style.minWidth = \"0\";\r\n        sectionCell.style.cursor = \"pointer\";\r\n        sectionCell.style.transition = \"background 0.2s\";\r\n        sectionCell.onmouseenter = () => sectionCell.style.background = \"var(--background-modifier-active-hover, rgba(80,120,255,0.08))\";\r\n        sectionCell.onmouseleave = () => sectionCell.style.background = \"var(--background-modifier-hover, rgba(255,255,255,0.02))\";\r\n        const sectionLabel = document.createElement(\"div\");\r\n        sectionLabel.innerText = childSection.name;\r\n        sectionLabel.style.fontWeight = \"bold\";\r\n        sectionLabel.style.fontSize = \"1.2rem\";\r\n        sectionLabel.style.color = \"var(--text-accent, #aaf)\";\r\n        sectionCell.appendChild(sectionLabel);\r\n        sectionCell.onclick = () => {\r\n          container.style.display = \"none\";\r\n          detailContainer.style.display = \"flex\";\r\n          backButton.style.display = \"block\";\r\n          while (detailContainer.childNodes.length > 1)\r\n            detailContainer.removeChild(detailContainer.lastChild!);\r\n          const moodsGrid = document.createElement(\"div\");\r\n          moodsGrid.style.display = \"grid\";\r\n          moodsGrid.style.gridTemplateColumns = \"repeat(auto-fit, minmax(100px, 1fr))\";\r\n          moodsGrid.style.gap = \"12px\";\r\n          moodsGrid.style.width = \"100%\";\r\n          renderSection(childSection, moodsGrid, detailContainer, [...parentPath, childSection.name]);\r\n          detailContainer.appendChild(moodsGrid);\r\n        };\r\n        container.appendChild(sectionCell);\r\n      });\r\n    \r\n      // --- Add a separator if there are both sections and moods ---\r\n      if (sortedSections.length > 0 && sortedMoods.length > 0) {\r\n        const divider = document.createElement(\"div\");\r\n        divider.style.gridColumn = \"1 / -1\";\r\n        divider.style.height = \"1px\";\r\n        divider.style.background = \"var(--background-modifier-border)\";\r\n        divider.style.margin = \"12px 0\";\r\n        container.appendChild(divider);\r\n      }\r\n    \r\n      // --- Render moods below sections ---\r\n      sortedMoods.forEach(mood => {\r\n        const moodButton = document.createElement(\"button\");\r\n        moodButton.innerText = mood;\r\n        moodButton.style.padding = \"10px 18px\";\r\n        moodButton.style.borderRadius = \"8px\";\r\n        moodButton.style.border = \"none\";\r\n        moodButton.style.background = \"var(--background-modifier-hover, #444)\";\r\n        moodButton.style.color = \"var(--text-normal, #fff)\";\r\n        moodButton.style.fontSize = \"1rem\";\r\n        moodButton.style.cursor = \"pointer\";\r\n        moodButton.onmouseenter = () => moodButton.style.background = \"var(--background-modifier-active-hover, #666)\";\r\n        moodButton.onmouseleave = () => moodButton.style.background = \"var(--background-modifier-hover, #444)\";\r\n        moodButton.onclick = () => {\r\n          selectedMood = mood;\r\n          Array.from(container.querySelectorAll(\"button\")).forEach((btn) => btn.classList.remove(\"selected-mood\"));\r\n          moodButton.classList.add(\"selected-mood\");\r\n          selectedMoodButton = moodButton;\r\n        };\r\n        container.appendChild(moodButton);\r\n      });\r\n    }\r\n    // Initial modal: show root's moods and all sections with parent=root (top-level headings)\r\n    renderSection(root, moodSectionGrid, moodSectionDetail);\r\n  });\r\n  moodContainer.appendChild(moodSectionGrid);\r\n  moodContainer.appendChild(moodSectionDetail);\r\n  const style = document.createElement(\"style\");\r\n  style.innerText = `.selected-mood { background: var(--interactive-accent) !important; color: var(--text-on-accent) !important; border: var(--input-border-width) solid var(--background-primary) !important; }`;\r\n  modal.appendChild(style);\r\n  const escListener = (e: KeyboardEvent) => {\r\n    if (e.key === \"Escape\") {\r\n      if (moodSectionDetail.style.display === \"flex\") {\r\n        moodSectionDetail.style.display = \"none\";\r\n        moodSectionGrid.style.display = \"grid\";\r\n        backButton.style.display = \"none\";\r\n      } else {\r\n        closeModal(modal);\r\n        window.removeEventListener(\"keydown\", escListener);\r\n      }\r\n    }\r\n  };\r\n  window.addEventListener(\"keydown\", escListener);\r\n  modal.appendChild(moodContainer);\r\n  modal.appendChild(controlsContainer);\r\n  openModal(modal);\r\n  okayButton.onclick = () => {\r\n    const editor = plugin.app.workspace.getActiveViewOfType(MarkdownView)?.editor;\r\n    if (editor && selectedMood) {\r\n      const settings = plugin.settings;\r\n      let energyStr = \"\";\r\n      const value = parseInt(slider.value);\r\n      if (settings.energyDisplay === \"percent\") {\r\n        energyStr = settings.energyOnlyFormat.replace(\"{value}\", `${value}%`);\r\n      } else if (settings.energyDisplay === \"bar\") {\r\n        energyStr = settings.energyOnlyFormat.replace(\"{value}\", formatBarIcons(settings.barIcons, value, settings.barIconCount));\r\n      } else {\r\n        energyStr = settings.energyOnlyFormat.replace(\"{value}\", `${value}`);\r\n      }\r\n      const format = settings.moodAndEnergyFormat || \"{mood} | {energy}\";\r\n      const output = format.replace(\"{mood}\", selectedMood).replace(\"{energy}\", energyStr);\r\n      editor.replaceSelection(output);\r\n      if (editor.focus) editor.focus();\r\n    }\r\n    closeModal(modal);\r\n  };\r\n  cancelButton.onclick = () => {\r\n    closeModal(modal);\r\n  };\r\n}\r\n\r\n/**\r\n * Registers all plugin commands and their hotkeys with Obsidian.\r\n * @param plugin - The plugin instance.\r\n */\r\nexport function registerCommands(plugin: any) {\r\n  function canRunCommand() {\r\n    // Only require that no modal is open\r\n    return !currentOpenModal;\r\n  }\r\n  plugin.addCommand({\r\n    id: \"insert-mood\",\r\n    name: \"Insert Mood\",\r\n    hotkeys: [{ modifiers: [\"Alt\"], key: \"6\" }],\r\n    callback: async () => {\r\n      if (!canRunCommand()) return;\r\n      const moods = await loadMoodsFromFile(plugin.app.vault, plugin.settings.moodsFilePath);\r\n      const moodMenu = new MoodMenu(moods);\r\n      const selectedMood = await moodMenu.open();\r\n      if (selectedMood) {\r\n        const editor = plugin.app.workspace.getActiveViewOfType(MarkdownView)?.editor;\r\n        if (editor) {\r\n          const format = plugin.settings.moodOnlyFormat || \"{value}\";\r\n          const output = format.replace(\"{value}\", selectedMood);\r\n          editor.replaceSelection(output);\r\n          if (editor.focus) editor.focus();\r\n        }\r\n      }\r\n    }\r\n  });\r\n  plugin.addCommand({\r\n    id: \"insert-energy-level\",\r\n    name: \"Insert Energy Level\",\r\n    hotkeys: [{ modifiers: [\"Alt\"], key: \"5\" }],\r\n    callback: async () => {\r\n      if (!canRunCommand()) return;\r\n      const energySlider = new EnergySlider(plugin);\r\n      const selectedEnergyLevel = await energySlider.open();\r\n      if (selectedEnergyLevel !== null) {\r\n        const editor = plugin.app.workspace.getActiveViewOfType(MarkdownView)?.editor;\r\n        if (editor) {\r\n          let output = \"\";\r\n          const settings = plugin.settings;\r\n          if (settings.energyDisplay === \"percent\") {\r\n            output = settings.energyOnlyFormat.replace(\"{value}\", `${selectedEnergyLevel}%`);\r\n          } else if (settings.energyDisplay === \"bar\") {\r\n            output = settings.energyOnlyFormat.replace(\"{value}\", formatBarIcons(settings.barIcons, selectedEnergyLevel, settings.barIconCount));\r\n          } else {\r\n            output = settings.energyOnlyFormat.replace(\"{value}\", `${selectedEnergyLevel}`);\r\n          }\r\n          editor.replaceSelection(output);\r\n          if (editor.focus) editor.focus();\r\n        }\r\n      }\r\n    }\r\n  });\r\n  plugin.addCommand({\r\n    id: \"insert-mood-and-energy\",\r\n    name: \"Insert Mood and Energy Level\",\r\n    hotkeys: [{ modifiers: [\"Alt\"], key: \"7\" }],\r\n    callback: () => {\r\n      if (!canRunCommand()) return;\r\n      showMoodAndEnergyModal(plugin);\r\n    }\r\n  });\r\n}\r\n", "// moodMenu.ts\r\n// Mood selection modal logic for the Mood & Energy Obsidian plugin.\r\n\r\n/**\r\n * Modal for selecting a mood from a list/grid, supporting nested sections.\r\n */\r\nexport class MoodMenu {\r\n  moods: string[];\r\n  selectedMood: string | null = null;\r\n  resolveFn: ((mood: string | null) => void) | null = null;\r\n\r\n  // --- SectionNode type for tree structure ---\r\n  private static parseMoodsToTree(moods: string[]) {\r\n    type SectionNode = {\r\n      name: string;\r\n      level: number;\r\n      moods: string[];\r\n      sections: SectionNode[];\r\n      parent?: SectionNode;\r\n    };\r\n    const root: SectionNode = { name: \"\", level: 0, moods: [], sections: [] };\r\n    let currentSection: SectionNode = root;\r\n    const sectionStack: SectionNode[] = [root];\r\n    for (let line of moods) {\r\n      if (/^#+\\s/.test(line)) {\r\n        const match = line.match(/^(#+)\\s*(.*)$/);\r\n        if (!match) continue;\r\n        const level = match[1].length;\r\n        const name = match[2].trim();\r\n        // Find parent section for this level\r\n        while (sectionStack.length > 0 && sectionStack[sectionStack.length - 1].level >= level) {\r\n          sectionStack.pop();\r\n        }\r\n        const parent = sectionStack[sectionStack.length - 1];\r\n        const newSection: SectionNode = { name, level, moods: [], sections: [], parent };\r\n        parent.sections.push(newSection);\r\n        sectionStack.push(newSection);\r\n        currentSection = newSection;\r\n      } else if (line.trim().length > 0) {\r\n        currentSection.moods.push(line.replace(/^[-*]\\s*/, \"\"));\r\n      }\r\n    }\r\n    return root;\r\n  }\r\n\r\n  /**\r\n   * @param moods - List of available moods.\r\n   */\r\n  constructor(moods: string[]) {\r\n    this.moods = moods;\r\n  }\r\n\r\n  /**\r\n   * Displays the mood selection menu.\r\n   * @param widthOverride - Optional width override for the menu.\r\n   */\r\n  displayMenu(widthOverride?: string) {\r\n    const menu = document.createElement(\"div\");\r\n    menu.className = \"mood-menu\";\r\n    menu.style.position = \"fixed\";\r\n    menu.style.top = \"50%\";\r\n    menu.style.left = \"50%\";\r\n    menu.style.transform = \"translate(-50%, -50%)\";\r\n    menu.style.background = \"var(--background-secondary)\";\r\n    menu.style.padding = \"24px\";\r\n    menu.style.borderRadius = \"var(--radius-m)\";\r\n    menu.style.zIndex = \"9999\";\r\n    menu.style.display = \"flex\";\r\n    menu.style.flexDirection = \"column\";\r\n    menu.style.alignItems = \"center\";\r\n    menu.style.boxShadow = \"0 4px 32px var(--background-modifier-box-shadow)\";\r\n    menu.style.maxHeight = \"80vh\";\r\n    menu.style.overflow = \"auto\";\r\n    menu.style.width = widthOverride || \"min(700px, 90vw)\";\r\n    menu.style.minWidth = \"340px\";\r\n    menu.style.maxWidth = \"98vw\";\r\n    menu.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n\r\n    // --- Tree parsing ---\r\n    const root = MoodMenu.parseMoodsToTree(this.moods);\r\n\r\n    // --- Navigation state ---\r\n    let currentSection = root;\r\n    const sectionStack: typeof root[] = [];\r\n\r\n    // --- UI elements ---\r\n    const sectionGrid = document.createElement(\"div\");\r\n    sectionGrid.style.display = \"grid\";\r\n    sectionGrid.style.gridTemplateColumns = \"repeat(auto-fit, minmax(220px, 1fr))\";\r\n    sectionGrid.style.gap = \"18px\";\r\n    sectionGrid.style.width = \"100%\";\r\n    sectionGrid.style.marginBottom = \"18px\";\r\n\r\n    const sectionDetail = document.createElement(\"div\");\r\n    sectionDetail.style.display = \"none\";\r\n    sectionDetail.style.flexDirection = \"column\";\r\n    sectionDetail.style.alignItems = \"stretch\";\r\n    sectionDetail.style.width = \"100%\";\r\n    sectionDetail.style.marginBottom = \"18px\";\r\n\r\n    const backButton = document.createElement(\"button\");\r\n    backButton.innerText = \"\\u2190 Back\";\r\n    backButton.className = \"mod-cta\";\r\n    backButton.style.marginBottom = \"12px\";\r\n    backButton.style.alignSelf = \"flex-start\";\r\n    backButton.style.padding = \"var(--size-4-2) var(--size-4-4)\";\r\n    backButton.style.borderRadius = \"var(--radius-s)\";\r\n    backButton.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n    backButton.style.background = \"var(--background-modifier-hover)\";\r\n    backButton.style.color = \"var(--text-normal)\";\r\n    backButton.style.fontWeight = \"bold\";\r\n    backButton.style.cursor = \"pointer\";\r\n    backButton.onclick = () => {\r\n      if (sectionStack.length > 0) {\r\n        currentSection = sectionStack.pop()!;\r\n        renderSection(currentSection);\r\n      }\r\n    };\r\n    sectionDetail.appendChild(backButton);\r\n\r\n    // --- Render function for a section node ---\r\n    const renderSection = (section: ReturnType<typeof MoodMenu.parseMoodsToTree>) => {\r\n      // Show/hide correct containers\r\n      if (section === root) {\r\n        sectionGrid.style.display = \"grid\";\r\n        sectionDetail.style.display = \"none\";\r\n        backButton.style.display = \"none\";\r\n        sectionGrid.innerHTML = \"\";\r\n    \r\n        // --- Sort sections and moods alphabetically ---\r\n        const sortedSections = [...section.sections].sort((a, b) => a.name.localeCompare(b.name));\r\n        const sortedMoods = [...section.moods].sort((a, b) => a.localeCompare(b));\r\n    \r\n        // --- Render sections first ---\r\n        sortedSections.forEach((child) => {\r\n          const sectionCell = document.createElement(\"div\");\r\n          sectionCell.style.display = \"flex\";\r\n          sectionCell.style.flexDirection = \"column\";\r\n          sectionCell.style.alignItems = \"center\";\r\n          sectionCell.style.background = \"var(--background-modifier-hover)\";\r\n          sectionCell.style.borderRadius = \"var(--radius-m)\";\r\n          sectionCell.style.padding = \"18px 6px 18px 6px\";\r\n          sectionCell.style.boxSizing = \"border-box\";\r\n          sectionCell.style.minWidth = \"0\";\r\n          sectionCell.style.cursor = \"pointer\";\r\n          sectionCell.style.transition = \"background 0.2s\";\r\n          sectionCell.onmouseenter = () => sectionCell.style.background = \"var(--background-modifier-active-hover)\";\r\n          sectionCell.onmouseleave = () => sectionCell.style.background = \"var(--background-modifier-hover)\";\r\n          const sectionLabel = document.createElement(\"div\");\r\n          sectionLabel.innerText = child.name;\r\n          sectionLabel.style.fontWeight = \"bold\";\r\n          sectionLabel.style.fontSize = \"1.2rem\";\r\n          sectionLabel.style.color = \"var(--text-accent)\";\r\n          sectionCell.appendChild(sectionLabel);\r\n          sectionCell.onclick = () => {\r\n            sectionStack.push(section);\r\n            currentSection = child;\r\n            renderSection(child);\r\n          };\r\n          sectionGrid.appendChild(sectionCell);\r\n        });\r\n    \r\n        // --- Add a separator if there are both sections and moods ---\r\n        if (sortedSections.length > 0 && sortedMoods.length > 0) {\r\n          const divider = document.createElement(\"div\");\r\n          divider.style.gridColumn = \"1 / -1\";\r\n          divider.style.height = \"1px\";\r\n          divider.style.background = \"var(--background-modifier-border)\";\r\n          divider.style.margin = \"12px 0\";\r\n          sectionGrid.appendChild(divider);\r\n        }\r\n    \r\n        // --- Render moods below sections ---\r\n        sortedMoods.forEach((mood) => {\r\n          const moodButton = document.createElement(\"button\");\r\n          moodButton.innerText = mood;\r\n          moodButton.className = \"mod-cta\";\r\n          moodButton.style.padding = \"var(--size-4-2) var(--size-4-4)\";\r\n          moodButton.style.borderRadius = \"var(--radius-s)\";\r\n          moodButton.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n          moodButton.style.background = \"var(--background-modifier-hover)\";\r\n          moodButton.style.color = \"var(--text-normal)\";\r\n          moodButton.style.fontSize = \"1rem\";\r\n          moodButton.style.cursor = \"pointer\";\r\n          moodButton.onmouseenter = () => moodButton.style.background = \"var(--background-modifier-active-hover)\";\r\n          moodButton.onmouseleave = () => moodButton.style.background = \"var(--background-modifier-hover)\";\r\n          moodButton.onclick = () => {\r\n            this.selectMood(mood);\r\n            Array.from(sectionGrid.querySelectorAll(\"button\")).forEach((btn) => btn.classList.remove(\"selected-mood\"));\r\n            moodButton.classList.add(\"selected-mood\");\r\n            this.confirmSelection();\r\n          };\r\n          sectionGrid.appendChild(moodButton);\r\n        });\r\n      } else {\r\n        sectionGrid.style.display = \"none\";\r\n        sectionDetail.style.display = \"flex\";\r\n        backButton.style.display = \"block\";\r\n        // Remove all except backButton\r\n        while (sectionDetail.childNodes.length > 1)\r\n          sectionDetail.removeChild(sectionDetail.lastChild!);\r\n    \r\n        // --- Sort sections and moods alphabetically ---\r\n        const sortedSections = [...section.sections].sort((a, b) => a.name.localeCompare(b.name));\r\n        const sortedMoods = [...section.moods].sort((a, b) => a.localeCompare(b));\r\n    \r\n        // Child sections grid\r\n        if (sortedSections.length > 0) {\r\n          const childGrid = document.createElement(\"div\");\r\n          childGrid.style.display = \"grid\";\r\n          childGrid.style.gridTemplateColumns = \"repeat(auto-fit, minmax(180px, 1fr))\";\r\n          childGrid.style.gap = \"12px\";\r\n          childGrid.style.width = \"100%\";\r\n          sortedSections.forEach((child) => {\r\n            const sectionCell = document.createElement(\"div\");\r\n            sectionCell.style.display = \"flex\";\r\n            sectionCell.style.flexDirection = \"column\";\r\n            sectionCell.style.alignItems = \"center\";\r\n            sectionCell.style.background = \"var(--background-modifier-hover)\";\r\n            sectionCell.style.borderRadius = \"var(--radius-m)\";\r\n            sectionCell.style.padding = \"14px 4px 14px 4px\";\r\n            sectionCell.style.boxSizing = \"border-box\";\r\n            sectionCell.style.minWidth = \"0\";\r\n            sectionCell.style.cursor = \"pointer\";\r\n            sectionCell.style.transition = \"background 0.2s\";\r\n            sectionCell.onmouseenter = () => sectionCell.style.background = \"var(--background-modifier-active-hover)\";\r\n            sectionCell.onmouseleave = () => sectionCell.style.background = \"var(--background-modifier-hover)\";\r\n            const sectionLabel = document.createElement(\"div\");\r\n            sectionLabel.innerText = child.name;\r\n            sectionLabel.style.fontWeight = \"bold\";\r\n            sectionLabel.style.fontSize = \"1.1rem\";\r\n            sectionLabel.style.color = \"var(--text-accent)\";\r\n            sectionCell.appendChild(sectionLabel);\r\n            sectionCell.onclick = () => {\r\n              sectionStack.push(section);\r\n              currentSection = child;\r\n              renderSection(child);\r\n            };\r\n            childGrid.appendChild(sectionCell);\r\n          });\r\n          sectionDetail.appendChild(childGrid);\r\n        }\r\n    \r\n        // --- Add a separator if there are both sections and moods ---\r\n        if (sortedSections.length > 0 && sortedMoods.length > 0) {\r\n          const divider = document.createElement(\"div\");\r\n          divider.style.width = \"100%\";\r\n          divider.style.height = \"1px\";\r\n          divider.style.background = \"var(--background-modifier-border)\";\r\n          divider.style.margin = \"12px 0\";\r\n          sectionDetail.appendChild(divider);\r\n        }\r\n    \r\n        // Moods grid\r\n        if (sortedMoods.length > 0) {\r\n          const moodsGrid = document.createElement(\"div\");\r\n          moodsGrid.style.display = \"grid\";\r\n          moodsGrid.style.gridTemplateColumns = \"repeat(auto-fit, minmax(100px, 1fr))\";\r\n          moodsGrid.style.gap = \"12px\";\r\n          moodsGrid.style.width = \"100%\";\r\n          sortedMoods.forEach((mood) => {\r\n            const moodButton = document.createElement(\"button\");\r\n            moodButton.innerText = mood;\r\n            moodButton.className = \"mod-cta\";\r\n            moodButton.style.padding = \"var(--size-4-2) var(--size-4-4)\";\r\n            moodButton.style.borderRadius = \"var(--radius-s)\";\r\n            moodButton.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n            moodButton.style.background = \"var(--background-modifier-hover)\";\r\n            moodButton.style.color = \"var(--text-normal)\";\r\n            moodButton.style.fontSize = \"1rem\";\r\n            moodButton.style.cursor = \"pointer\";\r\n            moodButton.onmouseenter = () => moodButton.style.background = \"var(--background-modifier-active-hover)\";\r\n            moodButton.onmouseleave = () => moodButton.style.background = \"var(--background-modifier-hover)\";\r\n            moodButton.onclick = () => {\r\n              this.selectMood(mood);\r\n              Array.from(moodsGrid.querySelectorAll(\"button\")).forEach((btn) => btn.classList.remove(\"selected-mood\"));\r\n              moodButton.classList.add(\"selected-mood\");\r\n              this.confirmSelection();\r\n            };\r\n            moodsGrid.appendChild(moodButton);\r\n          });\r\n          sectionDetail.appendChild(moodsGrid);\r\n        }\r\n      }\r\n    };\r\n\r\n    // Initial render\r\n    renderSection(root);\r\n\r\n    menu.appendChild(sectionGrid);\r\n    menu.appendChild(sectionDetail);\r\n\r\n    const buttonRow = document.createElement(\"div\");\r\n    buttonRow.style.display = \"flex\";\r\n    buttonRow.style.gap = \"12px\";\r\n    buttonRow.style.marginTop = \"10px\";\r\n    const okayButton = document.createElement(\"button\");\r\n    okayButton.innerText = \"Okay\";\r\n    okayButton.className = \"mod-cta\";\r\n    okayButton.style.padding = \"var(--size-4-2) var(--size-4-4)\";\r\n    okayButton.style.borderRadius = \"var(--radius-s)\";\r\n    okayButton.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n    okayButton.style.background = \"var(--interactive-accent)\";\r\n    okayButton.style.color = \"var(--text-on-accent)\";\r\n    okayButton.style.fontWeight = \"bold\";\r\n    okayButton.style.cursor = \"pointer\";\r\n    okayButton.onclick = () => this.confirmSelection();\r\n    buttonRow.appendChild(okayButton);\r\n    const cancelButton = document.createElement(\"button\");\r\n    cancelButton.innerText = \"Cancel\";\r\n    cancelButton.className = \"mod-cta\";\r\n    cancelButton.style.padding = \"var(--size-4-2) var(--size-4-4)\";\r\n    cancelButton.style.borderRadius = \"var(--radius-s)\";\r\n    cancelButton.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n    cancelButton.style.background = \"var(--background-modifier-hover)\";\r\n    cancelButton.style.color = \"var(--color-red)\";\r\n    cancelButton.style.fontWeight = \"bold\";\r\n    cancelButton.style.cursor = \"pointer\";\r\n    cancelButton.onclick = () => this.cancelSelection();\r\n    buttonRow.appendChild(cancelButton);\r\n    menu.appendChild(buttonRow);\r\n\r\n    const style = document.createElement(\"style\");\r\n    style.innerText = `.selected-mood { background: var(--interactive-accent) !important; color: var(--text-on-accent) !important; border: var(--input-border-width) solid var(--background-primary) !important; }`;\r\n    menu.appendChild(style);\r\n\r\n    const escListener = (e: KeyboardEvent) => {\r\n      if (e.key === \"Escape\") {\r\n        if (sectionDetail.style.display === \"flex\" && sectionStack.length > 0) {\r\n          currentSection = sectionStack.pop()!;\r\n          renderSection(currentSection);\r\n        } else {\r\n          this.closeMenu();\r\n          window.removeEventListener(\"keydown\", escListener);\r\n        }\r\n      }\r\n    };\r\n    window.addEventListener(\"keydown\", escListener);\r\n    document.body.appendChild(menu);\r\n  }\r\n\r\n  /**\r\n   * Opens the modal and returns a promise resolving to the selected mood or null.\r\n   */\r\n  open(): Promise<string | null> {\r\n    this.displayMenu();\r\n    return new Promise((resolve) => {\r\n      this.resolveFn = resolve;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Selects a mood.\r\n   * @param mood - The mood to select.\r\n   */\r\n  selectMood(mood: string) {\r\n    this.selectedMood = mood;\r\n  }\r\n\r\n  /**\r\n   * Confirms the current selection and closes the modal.\r\n   */\r\n  confirmSelection() {\r\n    if (this.resolveFn)\r\n      this.resolveFn(this.selectedMood);\r\n    this.closeMenu();\r\n  }\r\n\r\n  /**\r\n   * Cancels the selection and closes the modal.\r\n   */\r\n  cancelSelection() {\r\n    if (this.resolveFn)\r\n      this.resolveFn(null);\r\n    this.closeMenu();\r\n  }\r\n\r\n  /**\r\n   * Closes the modal and cleans up.\r\n   */\r\n  closeMenu() {\r\n    const menu = document.querySelector(\".mood-menu\");\r\n    if (menu) {\r\n      menu.remove();\r\n    }\r\n  }\r\n}", "// energySlider.ts\r\n// Energy slider modal logic for the Mood & Energy Obsidian plugin.\r\n\r\nimport { formatBarIcons, openModal, closeModal } from \"./types\";\r\n\r\n/**\r\n * Modal for selecting an energy level using a slider.\r\n */\r\nexport class EnergySlider {\r\n  plugin: any; // Reference to the plugin instance, if needed\r\n  resolveFn: ((value: number | null) => void) | null = null;\r\n  selectedValue: number = 50;\r\n  modalElement!: HTMLDivElement;\r\n  sliderElement!: HTMLInputElement;\r\n\r\n  /**\r\n   * Initializes the modal and slider elements.\r\n   */\r\n  constructor(plugin: any) {\r\n    this.plugin = plugin; // Store the plugin instance if needed\r\n    this.createModal();\r\n  }\r\n\r\n  /**\r\n   * Creates the modal DOM structure and event handlers.\r\n   */\r\n  createModal() {\r\n    this.modalElement = document.createElement(\"div\");\r\n    this.modalElement.className = \"energy-slider-modal\";\r\n    this.modalElement.style.position = \"fixed\";\r\n    this.modalElement.style.top = \"50%\";\r\n    this.modalElement.style.left = \"50%\";\r\n    this.modalElement.style.transform = \"translate(-50%, -50%)\";\r\n    this.modalElement.style.background = \"var(--background-secondary)\";\r\n    this.modalElement.style.padding = \"24px\";\r\n    this.modalElement.style.borderRadius = \"var(--radius-m)\";\r\n    this.modalElement.style.zIndex = \"9999\";\r\n    this.modalElement.style.display = \"flex\";\r\n    this.modalElement.style.flexDirection = \"column\";\r\n    this.modalElement.style.alignItems = \"center\";\r\n    this.modalElement.style.boxShadow = \"0 4px 32px var(--background-modifier-box-shadow)\";\r\n    this.modalElement.style.maxHeight = \"80vh\";\r\n    this.modalElement.style.overflow = \"auto\";\r\n    this.modalElement.style.minWidth = \"340px\";\r\n    this.modalElement.style.width = \"min(420px, 98vw)\";\r\n    this.modalElement.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n    this.modalElement.innerHTML = `\r\n            <div class=\"slider-container\" style=\"display:flex;flex-direction:column;align-items:center;\">\r\n                <input type=\"range\" min=\"0\" max=\"100\" value=\"50\" class=\"slider\" id=\"energySlider\" style=\"width:200px;\">\r\n                <div class=\"slider-value\" id=\"sliderValue\" style=\"margin-top:8px;color:var(--text-normal);\">50</div>\r\n                <div class=\"energy-preview\" id=\"energyPreview\" style=\"margin-top:8px;color:var(--text-normal);font-family:monospace;font-size:1.2em;\"></div>\r\n            </div>\r\n            <div style=\"display:flex;gap:12px;margin-top:18px;justify-content:center;width:100%;\">\r\n                <button id=\"okayButton\" class=\"mod-cta\" style=\"padding:var(--size-4-2) var(--size-4-4);border-radius:var(--radius-s);border:var(--input-border-width) solid var(--background-modifier-border);background:var(--interactive-accent);color:var(--text-on-accent);font-weight:bold;cursor:pointer;\">Okay</button>\r\n                <button id=\"cancelButton\" class=\"mod-cta\" style=\"padding:var(--size-4-2) var(--size-4-4);border-radius:var(--radius-s);border:var(--input-border-width) solid var(--background-modifier-border);background:var(--background-modifier-hover);color:var(--color-red);font-weight:bold;cursor:pointer;\">Cancel</button>\r\n            </div>\r\n        `;\r\n    this.sliderElement = this.modalElement.querySelector(\"#energySlider\")!;\r\n    const sliderValueDisplay = this.modalElement.querySelector(\"#sliderValue\")!;\r\n    const preview = this.modalElement.querySelector(\"#energyPreview\") as HTMLElement;\r\n    const okayButton = this.modalElement.querySelector(\"#okayButton\")!;\r\n    const cancelButton = this.modalElement.querySelector(\"#cancelButton\")!;\r\n    const updatePreview = () => {\r\n      const settings = this.plugin?.settings || {\r\n        energyDisplay: \"bar\",\r\n        energyFormat: \"Energy: {value}\",\r\n        barIcons: \"\u28FF\u28F7\u28F6\u28E6\u28E4\u28C4\u28C0\",\r\n        barIconCount: 7,\r\n        energyOnlyFormat: \"Energy: {value}\",\r\n        moodOnlyFormat: \"{value}\",\r\n        moodAndEnergyFormat: \"{mood} | {energy}\"\r\n      };\r\n      const value = parseInt(this.sliderElement.value);\r\n      let output = \"\";\r\n      if (settings.energyDisplay === \"percent\") {\r\n        output = settings.energyOnlyFormat.replace(\"{value}\", `${value}%`);\r\n      } else if (settings.energyDisplay === \"bar\") {\r\n        output = settings.energyOnlyFormat.replace(\"{value}\", formatBarIcons(settings.barIcons, value, settings.barIconCount));\r\n      } else {\r\n        output = settings.energyOnlyFormat.replace(\"{value}\", `${value}`);\r\n      }\r\n      preview.innerText = output;\r\n    };\r\n    this.sliderElement.addEventListener(\"input\", () => {\r\n      this.selectedValue = parseInt(this.sliderElement.value);\r\n      sliderValueDisplay.textContent = this.selectedValue.toString();\r\n      updatePreview();\r\n    });\r\n    updatePreview();\r\n    okayButton.addEventListener(\"click\", () => {\r\n      this.closeModal();\r\n      if (this.resolveFn)\r\n        this.resolveFn(this.selectedValue);\r\n    });\r\n    cancelButton.addEventListener(\"click\", () => {\r\n      this.closeModal();\r\n      if (this.resolveFn)\r\n        this.resolveFn(null);\r\n    });\r\n    const escListener = (e: KeyboardEvent) => {\r\n      if (e.key === \"Escape\") {\r\n        this.closeModal();\r\n        window.removeEventListener(\"keydown\", escListener);\r\n      }\r\n    };\r\n    window.addEventListener(\"keydown\", escListener);\r\n  }\r\n\r\n  /**\r\n   * Opens the modal and returns a promise resolving to the selected value or null.\r\n   */\r\n  open(): Promise<number | null> {\r\n    openModal(this.modalElement);\r\n    return new Promise((resolve) => {\r\n      this.resolveFn = resolve;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Closes the modal and cleans up.\r\n   */\r\n  closeModal() {\r\n    closeModal(this.modalElement);\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["main_exports", "__export", "MoodEnergyPlugin", "__toCommonJS", "import_obsidian", "import_obsidian", "DEFAULT_SETTINGS", "formatBarIcons", "barIcons", "value", "iconCount", "levels", "percent", "bar", "iconPercent", "rel", "iconLevel", "currentOpenModal", "openModal", "modalEl", "closeModal", "FilePathSuggester", "inputEl", "app", "lastSuggestions", "dropdown", "selectedIdx", "items", "highlightClass", "style", "closeDropdown", "closeModal", "openDropdown", "suggestions", "rect", "s", "idx", "item", "setHighlight", "e", "openModal", "el", "i", "query", "f", "path", "MoodEnergySettingTab", "plugin", "containerEl", "text", "value", "num", "loadMoodsFromFile", "vault", "filePath", "file", "lines", "l", "import_obsidian", "MoodMenu", "_MoodMenu", "moods", "root", "currentSection", "sectionStack", "line", "match", "level", "name", "parent", "newSection", "widthOverride", "menu", "sectionGrid", "sectionDetail", "backButton", "renderSection", "section", "sortedSections", "a", "b", "sortedMoods", "child", "sectionCell", "sectionLabel", "divider", "mood", "moodButton", "btn", "childGrid", "moodsGrid", "buttonRow", "okayButton", "cancelButton", "style", "escListener", "e", "resolve", "EnergySlider", "plugin", "sliderValueDisplay", "preview", "okayButton", "cancelButton", "updatePreview", "settings", "value", "output", "formatBarIcons", "escListener", "e", "openModal", "resolve", "closeModal", "showMoodAndEnergyModal", "plugin", "modal", "moodContainer", "controlsContainer", "sliderLabel", "slider", "sliderValue", "preview", "updatePreview", "settings", "output", "value", "formatBarIcons", "buttonRow", "okayButton", "cancelButton", "selectedMood", "selectedMoodButton", "moods", "moodSectionGrid", "moodSectionDetail", "backButton", "loadMoodsFromFile", "moodList", "root", "currentSection", "sectionStack", "line", "match", "level", "name", "parent", "newSection", "renderSection", "section", "container", "detailContainer", "parentPath", "sortedSections", "a", "b", "sortedMoods", "childSection", "sectionCell", "sectionLabel", "moodsGrid", "divider", "mood", "moodButton", "btn", "style", "escListener", "e", "closeModal", "openModal", "editor", "energyStr", "registerCommands", "canRunCommand", "currentOpenModal", "MoodMenu", "selectedEnergyLevel", "EnergySlider", "MoodEnergyPlugin", "app", "manifest", "DEFAULT_SETTINGS", "MoodEnergySettingTab", "registerCommands"]
}
