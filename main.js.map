{
  "version": 3,
  "sources": ["src/main.ts", "src/types/index.ts", "src/commands.ts", "src/moodMenu.ts", "src/energySlider.ts"],
  "sourcesContent": ["// main.ts\r\n// Main plugin entry point for the Mood & Energy Obsidian plugin.\r\n\r\nimport { Plugin } from \"obsidian\";\r\nimport { MoodEnergyPluginSettings, DEFAULT_SETTINGS, MoodEnergySettingTab } from \"./types\";\r\nimport { registerCommands } from \"./commands\";\r\n\r\n/**\r\n * Main plugin class for Mood & Energy tracking in Obsidian.\r\n */\r\nexport default class MoodEnergyPlugin extends Plugin {\r\n  settings: MoodEnergyPluginSettings;\r\n  settingTab: MoodEnergySettingTab | null = null;\r\n\r\n  constructor(app: any, manifest: any) {\r\n    super(app, manifest);\r\n    this.settings = DEFAULT_SETTINGS;\r\n  }\r\n\r\n  /**\r\n   * Loads settings and registers commands on plugin load.\r\n   */\r\n  async onload() {\r\n    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData?.());\r\n    this.addSettingTab(new MoodEnergySettingTab(this.app, this));\r\n    registerCommands(this);\r\n  }\r\n\r\n  /**\r\n   * Saves plugin settings to disk.\r\n   */\r\n  async saveSettings() {\r\n    await this.saveData?.(this.settings);\r\n  }\r\n\r\n  /**\r\n   * Cleans up on plugin unload.\r\n   */\r\n  onunload() {\r\n    // No special cleanup\r\n  }\r\n}\r\n", "// types/index.ts\r\n// Type definitions, settings, utilities, and modal management for the Mood & Energy Obsidian plugin.\r\n\r\nimport { PluginSettingTab, Setting, TFile, normalizePath, App, SuggestModal, TextComponent } from \"obsidian\";\r\n\r\n/**\r\n * Interface for plugin settings.\r\n */\r\nexport interface MoodEnergyPluginSettings {\r\n  moodsFilePath: string;\r\n  energyDisplay: \"text\" | \"percent\" | \"bar\";\r\n  energyFormat: string;\r\n  barIcons: string; // e.g. '\u28FF\u28F7\u28F6\u28E6\u28E4\u28C4\u28C0' or '\u2588\u2593\u2592\u2591'\r\n  barIconCount: number; // number of icons in the bar\r\n  energyOnlyFormat: string;\r\n  moodOnlyFormat: string;\r\n  moodAndEnergyFormat: string;\r\n}\r\n\r\n/**\r\n * Default settings for the plugin.\r\n */\r\nexport const DEFAULT_SETTINGS: MoodEnergyPluginSettings = {\r\n  moodsFilePath: \"moods.txt\",\r\n  energyDisplay: \"bar\",\r\n  energyFormat: \"Energy: {value}\",\r\n  barIcons: \"\u28FF\u28F7\u28F6\u28E6\u28E4\u28C4\u28C0\", // Default: 7 levels\r\n  barIconCount: 7,\r\n  energyOnlyFormat: \"Energy: {value}\",\r\n  moodOnlyFormat: \"{value}\",\r\n  moodAndEnergyFormat: \"{mood} | {energy}\"\r\n};\r\n\r\n/**\r\n * Formats a progress bar using a string of icons and a value.\r\n * @param barIcons - String of icons from full to empty.\r\n * @param value - Value from 0 to 100.\r\n * @param iconCount - Number of icons to display.\r\n * @returns The formatted bar string.\r\n */\r\nexport function formatBarIcons(barIcons: string, value: number, iconCount: number): string {\r\n  if (!barIcons || barIcons.length < 2 || iconCount < 1) return value.toString();\r\n  const levels = barIcons.length;\r\n  const percent = Math.max(0, Math.min(100, value));\r\n  let bar = \"\";\r\n  for (let i = 0; i < iconCount; i++) {\r\n    // For each icon, determine how full it should be\r\n    const iconPercent = 100 * (i + 1) / iconCount;\r\n    const rel = percent - (100 * i / iconCount);\r\n    let iconLevel = Math.round((1 - rel / (100 / iconCount)) * (levels - 1));\r\n    if (percent >= iconPercent) iconLevel = 0; // full\r\n    else if (percent <= 100 * i / iconCount) iconLevel = levels - 1; // empty\r\n    iconLevel = Math.max(0, Math.min(levels - 1, iconLevel));\r\n    bar += barIcons[iconLevel];\r\n  }\r\n  return bar;\r\n}\r\n\r\n// --- Modal Management Utility ---\r\n/**\r\n * Tracks the currently open modal (if any).\r\n */\r\nexport let currentOpenModal: HTMLElement | null = null;\r\n\r\n/**\r\n * Opens a modal, ensuring only one is open at a time.\r\n * @param modalEl - The modal element to open.\r\n */\r\nexport function openModal(modalEl: HTMLElement) {\r\n  if (currentOpenModal && currentOpenModal !== modalEl) {\r\n    currentOpenModal.remove();\r\n  }\r\n  currentOpenModal = modalEl;\r\n  document.body.appendChild(modalEl);\r\n}\r\n\r\n/**\r\n * Closes a modal and clears the currentOpenModal reference.\r\n * @param modalEl - The modal element to close.\r\n */\r\nexport function closeModal(modalEl: HTMLElement) {\r\n  if (currentOpenModal === modalEl) {\r\n    modalEl.remove();\r\n    currentOpenModal = null;\r\n  } else {\r\n    modalEl.remove();\r\n  }\r\n}\r\n\r\n/**\r\n * Modal for suggesting file paths for moods file setting.\r\n */\r\nexport class MoodFileSuggestModal extends SuggestModal<string> {\r\n  plugin: any;\r\n  constructor(app: App, plugin: any) {\r\n    super(app);\r\n    this.plugin = plugin;\r\n  }\r\n  getSuggestions(query: string): string[] {\r\n    const files = this.app.vault.getFiles();\r\n    return files\r\n      .map(f => f.path)\r\n      .filter(path => path.toLowerCase().includes(query.toLowerCase()));\r\n  }\r\n  renderSuggestion(value: string, el: HTMLElement) {\r\n    el.setText(value);\r\n  }\r\n  onChooseSuggestion(value: string) {\r\n    this.plugin.settings.moodsFilePath = value;\r\n    this.plugin.saveSettings();\r\n    if (this.plugin.settingTab?.display) this.plugin.settingTab.display();\r\n  }\r\n}\r\n\r\n/**\r\n * Inline file path suggester for settings tab.\r\n */\r\nexport class FilePathSuggester {\r\n  constructor(inputEl: HTMLInputElement, app: App) {\r\n    let lastSuggestions: string[] = [];\r\n    let dropdown: HTMLDivElement | null = null;\r\n    let selectedIdx: number = -1;\r\n    let items: HTMLDivElement[] = [];\r\n    const highlightClass = \"file-path-suggester-highlight\";\r\n    // Add style for highlight and dropdown\r\n    if (!document.getElementById(\"file-path-suggester-style\")) {\r\n      const style = document.createElement(\"style\");\r\n      style.id = \"file-path-suggester-style\";\r\n      style.textContent = `\r\n        .file-path-suggester-dropdown {\r\n          background: var(--background-secondary);\r\n          border: 1px solid var(--background-modifier-border);\r\n          color: var(--text-normal);\r\n          box-shadow: 0 2px 8px var(--background-modifier-box-shadow);\r\n          border-radius: var(--radius-m);\r\n          font-size: var(--font-ui-medium);\r\n          padding: 4px 0;\r\n        }\r\n        .file-path-suggester-dropdown div {\r\n          padding: 4px 12px;\r\n          cursor: pointer;\r\n          border-radius: var(--radius-s);\r\n        }\r\n        .file-path-suggester-dropdown div:hover,\r\n        .file-path-suggester-highlight {\r\n          background: var(--background-modifier-hover);\r\n          color: var(--text-accent);\r\n        }\r\n      `;\r\n      document.head.appendChild(style);\r\n    }\r\n    function closeDropdown() {\r\n      if (dropdown) closeModal(dropdown);\r\n      dropdown = null;\r\n      items = [];\r\n      selectedIdx = -1;\r\n    }\r\n    function openDropdown(suggestions: string[]) {\r\n      closeDropdown();\r\n      if (!suggestions.length) return;\r\n      dropdown = document.createElement(\"div\");\r\n      dropdown.className = \"file-path-suggester-dropdown\";\r\n      dropdown.style.position = \"absolute\";\r\n      dropdown.style.zIndex = \"9999\";\r\n      dropdown.style.maxHeight = \"200px\";\r\n      dropdown.style.overflowY = \"auto\";\r\n      dropdown.style.width = inputEl.offsetWidth + \"px\";\r\n      const rect = inputEl.getBoundingClientRect();\r\n      dropdown.style.left = rect.left + window.scrollX + \"px\";\r\n      dropdown.style.top = (rect.bottom + window.scrollY) + \"px\";\r\n      suggestions.forEach((s, idx) => {\r\n        const item = document.createElement(\"div\");\r\n        item.textContent = s;\r\n        item.tabIndex = -1;\r\n        item.onmouseenter = () => {\r\n          setHighlight(idx);\r\n        };\r\n        item.onmouseleave = () => {\r\n          setHighlight(-1);\r\n        };\r\n        item.onmousedown = (e) => {\r\n          e.preventDefault();\r\n          inputEl.value = s;\r\n          inputEl.dispatchEvent(new Event(\"input\"));\r\n          closeDropdown();\r\n        };\r\n        dropdown!.appendChild(item);\r\n        items.push(item);\r\n      });\r\n      openModal(dropdown);\r\n    }\r\n    function setHighlight(idx: number) {\r\n      items.forEach((el, i) => {\r\n        if (i === idx) el.classList.add(highlightClass);\r\n        else el.classList.remove(highlightClass);\r\n      });\r\n      selectedIdx = idx;\r\n    }\r\n    inputEl.addEventListener(\"input\", () => {\r\n      const query = inputEl.value.toLowerCase();\r\n      const files = app.vault.getFiles();\r\n      const suggestions = files\r\n        .map(f => f.path)\r\n        .filter(path => path.toLowerCase().includes(query))\r\n        .slice(0, 20);\r\n      lastSuggestions = suggestions;\r\n      openDropdown(suggestions);\r\n    });\r\n    inputEl.addEventListener(\"keydown\", (e) => {\r\n      if (!dropdown || !items.length) return;\r\n      if (e.key === \"ArrowDown\") {\r\n        e.preventDefault();\r\n        setHighlight((selectedIdx + 1) % items.length);\r\n        items[selectedIdx]?.scrollIntoView({ block: \"nearest\" });\r\n      } else if (e.key === \"ArrowUp\") {\r\n        e.preventDefault();\r\n        setHighlight((selectedIdx - 1 + items.length) % items.length);\r\n        items[selectedIdx]?.scrollIntoView({ block: \"nearest\" });\r\n      } else if (e.key === \"Enter\") {\r\n        if (selectedIdx >= 0 && selectedIdx < items.length) {\r\n          inputEl.value = lastSuggestions[selectedIdx];\r\n          inputEl.dispatchEvent(new Event(\"input\"));\r\n          closeDropdown();\r\n          e.preventDefault();\r\n        }\r\n      } else if (e.key === \"Escape\") {\r\n        closeDropdown();\r\n      }\r\n    });\r\n    inputEl.addEventListener(\"blur\", () => setTimeout(closeDropdown, 100));\r\n  }\r\n}\r\n\r\n/**\r\n * Settings tab for the plugin.\r\n */\r\nexport class MoodEnergySettingTab extends PluginSettingTab {\r\n  plugin: any;\r\n  constructor(app: any, plugin: any) {\r\n    super(app, plugin);\r\n    this.plugin = plugin;\r\n    plugin.settingTab = this;\r\n  }\r\n  display(): void {\r\n    const { containerEl } = this;\r\n    containerEl.empty();\r\n    containerEl.createEl(\"h2\", { text: \"Mood & Energy Plugin Settings\" });\r\n    containerEl.createEl(\"h3\", { text: \"Mood Settings\" });\r\n    new Setting(containerEl)\r\n      .setName(\"Moods File Path\")\r\n      .setDesc(\"Path to the file containing your moods, one per line (excluding frontmatter). Start typing to see suggestions from your vault.\")\r\n      .addText((text: TextComponent) => {\r\n        text.setPlaceholder(\"moods.txt\")\r\n          .setValue(this.plugin.settings.moodsFilePath)\r\n          .onChange(async (value) => {\r\n            this.plugin.settings.moodsFilePath = value;\r\n            await this.plugin.saveSettings();\r\n          });\r\n        // Attach inline file path suggester\r\n        setTimeout(() => new FilePathSuggester(text.inputEl, this.app), 0);\r\n      });\r\n    containerEl.createEl(\"h3\", { text: \"Energy Settings\" });\r\n    new Setting(containerEl)\r\n      .setName(\"Energy Display\")\r\n      .setDesc(\"How to display the energy value: as text, percent, or a progress bar.\")\r\n      .addDropdown((dropdown) =>\r\n        dropdown\r\n          .addOption(\"text\", \"Text\")\r\n          .addOption(\"percent\", \"Percent\")\r\n          .addOption(\"bar\", \"Progress Bar\")\r\n          .setValue(this.plugin.settings.energyDisplay)\r\n          .onChange(async (value) => {\r\n            this.plugin.settings.energyDisplay = value;\r\n            await this.plugin.saveSettings();\r\n            this.display();\r\n          })\r\n      );\r\n    if (this.plugin.settings.energyDisplay === \"bar\") {\r\n      new Setting(containerEl)\r\n        .setName(\"Bar Icons\")\r\n        .setDesc(\"Icons for the progress bar, from full to empty (e.g. \u28FF\u28F7\u28F6\u28E6\u28E4\u28C4\u28C0 or \u2588\u2593\u2592\u2591)\")\r\n        .addText((text) =>\r\n          text\r\n            .setPlaceholder(\"\u28FF\u28F7\u28F6\u28E6\u28E4\u28C4\u28C0\")\r\n            .setValue(this.plugin.settings.barIcons)\r\n            .onChange(async (value) => {\r\n              this.plugin.settings.barIcons = value;\r\n              await this.plugin.saveSettings();\r\n            })\r\n        );\r\n      new Setting(containerEl)\r\n        .setName(\"Bar Icon Count\")\r\n        .setDesc(\"Number of icons in the progress bar (e.g. 5, 7, 10, 20)\")\r\n        .addText((text) =>\r\n          text\r\n            .setPlaceholder(\"7\")\r\n            .setValue(this.plugin.settings.barIconCount.toString())\r\n            .onChange(async (value) => {\r\n              const num = parseInt(value);\r\n              if (!isNaN(num) && num > 0) {\r\n                this.plugin.settings.barIconCount = num;\r\n                await this.plugin.saveSettings();\r\n              }\r\n            })\r\n        );\r\n    }\r\n    containerEl.createEl(\"h3\", { text: \"Output Format Settings\" });\r\n    new Setting(containerEl)\r\n      .setName(\"Energy Only Output Format\")\r\n      .setDesc(\"Format for energy only output. Use {value} for the energy bar/number.\")\r\n      .addText((text) =>\r\n        text\r\n          .setPlaceholder(\"Energy: {value}\")\r\n          .setValue(this.plugin.settings.energyOnlyFormat)\r\n          .onChange(async (value) => {\r\n            this.plugin.settings.energyOnlyFormat = value;\r\n            await this.plugin.saveSettings();\r\n          })\r\n      );\r\n    new Setting(containerEl)\r\n      .setName(\"Mood Only Output Format\")\r\n      .setDesc(\"Format for mood only output. Use {value} for the mood.\")\r\n      .addText((text) =>\r\n        text\r\n          .setPlaceholder(\"{value}\")\r\n          .setValue(this.plugin.settings.moodOnlyFormat)\r\n          .onChange(async (value) => {\r\n            this.plugin.settings.moodOnlyFormat = value;\r\n            await this.plugin.saveSettings();\r\n          })\r\n      );\r\n    new Setting(containerEl)\r\n      .setName(\"Mood + Energy Output Format\")\r\n      .setDesc(\"Format for mood + energy output. Use {mood} and {energy}.\")\r\n      .addText((text) =>\r\n        text\r\n          .setPlaceholder(\"{mood} | {energy}\")\r\n          .setValue(this.plugin.settings.moodAndEnergyFormat)\r\n          .onChange(async (value) => {\r\n            this.plugin.settings.moodAndEnergyFormat = value;\r\n            await this.plugin.saveSettings();\r\n          })\r\n      );\r\n  }\r\n}\r\n\r\n/**\r\n * Loads moods from a file in the vault, skipping frontmatter if present.\r\n * @param vault - The Obsidian vault instance.\r\n * @param filePath - Path to the moods file.\r\n * @returns Array of mood strings.\r\n */\r\nexport async function loadMoodsFromFile(vault: any, filePath: string): Promise<string[]> {\r\n  try {\r\n    const file = vault.getAbstractFileByPath(normalizePath(filePath));\r\n    if (file instanceof TFile) {\r\n      const content = await vault.read(file);\r\n      let lines = content.split(/\\r?\\n/);\r\n      if (lines[0].trim() === \"---\") {\r\n        let i = 1;\r\n        while (i < lines.length && lines[i].trim() !== \"---\") i++;\r\n        lines = lines.slice(i + 1);\r\n      }\r\n      return lines\r\n        .map((l: string) => l.replace(/<\\/?[a-zA-Z][^>]*>/g, \"\").trim())\r\n        .filter((l: string) => l.length > 0);\r\n    }\r\n  } catch (e) {\r\n    console.error(\"Failed to load moods file:\", e);\r\n  }\r\n  return [];\r\n}\r\n", "// commands.ts\r\n// Command registration and modal logic for the Mood & Energy Obsidian plugin.\r\n\r\nimport { MarkdownView } from \"obsidian\";\r\nimport { MoodMenu } from \"./moodMenu\";\r\nimport { EnergySlider } from \"./energySlider\";\r\nimport { loadMoodsFromFile, formatBarIcons, openModal, closeModal, currentOpenModal } from \"./types\";\r\n\r\n/**\r\n * Shows a combined modal for selecting both mood and energy, then inserts the formatted result into the editor.\r\n * @param plugin - The plugin instance.\r\n */\r\nexport function showMoodAndEnergyModal(plugin: any) {\r\n  const modal = document.createElement(\"div\");\r\n  modal.className = \"mood-energy-modal\";\r\n  modal.style.position = \"fixed\";\r\n  modal.style.top = \"50%\";\r\n  modal.style.left = \"50%\";\r\n  modal.style.transform = \"translate(-50%, -50%)\";\r\n  modal.style.background = \"var(--background-secondary)\";\r\n  modal.style.padding = \"24px\";\r\n  modal.style.borderRadius = \"var(--radius-m)\";\r\n  modal.style.zIndex = \"9999\";\r\n  modal.style.display = \"flex\";\r\n  modal.style.flexDirection = \"row\";\r\n  modal.style.alignItems = \"stretch\";\r\n  modal.style.boxShadow = \"0 4px 32px var(--background-modifier-box-shadow)\";\r\n  modal.style.maxHeight = \"80vh\";\r\n  modal.style.overflow = \"visible\";\r\n  modal.style.width = \"min(900px, 98vw)\";\r\n  modal.style.minWidth = \"340px\";\r\n  modal.style.maxWidth = \"98vw\";\r\n  modal.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n  const moodContainer = document.createElement(\"div\");\r\n  moodContainer.style.flex = \"1 1 0\";\r\n  moodContainer.style.overflowY = \"auto\";\r\n  moodContainer.style.maxHeight = \"calc(80vh - 24px)\";\r\n  moodContainer.style.marginRight = \"32px\";\r\n  moodContainer.style.background = \"var(--background-modifier-hover, rgba(255,255,255,0.01))\";\r\n  moodContainer.style.borderRadius = \"8px\";\r\n  moodContainer.style.padding = \"0 0 0 0\";\r\n  moodContainer.style.display = \"flex\";\r\n  moodContainer.style.flexDirection = \"column\";\r\n  moodContainer.style.minWidth = \"260px\";\r\n  const controlsContainer = document.createElement(\"div\");\r\n  controlsContainer.style.display = \"flex\";\r\n  controlsContainer.style.flexDirection = \"column\";\r\n  controlsContainer.style.alignItems = \"center\";\r\n  controlsContainer.style.justifyContent = \"flex-start\";\r\n  controlsContainer.style.width = \"320px\";\r\n  controlsContainer.style.minWidth = \"220px\";\r\n  controlsContainer.style.maxWidth = \"340px\";\r\n  controlsContainer.style.background = \"var(--background-modifier-hover)\";\r\n  controlsContainer.style.borderRadius = \"var(--radius-m)\";\r\n  controlsContainer.style.padding = \"18px 18px 18px 18px\";\r\n  controlsContainer.style.boxSizing = \"border-box\";\r\n  controlsContainer.style.height = \"100%\";\r\n  const sliderLabel = document.createElement(\"div\");\r\n  sliderLabel.innerText = \"Energy Level:\";\r\n  sliderLabel.style.color = \"var(--text-normal, #fff)\";\r\n  sliderLabel.style.marginBottom = \"8px\";\r\n  const slider = document.createElement(\"input\");\r\n  slider.type = \"range\";\r\n  slider.min = \"0\";\r\n  slider.max = \"100\";\r\n  slider.value = \"50\";\r\n  slider.style.width = \"220px\";\r\n  const sliderValue = document.createElement(\"div\");\r\n  sliderValue.innerText = \"50\";\r\n  sliderValue.style.color = \"var(--text-normal, #fff)\";\r\n  sliderValue.style.marginTop = \"8px\";\r\n  const preview = document.createElement(\"div\");\r\n  preview.style.marginTop = \"8px\";\r\n  preview.style.color = \"var(--text-normal, #fff)\";\r\n  preview.style.fontFamily = \"monospace\";\r\n  preview.style.fontSize = \"1.2em\";\r\n  const updatePreview = () => {\r\n    const settings = plugin.settings;\r\n    let output = \"\";\r\n    const value = parseInt(slider.value);\r\n    if (settings.energyDisplay === \"percent\") {\r\n      output = settings.energyFormat.replace(\"{value}\", `${value}%`);\r\n    } else if (settings.energyDisplay === \"bar\") {\r\n      output = settings.energyFormat.replace(\"{value}\", formatBarIcons(settings.barIcons, value, settings.barIconCount));\r\n    } else {\r\n      output = settings.energyFormat.replace(\"{value}\", `${value}`);\r\n    }\r\n    preview.innerText = output;\r\n  };\r\n  slider.oninput = () => {\r\n    sliderValue.innerText = slider.value;\r\n    updatePreview();\r\n  };\r\n  controlsContainer.appendChild(sliderLabel);\r\n  controlsContainer.appendChild(slider);\r\n  controlsContainer.appendChild(sliderValue);\r\n  controlsContainer.appendChild(preview);\r\n  updatePreview();\r\n  const buttonRow = document.createElement(\"div\");\r\n  buttonRow.style.display = \"flex\";\r\n  buttonRow.style.gap = \"12px\";\r\n  buttonRow.style.marginTop = \"18px\";\r\n  buttonRow.style.justifyContent = \"center\";\r\n  buttonRow.style.width = \"100%\";\r\n  const okayButton = document.createElement(\"button\");\r\n  okayButton.innerText = \"Okay\";\r\n  okayButton.className = \"mod-cta\";\r\n  okayButton.style.padding = \"var(--size-4-2) var(--size-4-4)\";\r\n  okayButton.style.borderRadius = \"var(--radius-s)\";\r\n  okayButton.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n  okayButton.style.background = \"var(--interactive-accent)\";\r\n  okayButton.style.color = \"var(--text-on-accent)\";\r\n  okayButton.style.fontWeight = \"bold\";\r\n  okayButton.style.cursor = \"pointer\";\r\n  const cancelButton = document.createElement(\"button\");\r\n  cancelButton.innerText = \"Cancel\";\r\n  cancelButton.className = \"mod-cta\";\r\n  cancelButton.style.padding = \"var(--size-4-2) var(--size-4-4)\";\r\n  cancelButton.style.borderRadius = \"var(--radius-s)\";\r\n  cancelButton.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n  cancelButton.style.background = \"var(--background-modifier-hover)\";\r\n  cancelButton.style.color = \"var(--color-red)\";\r\n  cancelButton.style.fontWeight = \"bold\";\r\n  cancelButton.style.cursor = \"pointer\";\r\n  buttonRow.appendChild(okayButton);\r\n  buttonRow.appendChild(cancelButton);\r\n  controlsContainer.appendChild(buttonRow);\r\n  let selectedMood: string | null = null;\r\n  let selectedMoodButton: HTMLButtonElement | null = null;\r\n  let moods: string[] = [];\r\n  const moodSectionGrid = document.createElement(\"div\");\r\n  moodSectionGrid.style.display = \"grid\";\r\n  moodSectionGrid.style.gridTemplateColumns = \"repeat(auto-fit, minmax(180px, 1fr))\";\r\n  moodSectionGrid.style.gap = \"18px\";\r\n  moodSectionGrid.style.width = \"100%\";\r\n  moodSectionGrid.style.marginBottom = \"18px\";\r\n  const moodSectionDetail = document.createElement(\"div\");\r\n  moodSectionDetail.style.display = \"none\";\r\n  moodSectionDetail.style.flexDirection = \"column\";\r\n  moodSectionDetail.style.alignItems = \"stretch\";\r\n  moodSectionDetail.style.width = \"100%\";\r\n  moodSectionDetail.style.marginBottom = \"18px\";\r\n  const backButton = document.createElement(\"button\");\r\n  backButton.innerText = \"\\u2190 Back\";\r\n  backButton.style.marginBottom = \"12px\";\r\n  backButton.style.alignSelf = \"flex-start\";\r\n  backButton.style.padding = \"6px 16px\";\r\n  backButton.style.borderRadius = \"8px\";\r\n  backButton.style.border = \"none\";\r\n  backButton.style.background = \"var(--background-modifier-hover, #444)\";\r\n  backButton.style.color = \"var(--text-normal, #fff)\";\r\n  backButton.style.fontWeight = \"bold\";\r\n  backButton.style.cursor = \"pointer\";\r\n  backButton.onclick = () => {\r\n    moodSectionDetail.style.display = \"none\";\r\n    moodSectionGrid.style.display = \"grid\";\r\n    backButton.style.display = \"none\";\r\n  };\r\n  moodSectionDetail.appendChild(backButton);\r\n  backButton.style.display = \"none\";\r\n  loadMoodsFromFile(plugin.app.vault, plugin.settings.moodsFilePath).then((moodList: string[]) => {\r\n    moods = moodList;\r\n    let i = 0;\r\n    const sectionData: { header: string, moods: string[] }[] = [];\r\n    while (i < moods.length) {\r\n      const mood = moods[i];\r\n      if (/^#+\\s/.test(mood)) {\r\n        const headerText = mood.replace(/^#+\\s*/, \"\");\r\n        const moodsArr: string[] = [];\r\n        i++;\r\n        while (i < moods.length && !/^#+\\s/.test(moods[i])) {\r\n          moodsArr.push(moods[i].replace(/^[-*]\\s*/, \"\"));\r\n          i++;\r\n        }\r\n        sectionData.push({ header: headerText, moods: moodsArr });\r\n      } else if (!/^[-*]\\s*/.test(mood)) {\r\n        sectionData.push({ header: mood, moods: [] });\r\n        i++;\r\n      } else {\r\n        i++;\r\n      }\r\n    }\r\n    sectionData.forEach((section) => {\r\n      const sectionCell = document.createElement(\"div\");\r\n      sectionCell.style.display = \"flex\";\r\n      sectionCell.style.flexDirection = \"column\";\r\n      sectionCell.style.alignItems = \"center\";\r\n      sectionCell.style.background = \"var(--background-modifier-hover, rgba(255,255,255,0.02))\";\r\n      sectionCell.style.borderRadius = \"8px\";\r\n      sectionCell.style.padding = \"18px 6px 18px 6px\";\r\n      sectionCell.style.boxSizing = \"border-box\";\r\n      sectionCell.style.minWidth = \"0\";\r\n      sectionCell.style.cursor = \"pointer\";\r\n      sectionCell.style.transition = \"background 0.2s\";\r\n      sectionCell.onmouseenter = () => sectionCell.style.background = \"var(--background-modifier-active-hover, rgba(80,120,255,0.08))\";\r\n      sectionCell.onmouseleave = () => sectionCell.style.background = \"var(--background-modifier-hover, rgba(255,255,255,0.02))\";\r\n      const sectionLabel = document.createElement(\"div\");\r\n      sectionLabel.innerText = section.header;\r\n      sectionLabel.style.fontWeight = \"bold\";\r\n      sectionLabel.style.fontSize = \"1.2rem\";\r\n      sectionLabel.style.color = \"var(--text-accent, #aaf)\";\r\n      sectionCell.appendChild(sectionLabel);\r\n      sectionCell.onclick = () => {\r\n        moodSectionGrid.style.display = \"none\";\r\n        moodSectionDetail.style.display = \"flex\";\r\n        backButton.style.display = \"block\";\r\n        while (moodSectionDetail.childNodes.length > 1)\r\n          moodSectionDetail.removeChild(moodSectionDetail.lastChild!);\r\n        const moodsGrid = document.createElement(\"div\");\r\n        moodsGrid.style.display = \"grid\";\r\n        moodsGrid.style.gridTemplateColumns = \"repeat(auto-fit, minmax(100px, 1fr))\";\r\n        moodsGrid.style.gap = \"12px\";\r\n        moodsGrid.style.width = \"100%\";\r\n        section.moods.forEach((mood) => {\r\n          const moodButton = document.createElement(\"button\");\r\n          moodButton.innerText = mood;\r\n          moodButton.style.padding = \"10px 18px\";\r\n          moodButton.style.borderRadius = \"8px\";\r\n          moodButton.style.border = \"none\";\r\n          moodButton.style.background = \"var(--background-modifier-hover, #444)\";\r\n          moodButton.style.color = \"var(--text-normal, #fff)\";\r\n          moodButton.style.fontSize = \"1rem\";\r\n          moodButton.style.cursor = \"pointer\";\r\n          moodButton.onmouseenter = () => moodButton.style.background = \"var(--background-modifier-active-hover, #666)\";\r\n          moodButton.onmouseleave = () => moodButton.style.background = \"var(--background-modifier-hover, #444)\";\r\n          moodButton.onclick = () => {\r\n            selectedMood = mood;\r\n            Array.from(moodsGrid.querySelectorAll(\"button\")).forEach((btn) => btn.classList.remove(\"selected-mood\"));\r\n            moodButton.classList.add(\"selected-mood\");\r\n            selectedMoodButton = moodButton;\r\n          };\r\n          moodsGrid.appendChild(moodButton);\r\n        });\r\n        moodSectionDetail.appendChild(moodsGrid);\r\n      };\r\n      moodSectionGrid.appendChild(sectionCell);\r\n    });\r\n  });\r\n  moodContainer.appendChild(moodSectionGrid);\r\n  moodContainer.appendChild(moodSectionDetail);\r\n  const style = document.createElement(\"style\");\r\n  style.innerText = `.selected-mood { background: var(--interactive-accent) !important; color: var(--text-on-accent) !important; border: var(--input-border-width) solid var(--background-primary) !important; }`;\r\n  modal.appendChild(style);\r\n  const escListener = (e: KeyboardEvent) => {\r\n    if (e.key === \"Escape\") {\r\n      if (moodSectionDetail.style.display === \"flex\") {\r\n        moodSectionDetail.style.display = \"none\";\r\n        moodSectionGrid.style.display = \"grid\";\r\n        backButton.style.display = \"none\";\r\n      } else {\r\n        closeModal(modal);\r\n        window.removeEventListener(\"keydown\", escListener);\r\n      }\r\n    }\r\n  };\r\n  window.addEventListener(\"keydown\", escListener);\r\n  modal.appendChild(moodContainer);\r\n  modal.appendChild(controlsContainer);\r\n  openModal(modal);\r\n  okayButton.onclick = () => {\r\n    const editor = plugin.app.workspace.getActiveViewOfType(MarkdownView)?.editor;\r\n    if (editor && selectedMood) {\r\n      const settings = plugin.settings;\r\n      let energyStr = \"\";\r\n      const value = parseInt(slider.value);\r\n      if (settings.energyDisplay === \"percent\") {\r\n        energyStr = settings.energyOnlyFormat.replace(\"{value}\", `${value}%`);\r\n      } else if (settings.energyDisplay === \"bar\") {\r\n        energyStr = settings.energyOnlyFormat.replace(\"{value}\", formatBarIcons(settings.barIcons, value, settings.barIconCount));\r\n      } else {\r\n        energyStr = settings.energyOnlyFormat.replace(\"{value}\", `${value}`);\r\n      }\r\n      const format = settings.moodAndEnergyFormat || \"{mood} | {energy}\";\r\n      const output = format.replace(\"{mood}\", selectedMood).replace(\"{energy}\", energyStr);\r\n      editor.replaceSelection(output);\r\n      if (editor.focus) editor.focus();\r\n    }\r\n    closeModal(modal);\r\n  };\r\n  cancelButton.onclick = () => {\r\n    closeModal(modal);\r\n  };\r\n}\r\n\r\n/**\r\n * Registers all plugin commands and their hotkeys with Obsidian.\r\n * @param plugin - The plugin instance.\r\n */\r\nexport function registerCommands(plugin: any) {\r\n  function canRunCommand() {\r\n    // Only require that no modal is open\r\n    return !currentOpenModal;\r\n  }\r\n  plugin.addCommand({\r\n    id: \"insert-mood\",\r\n    name: \"Insert Mood\",\r\n    hotkeys: [{ modifiers: [\"Alt\"], key: \"6\" }],\r\n    callback: async () => {\r\n      if (!canRunCommand()) return;\r\n      const moods = await loadMoodsFromFile(plugin.app.vault, plugin.settings.moodsFilePath);\r\n      const moodMenu = new MoodMenu(moods);\r\n      const selectedMood = await moodMenu.open();\r\n      if (selectedMood) {\r\n        const editor = plugin.app.workspace.getActiveViewOfType(MarkdownView)?.editor;\r\n        if (editor) {\r\n          const format = plugin.settings.moodOnlyFormat || \"{value}\";\r\n          const output = format.replace(\"{value}\", selectedMood);\r\n          editor.replaceSelection(output);\r\n          if (editor.focus) editor.focus();\r\n        }\r\n      }\r\n    }\r\n  });\r\n  plugin.addCommand({\r\n    id: \"insert-energy-level\",\r\n    name: \"Insert Energy Level\",\r\n    hotkeys: [{ modifiers: [\"Alt\"], key: \"5\" }],\r\n    callback: async () => {\r\n      if (!canRunCommand()) return;\r\n      const energySlider = new EnergySlider();\r\n      const selectedEnergyLevel = await energySlider.open();\r\n      if (selectedEnergyLevel !== null) {\r\n        const editor = plugin.app.workspace.getActiveViewOfType(MarkdownView)?.editor;\r\n        if (editor) {\r\n          let output = \"\";\r\n          const settings = plugin.settings;\r\n          if (settings.energyDisplay === \"percent\") {\r\n            output = settings.energyOnlyFormat.replace(\"{value}\", `${selectedEnergyLevel}%`);\r\n          } else if (settings.energyDisplay === \"bar\") {\r\n            output = settings.energyOnlyFormat.replace(\"{value}\", formatBarIcons(settings.barIcons, selectedEnergyLevel, settings.barIconCount));\r\n          } else {\r\n            output = settings.energyOnlyFormat.replace(\"{value}\", `${selectedEnergyLevel}`);\r\n          }\r\n          editor.replaceSelection(output);\r\n          if (editor.focus) editor.focus();\r\n        }\r\n      }\r\n    }\r\n  });\r\n  plugin.addCommand({\r\n    id: \"insert-mood-and-energy\",\r\n    name: \"Insert Mood and Energy Level\",\r\n    hotkeys: [{ modifiers: [\"Alt\"], key: \"7\" }],\r\n    callback: () => {\r\n      if (!canRunCommand()) return;\r\n      showMoodAndEnergyModal(plugin);\r\n    }\r\n  });\r\n}\r\n", "// moodMenu.ts\r\n// Mood selection modal logic for the Mood & Energy Obsidian plugin.\r\n\r\n/**\r\n * Modal for selecting a mood from a list/grid.\r\n */\r\nexport class MoodMenu {\r\n  moods: string[];\r\n  selectedMood: string | null = null;\r\n  resolveFn: ((mood: string | null) => void) | null = null;\r\n\r\n  /**\r\n   * @param moods - List of available moods.\r\n   */\r\n  constructor(moods: string[]) {\r\n    this.moods = moods;\r\n  }\r\n\r\n  /**\r\n   * Displays the mood selection menu.\r\n   * @param widthOverride - Optional width override for the menu.\r\n   */\r\n  displayMenu(widthOverride?: string) {\r\n    const menu = document.createElement(\"div\");\r\n    menu.className = \"mood-menu\";\r\n    menu.style.position = \"fixed\";\r\n    menu.style.top = \"50%\";\r\n    menu.style.left = \"50%\";\r\n    menu.style.transform = \"translate(-50%, -50%)\";\r\n    menu.style.background = \"var(--background-secondary)\";\r\n    menu.style.padding = \"24px\";\r\n    menu.style.borderRadius = \"var(--radius-m)\";\r\n    menu.style.zIndex = \"9999\";\r\n    menu.style.display = \"flex\";\r\n    menu.style.flexDirection = \"column\";\r\n    menu.style.alignItems = \"center\";\r\n    menu.style.boxShadow = \"0 4px 32px var(--background-modifier-box-shadow)\";\r\n    menu.style.maxHeight = \"80vh\";\r\n    menu.style.overflow = \"auto\";\r\n    menu.style.width = widthOverride || \"min(700px, 90vw)\";\r\n    menu.style.minWidth = \"340px\";\r\n    menu.style.maxWidth = \"98vw\";\r\n    menu.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n    const sectionGrid = document.createElement(\"div\");\r\n    sectionGrid.style.display = \"grid\";\r\n    sectionGrid.style.gridTemplateColumns = \"repeat(auto-fit, minmax(220px, 1fr))\";\r\n    sectionGrid.style.gap = \"18px\";\r\n    sectionGrid.style.width = \"100%\";\r\n    sectionGrid.style.marginBottom = \"18px\";\r\n    const sectionDetail = document.createElement(\"div\");\r\n    sectionDetail.style.display = \"none\";\r\n    sectionDetail.style.flexDirection = \"column\";\r\n    sectionDetail.style.alignItems = \"stretch\";\r\n    sectionDetail.style.width = \"100%\";\r\n    sectionDetail.style.marginBottom = \"18px\";\r\n    const backButton = document.createElement(\"button\");\r\n    backButton.innerText = \"\\u2190 Back\";\r\n    backButton.className = \"mod-cta\";\r\n    backButton.style.marginBottom = \"12px\";\r\n    backButton.style.alignSelf = \"flex-start\";\r\n    backButton.style.padding = \"var(--size-4-2) var(--size-4-4)\";\r\n    backButton.style.borderRadius = \"var(--radius-s)\";\r\n    backButton.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n    backButton.style.background = \"var(--background-modifier-hover)\";\r\n    backButton.style.color = \"var(--text-normal)\";\r\n    backButton.style.fontWeight = \"bold\";\r\n    backButton.style.cursor = \"pointer\";\r\n    backButton.onclick = () => {\r\n      sectionDetail.style.display = \"none\";\r\n      sectionGrid.style.display = \"grid\";\r\n      backButton.style.display = \"none\";\r\n    };\r\n    sectionDetail.appendChild(backButton);\r\n    backButton.style.display = \"none\";\r\n    let i = 0;\r\n    const sectionData: { header: string, moods: string[] }[] = [];\r\n    while (i < this.moods.length) {\r\n      const mood = this.moods[i];\r\n      if (/^#+\\s/.test(mood)) {\r\n        const headerText = mood.replace(/^#+\\s*/, \"\");\r\n        const moods: string[] = [];\r\n        i++;\r\n        while (i < this.moods.length && !/^#+\\s/.test(this.moods[i])) {\r\n          moods.push(this.moods[i].replace(/^[-*]\\s*/, \"\"));\r\n          i++;\r\n        }\r\n        sectionData.push({ header: headerText, moods });\r\n      } else if (!/^[-*]\\s*/.test(mood)) {\r\n        sectionData.push({ header: mood, moods: [] });\r\n        i++;\r\n      } else {\r\n        i++;\r\n      }\r\n    }\r\n    sectionData.forEach((section) => {\r\n      const sectionCell = document.createElement(\"div\");\r\n      sectionCell.style.display = \"flex\";\r\n      sectionCell.style.flexDirection = \"column\";\r\n      sectionCell.style.alignItems = \"center\";\r\n      sectionCell.style.background = \"var(--background-modifier-hover)\";\r\n      sectionCell.style.borderRadius = \"var(--radius-m)\";\r\n      sectionCell.style.padding = \"18px 6px 18px 6px\";\r\n      sectionCell.style.boxSizing = \"border-box\";\r\n      sectionCell.style.minWidth = \"0\";\r\n      sectionCell.style.cursor = \"pointer\";\r\n      sectionCell.style.transition = \"background 0.2s\";\r\n      sectionCell.onmouseenter = () => sectionCell.style.background = \"var(--background-modifier-active-hover)\";\r\n      sectionCell.onmouseleave = () => sectionCell.style.background = \"var(--background-modifier-hover)\";\r\n      const sectionLabel = document.createElement(\"div\");\r\n      sectionLabel.innerText = section.header;\r\n      sectionLabel.style.fontWeight = \"bold\";\r\n      sectionLabel.style.fontSize = \"1.2rem\";\r\n      sectionLabel.style.color = \"var(--text-accent)\";\r\n      sectionCell.appendChild(sectionLabel);\r\n      sectionCell.onclick = () => {\r\n        sectionGrid.style.display = \"none\";\r\n        sectionDetail.style.display = \"flex\";\r\n        backButton.style.display = \"block\";\r\n        while (sectionDetail.childNodes.length > 1)\r\n          sectionDetail.removeChild(sectionDetail.lastChild!);\r\n        const moodsGrid = document.createElement(\"div\");\r\n        moodsGrid.style.display = \"grid\";\r\n        moodsGrid.style.gridTemplateColumns = \"repeat(auto-fit, minmax(100px, 1fr))\";\r\n        moodsGrid.style.gap = \"12px\";\r\n        moodsGrid.style.width = \"100%\";\r\n        section.moods.forEach((mood) => {\r\n          const moodButton = document.createElement(\"button\");\r\n          moodButton.innerText = mood;\r\n          moodButton.className = \"mod-cta\";\r\n          moodButton.style.padding = \"var(--size-4-2) var(--size-4-4)\";\r\n          moodButton.style.borderRadius = \"var(--radius-s)\";\r\n          moodButton.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n          moodButton.style.background = \"var(--background-modifier-hover)\";\r\n          moodButton.style.color = \"var(--text-normal)\";\r\n          moodButton.style.fontSize = \"1rem\";\r\n          moodButton.style.cursor = \"pointer\";\r\n          moodButton.onmouseenter = () => moodButton.style.background = \"var(--background-modifier-active-hover)\";\r\n          moodButton.onmouseleave = () => moodButton.style.background = \"var(--background-modifier-hover)\";\r\n          moodButton.onclick = () => {\r\n            this.selectMood(mood);\r\n            Array.from(moodsGrid.querySelectorAll(\"button\")).forEach((btn) => btn.classList.remove(\"selected-mood\"));\r\n            moodButton.classList.add(\"selected-mood\");\r\n            this.confirmSelection();\r\n          };\r\n          moodsGrid.appendChild(moodButton);\r\n        });\r\n        sectionDetail.appendChild(moodsGrid);\r\n      };\r\n      sectionGrid.appendChild(sectionCell);\r\n    });\r\n    menu.appendChild(sectionGrid);\r\n    menu.appendChild(sectionDetail);\r\n    const buttonRow = document.createElement(\"div\");\r\n    buttonRow.style.display = \"flex\";\r\n    buttonRow.style.gap = \"12px\";\r\n    buttonRow.style.marginTop = \"10px\";\r\n    const okayButton = document.createElement(\"button\");\r\n    okayButton.innerText = \"Okay\";\r\n    okayButton.className = \"mod-cta\";\r\n    okayButton.style.padding = \"var(--size-4-2) var(--size-4-4)\";\r\n    okayButton.style.borderRadius = \"var(--radius-s)\";\r\n    okayButton.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n    okayButton.style.background = \"var(--interactive-accent)\";\r\n    okayButton.style.color = \"var(--text-on-accent)\";\r\n    okayButton.style.fontWeight = \"bold\";\r\n    okayButton.style.cursor = \"pointer\";\r\n    okayButton.onclick = () => this.confirmSelection();\r\n    buttonRow.appendChild(okayButton);\r\n    const cancelButton = document.createElement(\"button\");\r\n    cancelButton.innerText = \"Cancel\";\r\n    cancelButton.className = \"mod-cta\";\r\n    cancelButton.style.padding = \"var(--size-4-2) var(--size-4-4)\";\r\n    cancelButton.style.borderRadius = \"var(--radius-s)\";\r\n    cancelButton.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n    cancelButton.style.background = \"var(--background-modifier-hover)\";\r\n    cancelButton.style.color = \"var(--color-red)\";\r\n    cancelButton.style.fontWeight = \"bold\";\r\n    cancelButton.style.cursor = \"pointer\";\r\n    cancelButton.onclick = () => this.cancelSelection();\r\n    buttonRow.appendChild(cancelButton);\r\n    menu.appendChild(buttonRow);\r\n    const style = document.createElement(\"style\");\r\n    style.innerText = `.selected-mood { background: var(--interactive-accent) !important; color: var(--text-on-accent) !important; border: var(--input-border-width) solid var(--background-primary) !important; }`;\r\n    menu.appendChild(style);\r\n    const escListener = (e: KeyboardEvent) => {\r\n      if (e.key === \"Escape\") {\r\n        if (sectionDetail.style.display === \"flex\") {\r\n          sectionDetail.style.display = \"none\";\r\n          sectionGrid.style.display = \"grid\";\r\n          backButton.style.display = \"none\";\r\n        } else {\r\n          this.closeMenu();\r\n          window.removeEventListener(\"keydown\", escListener);\r\n        }\r\n      }\r\n    };\r\n    window.addEventListener(\"keydown\", escListener);\r\n    document.body.appendChild(menu);\r\n  }\r\n\r\n  /**\r\n   * Opens the modal and returns a promise resolving to the selected mood or null.\r\n   */\r\n  open(): Promise<string | null> {\r\n    this.displayMenu();\r\n    return new Promise((resolve) => {\r\n      this.resolveFn = resolve;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Selects a mood.\r\n   * @param mood - The mood to select.\r\n   */\r\n  selectMood(mood: string) {\r\n    this.selectedMood = mood;\r\n  }\r\n\r\n  /**\r\n   * Confirms the current selection and closes the modal.\r\n   */\r\n  confirmSelection() {\r\n    if (this.resolveFn)\r\n      this.resolveFn(this.selectedMood);\r\n    this.closeMenu();\r\n  }\r\n\r\n  /**\r\n   * Cancels the selection and closes the modal.\r\n   */\r\n  cancelSelection() {\r\n    if (this.resolveFn)\r\n      this.resolveFn(null);\r\n    this.closeMenu();\r\n  }\r\n\r\n  /**\r\n   * Closes the modal and cleans up.\r\n   */\r\n  closeMenu() {\r\n    const menu = document.querySelector(\".mood-menu\");\r\n    if (menu) {\r\n      menu.remove();\r\n    }\r\n  }\r\n}\r\n", "// energySlider.ts\r\n// Energy slider modal logic for the Mood & Energy Obsidian plugin.\r\n\r\nimport { formatBarIcons, openModal, closeModal } from \"./types\";\r\n\r\n/**\r\n * Modal for selecting an energy level using a slider.\r\n */\r\nexport class EnergySlider {\r\n  resolveFn: ((value: number | null) => void) | null = null;\r\n  selectedValue: number = 50;\r\n  modalElement!: HTMLDivElement;\r\n  sliderElement!: HTMLInputElement;\r\n\r\n  /**\r\n   * Initializes the modal and slider elements.\r\n   */\r\n  constructor() {\r\n    this.createModal();\r\n  }\r\n\r\n  /**\r\n   * Creates the modal DOM structure and event handlers.\r\n   */\r\n  createModal() {\r\n    this.modalElement = document.createElement(\"div\");\r\n    this.modalElement.className = \"energy-slider-modal\";\r\n    this.modalElement.style.position = \"fixed\";\r\n    this.modalElement.style.top = \"50%\";\r\n    this.modalElement.style.left = \"50%\";\r\n    this.modalElement.style.transform = \"translate(-50%, -50%)\";\r\n    this.modalElement.style.background = \"var(--background-secondary)\";\r\n    this.modalElement.style.padding = \"24px\";\r\n    this.modalElement.style.borderRadius = \"var(--radius-m)\";\r\n    this.modalElement.style.zIndex = \"9999\";\r\n    this.modalElement.style.display = \"flex\";\r\n    this.modalElement.style.flexDirection = \"column\";\r\n    this.modalElement.style.alignItems = \"center\";\r\n    this.modalElement.style.boxShadow = \"0 4px 32px var(--background-modifier-box-shadow)\";\r\n    this.modalElement.style.maxHeight = \"80vh\";\r\n    this.modalElement.style.overflow = \"auto\";\r\n    this.modalElement.style.minWidth = \"340px\";\r\n    this.modalElement.style.width = \"min(420px, 98vw)\";\r\n    this.modalElement.style.border = \"var(--input-border-width) solid var(--background-modifier-border)\";\r\n    this.modalElement.innerHTML = `\r\n            <div class=\"slider-container\" style=\"display:flex;flex-direction:column;align-items:center;\">\r\n                <input type=\"range\" min=\"0\" max=\"100\" value=\"50\" class=\"slider\" id=\"energySlider\" style=\"width:200px;\">\r\n                <div class=\"slider-value\" id=\"sliderValue\" style=\"margin-top:8px;color:var(--text-normal);\">50</div>\r\n                <div class=\"energy-preview\" id=\"energyPreview\" style=\"margin-top:8px;color:var(--text-normal);font-family:monospace;font-size:1.2em;\"></div>\r\n            </div>\r\n            <div style=\"display:flex;gap:12px;margin-top:18px;justify-content:center;width:100%;\">\r\n                <button id=\"okayButton\" class=\"mod-cta\" style=\"padding:var(--size-4-2) var(--size-4-4);border-radius:var(--radius-s);border:var(--input-border-width) solid var(--background-modifier-border);background:var(--interactive-accent);color:var(--text-on-accent);font-weight:bold;cursor:pointer;\">Okay</button>\r\n                <button id=\"cancelButton\" class=\"mod-cta\" style=\"padding:var(--size-4-2) var(--size-4-4);border-radius:var(--radius-s);border:var(--input-border-width) solid var(--background-modifier-border);background:var(--background-modifier-hover);color:var(--color-red);font-weight:bold;cursor:pointer;\">Cancel</button>\r\n            </div>\r\n        `;\r\n    this.sliderElement = this.modalElement.querySelector(\"#energySlider\")!;\r\n    const sliderValueDisplay = this.modalElement.querySelector(\"#sliderValue\")!;\r\n    const preview = this.modalElement.querySelector(\"#energyPreview\") as HTMLElement;\r\n    const okayButton = this.modalElement.querySelector(\"#okayButton\")!;\r\n    const cancelButton = this.modalElement.querySelector(\"#cancelButton\")!;\r\n    const updatePreview = () => {\r\n      const settings = (window as any).app?.plugins?.plugins?.[\"obsidian-mood-energy-plugin\"]?.settings || {\r\n        energyDisplay: \"bar\",\r\n        energyFormat: \"Energy: {value}\",\r\n        barIcons: \"\u28FF\u28F7\u28F6\u28E6\u28E4\u28C4\u28C0\",\r\n        barIconCount: 7,\r\n        energyOnlyFormat: \"Energy: {value}\",\r\n        moodOnlyFormat: \"{value}\",\r\n        moodAndEnergyFormat: \"{mood} | {energy}\"\r\n      };\r\n      const value = parseInt(this.sliderElement.value);\r\n      let output = \"\";\r\n      if (settings.energyDisplay === \"percent\") {\r\n        output = settings.energyOnlyFormat.replace(\"{value}\", `${value}%`);\r\n      } else if (settings.energyDisplay === \"bar\") {\r\n        output = settings.energyOnlyFormat.replace(\"{value}\", formatBarIcons(settings.barIcons, value, settings.barIconCount));\r\n      } else {\r\n        output = settings.energyOnlyFormat.replace(\"{value}\", `${value}`);\r\n      }\r\n      preview.innerText = output;\r\n    };\r\n    this.sliderElement.addEventListener(\"input\", () => {\r\n      this.selectedValue = parseInt(this.sliderElement.value);\r\n      sliderValueDisplay.textContent = this.selectedValue.toString();\r\n      updatePreview();\r\n    });\r\n    updatePreview();\r\n    okayButton.addEventListener(\"click\", () => {\r\n      this.closeModal();\r\n      if (this.resolveFn)\r\n        this.resolveFn(this.selectedValue);\r\n    });\r\n    cancelButton.addEventListener(\"click\", () => {\r\n      this.closeModal();\r\n      if (this.resolveFn)\r\n        this.resolveFn(null);\r\n    });\r\n    const escListener = (e: KeyboardEvent) => {\r\n      if (e.key === \"Escape\") {\r\n        this.closeModal();\r\n        window.removeEventListener(\"keydown\", escListener);\r\n      }\r\n    };\r\n    window.addEventListener(\"keydown\", escListener);\r\n  }\r\n\r\n  /**\r\n   * Opens the modal and returns a promise resolving to the selected value or null.\r\n   */\r\n  open(): Promise<number | null> {\r\n    openModal(this.modalElement);\r\n    return new Promise((resolve) => {\r\n      this.resolveFn = resolve;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Closes the modal and cleans up.\r\n   */\r\n  closeModal() {\r\n    closeModal(this.modalElement);\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["import_obsidian", "import_obsidian"]
}
